[
    {
        "id": "651af9bb9a46e4b0",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9357c048778312fb",
        "type": "subflow",
        "name": "Check User",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 180,
                "wires": [
                    {
                        "id": "b45ed1d156b58f2b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 120,
                "wires": [
                    {
                        "id": "9e67bd51c83a538c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-address-book"
    },
    {
        "id": "8775dfdfd56f79c1",
        "type": "subflow",
        "name": "Has admin",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 180,
                "wires": [
                    {
                        "id": "2cf53f5e4e43c395"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 140,
                "wires": [
                    {
                        "id": "2cf53f5e4e43c395",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FFAAAA",
        "icon": "node-red/cog.svg"
    },
    {
        "id": "071adb762f609302",
        "type": "mongodb4-client",
        "name": "",
        "protocol": "mongodb",
        "hostname": "localhost",
        "port": "27017",
        "dbName": "todoDb",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "",
        "advanced": "{}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "c511762b02162f48",
        "type": "jwt verify",
        "z": "9357c048778312fb",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "147852369",
        "key": "",
        "signvar": "token",
        "storetoken": "token",
        "x": 670,
        "y": 180,
        "wires": [
            [
                "9e67bd51c83a538c"
            ]
        ]
    },
    {
        "id": "9e67bd51c83a538c",
        "type": "function",
        "z": "9357c048778312fb",
        "name": "function 1",
        "func": "// Bypass varsa (login/register veya /user-opt/add), direk geçir\nif (msg.auth && msg.auth.skip) {\n  if (msg.user === undefined) msg.user = null;\n  return msg;\n}\n\n// Normal yol: token doğrulandıktan sonra kullanıcıyı ekle\nif (!msg.token) { return null; }\nif (msg.token.ip && msg.req && msg.token.ip !== msg.req.ip) { return null; }\n\nmsg.user = msg.token;\nmsg.user.isAdmin = Array.isArray(msg.user?.roles) && msg.user.roles.includes(\"admin\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b45ed1d156b58f2b",
        "type": "function",
        "z": "9357c048778312fb",
        "name": "function 3",
        "func": "// OUT1: devam (verify-bypass'a gidecek)\n// OUT2: 302 /login (redirect)\n\nconst urlPath = (msg.req?.originalUrl || \"/\").split(\"?\")[0];\nconst method  = msg.req?.method || \"GET\";\nconst t = msg.req?.cookies?.token;\n\n// Herkese açık sayfalar\n// Herkese açık sayfalar\nconst isPublic =\n  /^\\/login\\b/.test(urlPath) ||\n  /^\\/register\\b/.test(urlPath) ||\n  /^\\/favicon\\.ico$/.test(urlPath) ||\n  /^\\/assets\\//.test(urlPath) ||\n  /^\\/css\\//.test(urlPath) ||      \n  /^\\/js\\//.test(urlPath)  ||      \n  /^\\/font(s)?\\//.test(urlPath) || \n  /^\\/img\\//.test(urlPath);        \n\n\n// Kayıt formu POST'u (register'dan)\nconst DB = global.get(\"DB\") || {};\nconst isFirstUser = !Array.isArray(DB.user) || DB.user.length === 0;\nconst fromRegister = (msg.req?.headers?.referer || \"\").includes(\"/register\");\nconst allowSignupPost = urlPath === \"/user-opt/add\" && method === \"POST\" && (isFirstUser || fromRegister);\n\nif (isPublic || allowSignupPost) {\n  // verify'ı atlayacağımızı işaretle\n  msg.auth = { skip: true };\n  return [msg, null];     // OUT1\n}\n\nif (!t) {\n  msg.statusCode = 302;\n  msg.headers = { Location: \"/login?next=\" + encodeURIComponent(msg.req?.originalUrl || \"/\") };\n  msg.payload = \"\";\n  return [null, msg];     // OUT2 → http (302)\n}\n\nmsg.token = t;\nreturn [msg, null];       // OUT1 → verify-bypass\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 180,
        "wires": [
            [
                "3ec52673b7ad49d0"
            ],
            [
                "0c24164cf1ebeb78"
            ]
        ]
    },
    {
        "id": "0c24164cf1ebeb78",
        "type": "http response",
        "z": "9357c048778312fb",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/login"
        },
        "x": 440,
        "y": 200,
        "wires": []
    },
    {
        "id": "3ec52673b7ad49d0",
        "type": "function",
        "z": "9357c048778312fb",
        "name": "verify-bypass",
        "func": "if (msg.auth && msg.auth.skip) {\n  msg.user = null;\n  return [msg, null];      // OUT1\n}\n// Bypass yoksa JWT verify'a gönder\nreturn [null, msg];        // OUT2\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 140,
        "wires": [
            [
                "9e67bd51c83a538c"
            ],
            [
                "c511762b02162f48"
            ]
        ]
    },
    {
        "id": "2cf53f5e4e43c395",
        "type": "function",
        "z": "8775dfdfd56f79c1",
        "name": "function 5",
        "func": "if (msg.auth && msg.auth.skip) return msg;\n\n\nif (msg.user && msg.user.roles && msg.user.roles.includes(\"admin\")) return msg;\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 180,
        "wires": [
            [],
            [
                "99ccd2c20e9fc2c3"
            ]
        ]
    },
    {
        "id": "99ccd2c20e9fc2c3",
        "type": "http response",
        "z": "8775dfdfd56f79c1",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 580,
        "y": 200,
        "wires": []
    },
    {
        "id": "2ae9555726c58d4a",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Yapılacaklar Listesi</title>\n\n  <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\" />\n  <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" />\n</head>\n\n<body class=\"bg-light\">\n\n  <!-- NAVBAR: solda sadece metin, sağda mavi kısayol (buton) -->\n  <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n    <div class=\"container d-flex align-items-center\">\n      <span class=\"navbar-text fw-semibold fs-4\">Yapılacaklar Listesi</span>\n      <!-- mavi kısayol: Admin Panel'e gider -->\n      {{#user.isAdmin}}\n      <a href=\"/user-list\"\n        class=\"btn btn-primary ms-auto d-flex align-items-center justify-content-center rounded-1 p-0 shadow\"\n        style=\"width:48px;height:48px;\" aria-label=\"Admin Panel\">\n        <i class=\"bi bi-person-fill fs-4\"></i>\n      </a>\n      {{/user.isAdmin}}\n    </div>\n  </nav>\n\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-8 offset-md-2\">\n\n        {{#error}}\n        <div class=\"alert alert-danger\">\n          <h4 class=\"m-0\">{{message}}</h4>\n        </div>\n        {{/error}}\n\n        <!-- Ekleme formu -->\n        <form action=\"/opt/add\" method=\"POST\" class=\"mb-3\">\n          <div class=\"input-group input-group-lg\">\n            <input required type=\"text\" name=\"name\"\n                   class=\"form-control {{#error}}border-danger{{/error}}\"\n                   placeholder=\"Dosyalar teslim edilecek...\">\n            <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n            <button class=\"btn btn-outline-primary px-5\" type=\"submit\">Ekle</button>\n          </div>\n        </form>\n\n        <!-- Liste Kartı -->\n        <div class=\"card overflow-hidden\">\n          <div class=\"card-body p-0\">\n            <div class=\"table-responsive\">\n              <table class=\"table table-hover m-0\">\n                <thead class=\"table-dark\">\n                  <tr>\n                    <th colspan=\"2\">Yapılacaklar Listesi</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {{#payload}}\n                  <tr class=\"align-middle\">\n                    <td>\n                      {{#done}}\n                      <div class=\"text-muted\"><del>{{name}}</del></div>\n                      {{/done}}\n                      {{^done}}\n                      <div>{{name}}</div>\n                      {{/done}}\n                      <span class=\"badge bg-secondary\">\n                        <i class=\"bi bi-calendar2-date\"></i>&nbsp;{{dateTime}}\n                      </span>\n                      {{#user.isAdmin}}\n                      <span class=\"badge bg-dark \">\n                        <i class=\"bi bi-person-fill\"></i>&nbsp;{{stamp.username}}\n                      </span>\n                      {{/user.isAdmin}}\n                    </td>\n                    <td class=\"text-end\">\n                      <div class=\"btn-group\">\n                        <form method=\"POST\" class=\"m-0\">\n                          <input type=\"hidden\" name=\"id\" value=\"{{id}}\"/>\n\n                          {{#done}}\n                          <button type=\"submit\" formaction=\"/opt/open\" class=\"btn btn-warning\" title=\"Yeniden aç\">\n                              <i class=\"bi bi-arrow-clockwise\"></i>\n                            </button>\n                          {{/done}}\n\n                          {{^done}}\n                          <a href=\"/schedule/{{id}}\" class=\"btn btn-secondary\" title=\"Zamanla\">\n                            <i class=\"bi bi-alarm-fill\"></i>\n                          </a>\n                          <a href=\"/edit/{{id}}\" class=\"btn btn-info\" title=\"Düzenle\">\n                            <i class=\"bi bi-pencil-square\"></i>\n                          </a>\n                          <button type=\"submit\" formaction=\"/opt/complete\" class=\"btn btn-success\" title=\"Tamamla\">\n                              <i class=\"bi bi-check-square\"></i>\n                            </button>\n                          {{/done}}\n\n                          <button type=\"submit\" formaction=\"/opt/trash\" class=\"btn btn-danger\" title=\"Sil\">\n                            <i class=\"bi bi-trash\"></i>\n                          </button>\n                        </form>\n                      </div>\n                    </td>\n                  </tr>\n                  {{/payload}}\n\n                  {{^payload}}\n                  <tr>\n                    <td colspan=\"2\" class=\"text-muted text-center py-4\">Henüz giriş yapılmadı...</td>\n                  </tr>\n                  {{/payload}}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n  <!-- Sağ alt kullanıcı/çıkış alanı -->\n  <div class=\"position-fixed bottom-0 end-0 m-4\" style=\"z-index:1080\">\n    {{#user}}\n    <div class=\"btn-group dropup shadow\">\n      <button type=\"button\" class=\"btn btn-light border\">\n          {{#user.displayName}}{{user.displayName}}{{/user.displayName}}\n          {{^user.displayName}}{{user.username}}{{/user.displayName}}\n          {{#user.email}}{{user.email}}{{/user.email}}\n          {{^user.email}}{{user.email}}{{/user.email}}\n        </button>\n      <a href=\"/logout\" class=\"btn btn-danger\" title=\"Çıkış\">\n        <i class=\"bi bi-power\"></i>\n      </a>\n    </div>\n    {{/user}}\n\n    {{^user}}\n    <a href=\"/login\" class=\"btn btn-outline-primary shadow\">\n      <i class=\"bi bi-person\"></i> Giriş\n    </a>\n    {{/user}}\n  </div>\n\n  <script src=\"/js/bootstrap.bundle.min.js\"></script>\n</body>\n\n</html>",
        "output": "str",
        "x": 780,
        "y": 220,
        "wires": [
            [
                "5f3b77fa64a6ca14"
            ]
        ]
    },
    {
        "id": "5f3b77fa64a6ca14",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 220,
        "wires": []
    },
    {
        "id": "9e7745c31875caa6",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.find()",
        "func": "\nlet query = msg.user.roles.includes(\"admin\")\n  ? {}\n  : { \"stamp.username\": msg.user.username };\n\nmsg.payload = [[{ $match: query },\n{ $sort: { \"stamp.createdAt\": -1 } },\n\n  ]\n];\n\nmsg.hasAdmin = msg.user.roles.includes(\"admin\") ? true : false;\nreturn msg;\n/*\nlet query = msg.user.roles.includes(\"admin\")\n      ? {}\n      : { \"stamp.username\": msg.user.username };\n\n    msg.payload = query; // Sadece sorgu nesnesini gönderiyoruz\n\n    return msg;\n*/",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 220,
        "wires": [
            [
                "7b383705f4aaec1f"
            ]
        ]
    },
    {
        "id": "c5f4d0120c89df7e",
        "type": "link in",
        "z": "651af9bb9a46e4b0",
        "name": "link in 1",
        "links": [
            "0302817e86f493e9",
            "8646b06022669592",
            "2713f0cacf4e39f6",
            "22dd74058ceaa141"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "6d8042d6f0a12ac0"
            ]
        ]
    },
    {
        "id": "cb74c25f1cb1ec44",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/opt/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "f55ef5f0d076fe2f"
            ]
        ]
    },
    {
        "id": "91308c72ec45a46b",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 1500,
        "y": 540,
        "wires": []
    },
    {
        "id": "f8a16a36a9c0bb02",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.opt()",
        "func": "const type = (msg.req?.params?.type || \"\").trim();\nconst nowDate = new Date();\nconst now = nowDate.getTime();\n\nmsg.formData = msg.payload || {};\nconst f = msg.formData;\n\nfunction normId(v) {\n  const s = (v ?? \"\").toString().trim();\n  if (!s) return s;\n  const n = Number(s);\n  return Number.isNaN(n) ? s : n;\n}\n\nif (type === \"add\") {\n  const name = (f.name || \"\").trim();\n  msg.payload = {\n    id: now,\n    name,\n    done: false,\n    stamp: {\n      createdAt: now,\n      ip: msg.req?.ip || \"\",\n      username: msg.user?.username || \"\",\n      email: msg.user?.email || \"\"\n    },\n    dateTime: nowDate.toLocaleString(\"tr-TR\", { hour12: false })\n  };\n  return [msg, null];\n}\n\nconst id =\n  normId(f.id) ||\n  normId(msg.req?.body?.id) ||\n  normId(msg.req?.params?.id) ||\n  \"\";\n\nmsg.payload = { id };\nreturn [null, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 580,
        "wires": [
            [
                "93d181d58a920cd0"
            ],
            [
                "57fe0dbd56855d23"
            ]
        ],
        "outputLabels": [
            "Success",
            ""
        ]
    },
    {
        "id": "c8e03f51ac6bfb33",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "validation",
        "func": "const typeLookup = {\n    trash: {\n        text: \"Silme\",\n        requireArgs: [\"id\"]\n    },\n    complete: {\n        text: \"Tamamlama\",\n        requireArgs: [\"id\"]\n    },\n    open: {\n        text: \"Açma\",\n        requireArgs: [\"id\"]\n    },\n    add: {\n        text: \"Ekleme\",\n        requireArgs: [\"name\"]\n    },\n    update: {\n        text: \"Güncelle\",\n        requireArgs: [\"id\", \"name\", \"orig\"]\n    },\n    schedule: {\n        text: \"Hatırlatıcı\",\n        requireArgs: [\"id\", \"datetime\"]\n    }\n}\n\nif (!Object.keys(typeLookup).includes(msg.req.params.type)) {\n    msg.error = {\n        message: `${msg.req.params.type} geçersiz bir parametre değeridir.`\n    }\n    return [null, msg]\n}\n\nif (!typeLookup[msg.req.params.type].requireArgs.every(arg => msg.payload[arg])) {\n    msg.error = {\n        message: `${typeLookup[msg.req.params.type].text} istediğiniz elemanın ${typeLookup[msg.req.params.type].requireArgs} bilgisi olmalı`\n    }\n    return [null, msg]\n}\n\nif (msg.req.params.type === \"update\") {\n    const newVal = (msg.payload.name || \"\").trim();\n    const origVal = (msg.payload.orig || \"\").trim();\n    if (newVal === origVal) {\n        msg.error = {\n            message: \"Herhangi bir güncelleme yapmadınız.\"\n        };\n        return [null, msg];\n    }\n}\nif (msg.req.params.type === \"schedule\") {\n    const newDt = (msg.payload.datetime || \"\").trim();\n    const origDt = (msg.payload.origDt || \"\").trim();\n    const newNote = (msg.payload.note || \"\").trim();\n    const origNote = (msg.payload.origNote || \"\").trim();\n\n    const ms = Date.parse(newDt);\n\n    if (ms < Date.now()) {\n        msg.error = { message: \"Geçmiş bir zamana planlanamaz.\" };\n        return [null, msg];\n    }\n    if (origDt && newDt === origDt) {\n        msg.error = { message: \"Herhangi bir değişiklik yapmadınız.\" };\n        return [null, msg];\n    }\n\n    msg.payload.schedule = { datetime: newDt, epoch: ms };\n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 580,
        "wires": [
            [
                "f8a16a36a9c0bb02"
            ],
            [
                "0302817e86f493e9"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "0302817e86f493e9",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 595,
        "y": 620,
        "wires": []
    },
    {
        "id": "8646b06022669592",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 1135,
        "y": 600,
        "wires": []
    },
    {
        "id": "a72f64871256d68a",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "6d8042d6f0a12ac0"
            ]
        ]
    },
    {
        "id": "6f79df54bf91c316",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/edit/:id",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "4a66cc4d80aa2897"
            ]
        ]
    },
    {
        "id": "414d44229aa0ed03",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.findOne()",
        "func": "// URL'den gelen id'yi sayı yapılabiliyorsa sayıya çevir\nconst raw = (msg.req.params.id ?? \"\").toString().trim();\nconst num = Number(raw);\nconst id  = Number.isNaN(num) ? raw : num;\n\nmsg.payload = { id };\n\nif(!msg.user.roles.includes(\"admin\")){\n  msg.payload[\"stamp.username\"] = msg.user.username;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 320,
        "wires": [
            [
                "4ebc1649e8305f46"
            ]
        ],
        "outputLabels": [
            "Success"
        ]
    },
    {
        "id": "b38fb814b875aebb",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Yapılacaklar — Düzenleme</title>\n\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\" />\n    <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" />\n</head>\n\n<body class=\"bg-light\">\n    <!-- NAVBAR: ana sayfadaki ile aynı yükseklik ve yapı -->\n    <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n        <div class=\"container d-flex align-items-center\">\n            <span class=\"navbar-text fw-semibold fs-4\">Yapılacaklar — Düzenleme</span>\n            <a class=\"ms-auto nav-link fw-semibold fs-5\" href=\"/\">Ana Sayfa</a>\n        </div>\n    </nav>\n\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n\n                <form action=\"/opt/update\" method=\"POST\">\n                    <input type=\"hidden\" name=\"id\" value=\"{{payload.id}}\">\n                    <input type=\"hidden\" name=\"orig\" value=\"{{payload.name}}\">\n\n                    <div class=\"mb-4\">\n                        <input\n              required\n              type=\"text\"\n              name=\"name\"\n              value=\"{{payload.name}}\"\n              class=\"form-control form-control-lg {{#error}}border-danger{{/error}} {{^error}}border-info{{/error}}\"\n              placeholder=\"Dosyalar teslim edilecek...\"\n            >\n                    </div>\n\n                    <div class=\"d-flex justify-content-end gap-2 mb-1\">\n                        <a class=\"btn btn-outline-warning\" href=\"/\">Vazgeç</a>\n                        <button class=\"btn btn-outline-secondary\" type=\"button\"\n                    onclick=\"document.querySelector('[name=name]').value = ''\">Temizle</button>\n                        <button id=\"btnUpdate\" class=\"btn btn-outline-success px-5\" type=\"submit\" disabled>Güncelle</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        (function(){\n    const nameEl = document.querySelector('[name=name]');\n    const origEl = document.querySelector('[name=orig]');\n    const btn    = document.getElementById('btnUpdate');\n\n    function toggle(){\n      const changed = (nameEl.value || '').trim() !== (origEl.value || '').trim();\n      btn.disabled = !changed;\n    }\n    document.addEventListener('DOMContentLoaded', toggle);\n    nameEl.addEventListener('input', toggle);\n  })();\n    </script>\n\n    <script src=\"/js/bootstrap.bundle.min.js\"></script>\n</body>\n\n</html>",
        "output": "str",
        "x": 1020,
        "y": 320,
        "wires": [
            [
                "16deb591861247c0"
            ]
        ]
    },
    {
        "id": "2713f0cacf4e39f6",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 955,
        "y": 360,
        "wires": []
    },
    {
        "id": "16deb591861247c0",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 320,
        "wires": []
    },
    {
        "id": "3eea38f2a6d357e1",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/schedule/:id",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "2cbcf6d6ae4cab8b"
            ]
        ]
    },
    {
        "id": "b8be420b120246f5",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.findTwo()",
        "func": "// URL'den gelen id'yi sayı yapılabiliyorsa sayıya çevir\nconst raw = (msg.req.params.id ?? \"\").toString().trim();\nconst num = Number(raw);\nconst id  = Number.isNaN(num) ? raw : num;\n\nmsg.payload = { id };\n\nif(!msg.user.roles.includes(\"admin\")){\n  msg.payload[\"stamp.username\"] = msg.user.username;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "8af76568d2754a77"
            ]
        ],
        "outputLabels": [
            "Success"
        ]
    },
    {
        "id": "a35e8f26138c2a60",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Hatırlatıcılar</title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n  <link href=\"/font/bootstrap-icons.min.css\" rel=\"stylesheet\">\n  <style>\n    .badge-time {\n      background: #e9ecef;\n      color: #212529;\n    }\n\n    .list-hover .list-group-item:hover {\n      background: #f8f9fa;\n    }\n  </style>\n</head>\n\n<body class=\"bg-light\">\n\n  <!-- NAVBAR -->\n  <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n    <div class=\"container d-flex align-items-center\">\n      <span class=\"navbar-text fw-semibold fs-4\">Hatırlatıcılar</span>\n      <a class=\"ms-auto nav-link fw-semibold fs-5\" href=\"/\">Ana Sayfa</a>\n    </div>\n  </nav>\n\n  <main class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-8 offset-md-2\">\n\n        <!-- FORM -->\n        <form id=\"frm\" action=\"/opt/schedule\" method=\"post\" class=\"mb-3\">\n          <input type=\"hidden\" name=\"id\" value=\"{{payload.id}}\">\n\n          {{#payload.schedule}}\n          <input type=\"hidden\" name=\"origDt\" value=\"{{min}}\">\n          <input type=\"hidden\" name=\"origNote\" value=\"{{formData.note}}\">\n          {{/payload.schedule}}\n\n          <!-- Tarih/Saat -->\n          <div class=\"mb-3\">\n            <input\n              id=\"dt\"\n              name=\"datetime\"\n              type=\"datetime-local\"\n              step=\"60\"\n              class=\"form-control form-control-lg\"\n              {{#payload.schedule}} value=\"{{min}}\" {{/payload.schedule}}\n              aria-label=\"Tarih ve saat\">\n          </div>\n\n          <!-- Not -->\n          <div class=\"mb-3\">\n            <textarea\n              id=\"note\"\n              name=\"note\"\n              class=\"form-control form-control-lg\"\n              placeholder=\"Not ekleyin…\"\n              rows=\"3\">{{#payload.schedule}}{{formData.note}}{{/payload.schedule}}</textarea>\n          </div>\n\n          <!-- Butonlar -->\n          <div class=\"mb-3 d-flex justify-content-end gap-2\">\n            <a id=\"btnCancel\" class=\"btn btn-danger\" href=\"/\">Vazgeç</a>\n            <button id=\"btnClear\" class=\"btn btn-secondary\" type=\"button\">Temizle</button>\n            <button id=\"btnPlan\"  class=\"btn btn-success\" type=\"submit\">Planla</button>\n          </div>\n        </form>\n\n        <!-- LİSTE -->\n        <h5 class=\"text-muted mt-4\">Yaklaşan hatırlatıcılar</h5>\n        <div id=\"list\" class=\"list-group list-hover\">\n          {{#payload.schedule}}\n          <div class=\"list-group-item d-flex align-items-center justify-content-between\">\n            <div class=\"me-3\">\n              <div class=\"fw-semibold\">{{note}}{{^note}}Hatırlatıcı{{/note}}</div>\n              {{#formData.note}}\n              <div class=\"text-muted \" style=\"white-space:pre-wrap\">{{formData.note}}</div>\n              {{/formData.note}}\n            </div>\n\n            <div class=\"d-flex align-items-center gap-2\">\n              <span class=\"badge badge-time\">\n                <i class=\"bi bi-calendar2-date\"></i>\n                {{datetime}}\n              </span>\n\n              <button\n                class=\"btn btn-sm btn-outline-primary btn-edit\"\n                type=\"button\"\n                data-id=\"{{id}}\"\n                data-datetime=\"{{datetime}}\"\n                data-note=\"{{formData.note}}\"\n                data-name=\"{{name}}\"\n                title=\"Düzenle\">\n                <i class=\"bi bi-pencil-square\"></i>\n              </button>\n\n              <form action=\"/opt/schedule/delete\" method=\"post\" class=\"m-0 p-0\">\n                <input type=\"hidden\" name=\"id\" value=\"{{id}}\">\n                <button class=\"btn btn-sm btn-outline-danger\" type=\"submit\" title=\"Sil\">\n                  <i class=\"bi bi-trash\"></i>\n                </button>\n              </form>\n            </div>\n          </div>\n          {{/payload.schedule}}\n\n          {{^payload.schedule}}\n          <div class=\"list-group-item text-muted text-center\">Kayıt yok.</div>\n          {{/payload.schedule}}\n        </div>\n\n      </div>\n    </div>\n  </main>\n\n  <script>\n    (function(){\n    const dt       = document.getElementById('dt');\n    const note     = document.getElementById('note');\n    const btnClear = document.getElementById('btnClear');\n    const planBtn  = document.getElementById('btnPlan');\n\n    function pad(n){ return String(n).padStart(2,'0'); }\n    function toLocalInputValue(d){\n      const yy = d.getFullYear();\n      const mm = pad(d.getMonth()+1);\n      const dd = pad(d.getDate());\n      const hh = pad(d.getHours());\n      const mi = pad(d.getMinutes());\n      return `${yy}-${mm}-${dd}T${hh}:${mi}`;\n    }\n    function plusMinutes(date, minutes){\n      const d = new Date(date.getTime());\n      d.setMinutes(d.getMinutes() + minutes);\n      d.setSeconds(0,0);\n      return d;\n    }\n\n    document.addEventListener('DOMContentLoaded', function(){\n      const now = new Date();\n      const suggestion = plusMinutes(now, 10); // sadece varsayılan öneri\n      const minAllowed = now;\n\n      let current = new Date(dt.value);\n      if (!dt.value || !isFinite(current) || current <= now) {\n        dt.value = toLocalInputValue(suggestion);\n      }\n      dt.min = toLocalInputValue(minAllowed);\n\n      dt.addEventListener('change', function(){\n        const chosen = new Date(dt.value);\n        const now2 = new Date();\n        if (!isFinite(chosen) || chosen < now2) {\n          dt.value = toLocalInputValue(plusMinutes(now2, 1));\n        }\n      });\n\n      btnClear?.addEventListener('click', function(){\n        dt.value = '';\n        note.value = '';\n        planBtn.textContent = 'Planla';\n        dt.focus();\n      });\n\n      document.querySelectorAll('.btn-edit').forEach(btn => {\n        btn.addEventListener('click', () => {\n          const frm    = document.getElementById('frm');\n          const idEl   = frm.querySelector('input[name=\"id\"]');\n          const dtEl   = document.getElementById('dt');\n          const noteEl = document.getElementById('note');\n\n          const id   = btn.getAttribute('data-id');\n          const dtv  = btn.getAttribute('data-datetime') || '';\n          const nval = btn.getAttribute('data-note') || '';\n\n          idEl.value   = id;\n          dtEl.value   = dtv.replace(' ', 'T').slice(0,16);\n          noteEl.value = nval;\n\n          planBtn.textContent = 'Güncelle';\n          dtEl.focus();\n        });\n      });\n    });\n  })();\n  </script>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n\n</html>",
        "output": "str",
        "x": 1060,
        "y": 420,
        "wires": [
            [
                "c001fccb8fb4cf85"
            ]
        ]
    },
    {
        "id": "22dd74058ceaa141",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 995,
        "y": 480,
        "wires": []
    },
    {
        "id": "c001fccb8fb4cf85",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 420,
        "wires": []
    },
    {
        "id": "463e1db29a4e8833",
        "type": "crontinject",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 1,
        "hasButton": false,
        "x": 700,
        "y": 720,
        "wires": [
            [
                "d6134361a15b1330"
            ]
        ]
    },
    {
        "id": "4a377d0e6259123f",
        "type": "inject",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "4957ed9e50014e41"
            ]
        ]
    },
    {
        "id": "6deb06d96837b126",
        "type": "e-mail",
        "z": "651af9bb9a46e4b0",
        "server": "smtp-relay.brevo.com",
        "port": "587",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 1330,
        "y": 700,
        "wires": []
    },
    {
        "id": "0b9f34182300bc33",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "header",
        "func": "const DB = global.get(\"DB\") || { todo: [] };\n\n// Önce mevcut msg.todo varsa onu, yoksa topic'ten id yakala\nif (!msg.todo) {\n  const m = (msg.topic || \"\").match(/^todo:(\\d+)/);\n  if (m) {\n    const id = m[1];\n\n    // 1) Akış hafızası (function 11 schedule sırasında yazdık)\n    const flowTodo = flow.get(`todo:${id}`);\n    if (flowTodo) {\n      msg.todo = flowTodo;\n    }\n\n    // 2) Global DB yedeği\n    if (!msg.todo) {\n      msg.todo = DB.todo.find(t => String(t.id) === String(id));\n    }\n  }\n}\nif (!msg.todo) return null;\n\n// Eğer bu çağrı plan kaydını DB'ye yazmak içinse (kaydeden kol)\nif (msg.schedule) {\n  msg.payload = [\n    { _id: msg.formData.id },\n    { $set: { schedule: msg.response } }\n  ];\n  return [null, msg];\n}\n\n// Mail başlıkları\nmsg.from  = \"Hatırlatıcı <talhaormekaya@gmail.com>\";\nmsg.to    = (msg.todo?.stamp && msg.todo.stamp.email) ? msg.todo.stamp.email : \"talhaormekaya@gmail.com\";\nmsg.topic = `Hatırlatma: ${msg.todo?.name || \"Görev\"}`;\n\n// Görev üzerinde schedule'ı temizle ve son gönderim zamanını yaz\nconst idx = DB.todo.findIndex(t => String(t.id) === String(msg.todo.id));\nif (idx >= 0) {\n  if (DB.todo[idx].schedule) delete DB.todo[idx].schedule;\n  DB.todo[idx].dateTime = new Date().toLocaleString(\"tr-TR\", { hour12: false });\n  DB.todo[idx].stamp    = { createdAt: Date.now(), ip: \"\", user: \"\", email: \"\" };\n  global.set(\"DB\", DB);\n}\n\n// Akış hafızasındaki kopyayı da temizle\nconst topicId = (msg.topic || \"\").match(/^Hatırlatma: /) ? String(msg.todo.id) : null;\nif (topicId) {\n  flow.set(`todo:${topicId}`, undefined);\n}\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 720,
        "wires": [
            [
                "1e3410a2c0801097"
            ],
            [
                "7ca247c16df46b79"
            ]
        ]
    },
    {
        "id": "1e3410a2c0801097",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<p>{{todo.name}} işi için hatırlatma.</p>\n\n{{#todo.lastNote}}\n  <p style=\"white-space:pre-wrap;\"><strong>Not:</strong> {{todo.lastNote}}</p>\n{{/todo.lastNote}}\n",
        "output": "str",
        "x": 1180,
        "y": 700,
        "wires": [
            [
                "6deb06d96837b126"
            ]
        ]
    },
    {
        "id": "18dc3105a4edec0c",
        "type": "link in",
        "z": "651af9bb9a46e4b0",
        "name": "link in 2",
        "links": [
            "7148ede4c5df0a6c",
            "dcacbd7ada1430a0"
        ],
        "x": 585,
        "y": 720,
        "wires": [
            [
                "463e1db29a4e8833"
            ]
        ]
    },
    {
        "id": "dcacbd7ada1430a0",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "18dc3105a4edec0c"
        ],
        "x": 895,
        "y": 120,
        "wires": []
    },
    {
        "id": "d6134361a15b1330",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "OnlyFires",
        "func": "// OnlyFires — sadece gerçek tetiklemeyi geçir\nif (msg.schedule && (msg.schedule.list || msg.schedule.self)) {\n  return null; // kayıt onayı → mail gönderme\n}\n\n// Kurulum mesajlarını ele\nif (typeof msg.payload === \"object\" &&\n  (msg.payload?.crontiMethod || msg.payload?.crontiArgs)) {\n  return null;\n}\n\n// Gerçek tetik: number (epoch) | Date | \"timestamp\" string'i\nconst isDateObj = msg.payload && Object.prototype.toString.call(msg.payload) === \"[object Date]\";\nconst isNumber = typeof msg.payload === \"number\";\nconst isParsableString = (typeof msg.payload === \"string\") && !Number.isNaN(Date.parse(msg.payload));\n\nconst isRealFire = isNumber || isDateObj || isParsableString;\nreturn isRealFire ? msg : null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 720,
        "wires": [
            [
                "0b9f34182300bc33"
            ]
        ]
    },
    {
        "id": "90f7036bef489ba2",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Kullanıcı Listesi</title>\n\n  <!-- Bootstrap & DataTables -->\n  <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\" />\n  <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" />\n  <link rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.13.8/css/dataTables.bootstrap5.min.css\" />\n\n  <!-- SurveyJS (jQuery sürümü) -->\n  <script src=\"https://unpkg.com/jquery\"></script>\n  <script src=\"https://unpkg.com/survey-jquery/survey.jquery.min.js\"></script>\n  <link href=\"https://unpkg.com/survey-jquery/modern.min.css\" rel=\"stylesheet\" />\n\n  <style>\n    /* Container’ı biraz daha genişlet */\n    @media (min-width: 1400px) {\n      .container {\n        max-width: 1320px;\n      }\n    }\n\n    /* Kartların tam genişlikte görünmesi için */\n    .form-row,\n    .list-row {\n      margin-left: 0;\n      margin-right: 0;\n    }\n\n    /* Tablo kesin 100% */\n    #tblUsers {\n      width: 100% !important;\n    }\n\n    /* Survey formu ve tablo kartları */\n    .card {\n      border-radius: 0.75rem;\n    }\n\n    .badge-role {\n      font-weight: 500;\n    }\n  </style>\n</head>\n\n<body class=\"bg-light\">\n\n  <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n    <div class=\"container d-flex align-items-center justify-content-between\">\n      <span class=\"navbar-text fw-semibold fs-5\">Admin Panel</span>\n      <a class=\"ms-auto nav-link fw-semibold fs-5\" href=\"/\">Ana Sayfa</a>\n    </div>\n  </nav>\n\n  <div class=\"container pb-5\">\n    <!-- Kullanıcı Ekle -->\n    <div class=\"row form-row\">\n      <div class=\"col-12\">\n        <div class=\"card shadow-sm mb-4\">\n          <div class=\"card-body\">\n            <h5 class=\"mb-3\">Kullanıcı Ekle</h5>\n            <div id=\"formHost\"></div>\n\n            <!-- Parola gücü etiketi ve butonlar -->\n            <div class=\"d-flex align-items-center justify-content-between mt-2\">\n              <div class=\"text-muted\">Parola gücü: <span id=\"pwLabel\">—</span></div>\n              <div>\n                <button id=\"btnReset\" class=\"btn btn-outline-secondary me-2\">Temizle</button>\n                <button id=\"btnSubmit\" class=\"btn btn-primary\"><i class=\"bi bi-person-plus\"></i> Kaydet</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Kullanıcı Listesi -->\n    <div class=\"row list-row\">\n      <div class=\"col-12\">\n        <div class=\"card shadow-sm\">\n          <div class=\"card-body\">\n            <div class=\"d-flex align-items-center justify-content-between mb-2\">\n              <h5 class=\"mb-0\">Kullanıcı Listesi</h5>\n              <div id=\"listMeta\" class=\"text-muted small\"></div>\n            </div>\n\n            <div class=\"table-responsive\">\n              <table id=\"tblUsers\" class=\"table table-striped table-hover table-sm align-middle\">\n                <thead>\n                  <tr>\n                    <th>ID</th>\n                    <th>Kullanıcı Adı</th>\n                    <th>Ad Soyad</th>\n                    <th>E-posta</th>\n                    <th>Kayıt</th>\n                    <th>Rol</th>\n                    <th>Durum</th>\n                    <th class=\"text-end\">İşlemler</th>\n                  </tr>\n                </thead>\n                <tbody></tbody>\n              </table>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  </div><!-- /.container -->\n\n  <!-- DataTables JS -->\n  <script src=\"https://cdn.datatables.net/1.13.8/js/jquery.dataTables.min.js\"></script>\n  <script src=\"https://cdn.datatables.net/1.13.8/js/dataTables.bootstrap5.min.js\"></script>\n\n  <script>\n    /* ---------- yardımcı fetch ---------- */\n    async function postJSON(url, data) {\n      const res = await fetch(url, {\n        method: \"POST\",\n        headers: {\"Content-Type\":\"application/json\"},\n        credentials: \"include\",\n        body: JSON.stringify(data)\n      });\n      const text = await res.text();\n      let payload = null;\n      try { payload = text ? JSON.parse(text) : null; } catch {}\n      if (!res.ok) {\n        const err = new Error((payload && payload.message) || res.statusText);\n        if (payload && payload.fields) err.fields = payload.fields;\n        throw err;\n      }\n      return payload;\n    }\n\n    /* ---------- SurveyJS ---------- */\n    Survey.StylesManager.applyTheme(\"modern\");\n    const surveyJson = {\n      showQuestionNumbers: \"off\",\n      questionTitleLocation: \"left\",\n      widthMode: \"responsive\",\n      showNavigationButtons: \"none\",\n      showCompletedPage: false,\n      elements: [\n        /* İstediğin düzeltme: placeholder’da sadece kurallar kalsın */\n        { type:\"text\", name:\"username\", title:\"Kullanıcı Adı\", isRequired:true,\n          minLength:3, maxLength:32,\n          placeholder:\"(3–32, harf/rakam/._)\" }, /* önceki 'kullaniciadi ...' kaldırıldı */\n        { type:\"text\", name:\"displayName\", title:\"Ad Soyad\", isRequired:true,\n          minLength:2, maxLength:60, startWithNewLine:false },\n        { type:\"text\", name:\"email\", title:\"E-posta\", isRequired:true, startWithNewLine:false,\n          inputType:\"email\", placeholder:\"ornek@site.com\",\n          validators:[{ type:\"email\", text:\"Geçerli bir e-posta girin.\" }] },\n        { type:\"text\", name:\"password\", title:\"Parola\", inputType:\"password\",\n          isRequired:true, minLength:8, maxLength:64 },\n        { type:\"text\", name:\"password2\", title:\"Parola (Tekrar)\", inputType:\"password\",\n          isRequired:true, startWithNewLine:false,\n          validators:[{ type:\"expression\", expression:\"{password} = {password2}\", text:\"Parolalar eşleşmiyor.\" }] }\n      ]\n    };\n    const survey = new Survey.Model(surveyJson);\n    $(\"#formHost\").Survey({ model: survey });\n\n    /* Parola gücü mini hesap */\n    function scorePassword(p){ let s=0; if(!p) return 0;\n      s += Math.min(6, new Set(p).size);\n      s += /[a-z]/.test(p); s += /[A-Z]/.test(p);\n      s += /\\\\d/.test(p); s += /[^A-Za-z0-9]/.test(p);\n      s += Math.min(4, Math.floor(p.length/3)); return s; }\n    function labelFromScore(sc){\n      if(sc>=9) return {text:\"çok güçlü\", cls:\"color: #198754\"};         // yeşil\n      if(sc>=7) return {text:\"güçlü\", cls:\"color: #198754\"};\n      if(sc>=5) return {text:\"orta\", cls:\"color: #fd7e14\"};              // turuncu\n      return {text:\"zayıf\", cls:\"color: #dc3545\"};                        // kırmızı\n    }\n    survey.onValueChanged.add((s,opt)=>{\n      if(opt.name===\"password\"){\n        const lbl=document.getElementById(\"pwLabel\");\n        if(lbl){ const info = labelFromScore(scorePassword(opt.value||\"\"));\n          lbl.textContent = info.text; lbl.style = info.cls; }\n      }\n    });\n\n    /* Submit / Reset */\n    document.addEventListener(\"click\",(ev)=>{\n      if(ev.target.id===\"btnSubmit\"||ev.target.closest(\"#btnSubmit\")) handleSubmit();\n      if(ev.target.id===\"btnReset\" ||ev.target.closest(\"#btnReset\"))  handleReset();\n    });\n    async function handleSubmit(){\n      if (survey.hasErrors(true)) return;\n      const payload = { ...survey.data };\n      [\"username\",\"displayName\",\"email\"].forEach(k=>{\n        if(payload[k]!=null) payload[k]=String(payload[k]).trim();\n      });\n      try{\n        await postJSON(\"/user-opt/add\", payload);\n        survey.clear(false,true);\n        const lbl=document.getElementById(\"pwLabel\"); if(lbl){ lbl.textContent=\"—\"; lbl.style=\"\"; }\n        $(\"#tblUsers\").DataTable().ajax.reload(null,false);\n      }catch(e){\n        if(e.fields){\n          for(const [name,msg] of Object.entries(e.fields)){\n            survey.getQuestionByName(name)?.addError(new Survey.CustomError(String(msg)));\n          }\n        }\n        alert(e.message||\"Kayıt başarısız.\");\n      }\n    }\n    function handleReset(){\n      survey.clear(false,true);\n      const lbl=document.getElementById(\"pwLabel\"); if(lbl){ lbl.textContent=\"—\"; lbl.style=\"\"; }\n      setTimeout(()=>survey.getQuestionByName(\"username\")?.focus(true),0);\n    }\n\n    /* ---------- DataTables ---------- */\n    const shortId = (id)=> (id? String(id).slice(0,10)+\"…\" : \"—\");\n    $(function(){\n      $(\"#tblUsers\").DataTable({\n        processing:true,\n        serverSide:false,\n        order: [[4, \"desc\"]],\n        ajax:{\n          url:\"/user-opt/list\",\n          dataSrc:(json)=> Array.isArray(json)? json : (json.items||[]),\n          error:(xhr)=>{ console.error(\"Liste hatası:\",xhr?.responseText||xhr.statusText);\n            alert(\"Kullanıcı listesi alınamadı.\"); }\n        },\n        pageLength:10,\n        columns:[\n          { data:\"id\", render:(v)=>`<span class=\"text-muted\">${shortId(v)}</span>` },\n          { data:\"username\" },\n          { data:\"displayName\" },\n          { data:\"email\" },\n          /* Kayıt tarihi kolonu backend’ten createdAtText ile gelecek. */\n          { data:\"createdAtText\", defaultContent:\"—\",\n            render:(v)=>`<span class=\"text-muted small\">${v||\"—\"}</span>` },\n          { data:\"roles\", render:(r)=>{\n              const role = Array.isArray(r)&&r.includes(\"admin\") ? \"admin\" : \"user\";\n              const cls  = role==='admin' ? 'primary' : 'secondary';\n              return `<span class=\"badge text-bg-${cls} badge-role\">${role}</span>`;\n            }},\n          { data:\"active\", render:(v)=> v\n              ? '<span class=\"badge text-bg-success\">Aktif</span>'\n              : '<span class=\"badge text-bg-danger\">Pasif</span>' },\n          { data:null, className:\"text-end\", orderable:false, render:(_,__,row)=>{\n              const q=(k)=>encodeURIComponent(row[k]??\"\");\n              const isActive=!!row.active;\n              const urlEdit=`/user-edit/${q('id')}`;\n              const btnClass=isActive?'btn-outline-danger':'btn-outline-success';\n              const icon=isActive?'bi-power':'bi-check2-circle';\n              const label=isActive?'Pasifleştir':'Aktifleştir';\n              return `\n                <a class=\"btn btn-sm btn-outline-primary me-1\" href=\"${urlEdit}\">\n                  <i class=\"bi bi-pencil-square\"></i> Düzenle\n                </a>\n                <button class=\"btn btn-sm ${btnClass} me-1 btn-toggle\" data-id=\"${q('id')}\" data-active=\"${isActive}\">\n                  <i class=\"bi ${icon}\"></i> ${label}\n                </button>`;\n            } }\n        ]\n      });\n    });\n  </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 1180,
        "y": 940,
        "wires": [
            [
                "ec5abb8df0da65db"
            ]
        ]
    },
    {
        "id": "ec5abb8df0da65db",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1330,
        "y": 940,
        "wires": []
    },
    {
        "id": "4801fcc29ebde45c",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.user.find()",
        "func": "\nmsg.payload = {}; // Tüm kullanıcıları bulmak için boş sorgu\nmsg.sort = { \"stamp.createdAt\": -1 }; // Oluşturulma tarihine göre tersten sırala\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 940,
        "wires": [
            [
                "f99da836ba8f456d"
            ]
        ]
    },
    {
        "id": "4ca887471ba0d4a5",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/user-list",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 940,
        "wires": [
            [
                "608bec346261cb04"
            ]
        ]
    },
    {
        "id": "cecc1be4c4bb0aa4",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/user-opt/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1100,
        "wires": [
            [
                "8a33b0e666b5995f"
            ]
        ]
    },
    {
        "id": "97440a5695968cc4",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.user.opt()",
        "func": "const type = msg.req?.params?.type ?? \"\";\nmsg.formData = msg.payload; \n\nif (type === \"add\") {\n  const now = Date.now();\n  const userDoc = {\n    username: (msg.formData.username || \"\").trim(),\n    password: (msg.formData.password || \"\").trim(),\n    displayName: (msg.formData.displayName || \"\").trim(),\n    email: (msg.formData.email || \"\").trim(),\n    roles: [\"user\"],\n    active: true,\n    createdAt: now,\n    order: now,\n    stamp: {\n      createdAt: now,\n      ip: msg.req?.ip,\n      username: (msg.formData.username || \"\").trim(),\n      email: (msg.formData.email || \"\").trim()\n    },\n    dateTime: new Date(now).toLocaleString(\"tr-TR\", { hour12: false })\n  };\n  msg.payload = userDoc;\n  return [msg, null];\n}\n\n// Sorunlu \"if (id.length === 48)\" satırı kaldırılmış, sadeleştirilmiş kod\nconst id = String(msg.formData.id || \"\");\n\nlet query;\nif (!id) {\n    query = { _id: \"__NEVER_FIND_THIS__\" };\n} else {\n    // \"Düzenle\" akışında çalıştığı kanıtlanmış olan güvenilir sorgu yöntemi kullanılıyor\n    query = {\n        $expr: {\n            $eq: [ { $toString: \"$_id\" }, id ]\n        }\n    };\n}\n\nmsg.payload = query;\nreturn [null, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1140,
        "wires": [
            [
                "0d8a639157364107"
            ],
            [
                "0c8fb0b08f44164f"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "7083b2826db710fa",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "validation",
        "func": "/***********************\n * Admin Validation v2\n * - /user-opt/:type  (POST)\n *   type ∈ { add, activate, deactivate }\n * - Cache KULLANMAZ → varlık kontrolünü DB bir sonraki nodda yapar.\n ***********************/\nconst BAD_REQ = 400;\n\nfunction redirect(path, flashType, flashMsg) {\n    msg.flash = { type: flashType || \"danger\", text: flashMsg || \"\" };\n    msg.statusCode = 302;\n    msg.headers = msg.headers || {};\n    msg.headers.Location = path || \"/user-list\";\n    return msg;\n}\n\nfunction fail(message, fieldErrors, toPath) {\n    msg.valid = false;\n    msg.errors = fieldErrors || {};\n    return redirect(toPath || \"/user-list\", \"danger\", message || \"İstek doğrulanamadı.\");\n}\n\nfunction ok(payload) {\n    msg.valid = true;\n    if (payload) msg.payload = payload;\n    return msg;\n}\n\n// ---- request kaynakları\nconst params = (msg.req && msg.req.params) || {};\nconst body   = (msg.payload && typeof msg.payload === \"object\") ? msg.payload : {};\nconst type   = String(params.type || body.type || \"\").trim().toLowerCase();\n\n// Küçük yardımcılar\nconst isEmail = (e) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(String(e || \"\").trim());\nconst notEmpty = (s) => String(s || \"\").trim().length > 0;\n\n// ---- router\nif (!type) {\n    return fail(\"Geçersiz istek: işlem türü yok.\", { type: \"Zorunlu.\" }, \"/user-list\");\n}\n\nif (type === \"activate\" || type === \"deactivate\") {\n    // Sadece ID’nin geldiğini doğrula; varlık kontrolünü MongoDB findOne yapacak\n    const id = String(body.id || \"\").trim();\n    if (!id) {\n        return fail(\"Geçersiz istek: id yok.\", { id: \"Zorunlu.\" }, \"/user-list\");\n    }\n    // Opsiyonel: 24 hex veya string id kabul edelim\n    const looksLikeObjectId = /^[a-fA-F0-9]{24}$/.test(id);\n    if (!looksLikeObjectId && id.length < 8) {\n        return fail(\"Geçersiz id.\", { id: \"Biçim geçersiz.\" }, \"/user-list\");\n    }\n\n    // Downstream için temiz bir payload bırak\n    msg.payload = { id, type };\n    return ok();\n}\n\nif (type === \"add\") {\n    const username = String(body.username || body.kullaniciAdi || \"\").trim();\n    const displayName = String(body.displayName || body.fullname || body.isim || \"\").trim();\n    const email    = String(body.email || body.eposta || \"\").trim();\n    const password = String(body.password || body.parola || \"\").trim();\n\n    const errors = {};\n    if (!notEmpty(username)) errors.username = \"Kullanıcı adı zorunlu.\";\n    if (!notEmpty(displayName)) errors.displayName = \"İsim soyisim zorunlu.\";\n    if (!isEmail(email))     errors.email    = \"E-posta biçimi hatalı.\";\n    if (password.length < 8) errors.password = \"Parola en az 8 karakter olmalı.\";\n\n    if (Object.keys(errors).length) {\n        return fail(\"Eksik veya hatalı alanlar var.\", errors, \"/user-list\");\n    }\n\n    // Downstream insert için normalize payload\n    msg.payload = { type, username, displayName, email, password };\n    return ok();\n}\n\n// İleride başka türler gelirse:\nreturn fail(`Desteklenmeyen işlem: ${type}`, { type: \"Bilinmiyor.\" }, \"/user-list\");\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1100,
        "wires": [
            [
                "d9c5fb2fbf3b0189"
            ],
            [
                "7817b550669eb8a2"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "126ead5b72b171f3",
        "type": "link in",
        "z": "651af9bb9a46e4b0",
        "name": "link in 4",
        "links": [
            "68b150d9072e014b",
            "18d52f7ab428eef7",
            "14819198696d743b"
        ],
        "x": 565,
        "y": 900,
        "wires": [
            [
                "4801fcc29ebde45c"
            ]
        ]
    },
    {
        "id": "7817b550669eb8a2",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "8a6d783f9fac6a74"
        ],
        "x": 815,
        "y": 1140,
        "wires": []
    },
    {
        "id": "68b150d9072e014b",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "126ead5b72b171f3"
        ],
        "x": 1745,
        "y": 1220,
        "wires": []
    },
    {
        "id": "158f6cdbc523a790",
        "type": "bcrypt",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "action": "encrypt",
        "field": "payload.password",
        "hash": "payload",
        "target": "payload.password",
        "assignment": "assign",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 1190,
        "y": 1100,
        "wires": [
            [
                "97440a5695968cc4"
            ]
        ]
    },
    {
        "id": "314b400985be68da",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/user-edit/:id",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1300,
        "wires": [
            [
                "333ba1b4a05495f7"
            ]
        ]
    },
    {
        "id": "7c83cb4a19389f12",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.user.findOne()",
        "func": "const id = String(msg.req.params.id || '');\n\nmsg.payload = {\n  $expr: { $eq: [ { $toString: '$_id' }, id ] }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1300,
        "wires": [
            [
                "049f6c44dff76dd4"
            ]
        ],
        "outputLabels": [
            "Success"
        ]
    },
    {
        "id": "1251f822538e5dd8",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Kullanıcı Düzenle</title>\n\n  <!-- Bootstrap -->\n  <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\" />\n  <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" />\n\n  <!-- SurveyJS (jQuery) -->\n  <script src=\"https://unpkg.com/jquery\"></script>\n  <script src=\"https://unpkg.com/survey-jquery/survey.jquery.min.js\"></script>\n  <link href=\"https://unpkg.com/survey-jquery/modern.min.css\" rel=\"stylesheet\" />\n</head>\n<body class=\"bg-light\">\n  <!-- NAVBAR -->\n  <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n    <div class=\"container d-flex align-items-center\">\n      <span class=\"navbar-text fw-semibold fs-4\">Admin Panel — Düzenleme Sayfası</span>\n      <a class=\"ms-auto nav-link fw-semibold fs-5\" href=\"/user-list\">Admin Panel</a>\n    </div>\n  </nav>\n\n  <main class=\"container\">\n    <div class=\"d-flex align-items-center gap-2 mb-3\">\n      <a href=\"/user-list\" class=\"btn btn-sm btn-outline-secondary\">&larr; Listeye dön</a>\n      <h5 class=\"m-0\">Kullanıcı Düzenle</h5>\n      <span id=\"loading\" class=\"ms-auto small text-muted\">Yükleniyor…</span>\n    </div>\n\n    <!-- Sunucudan gelen başlangıç verilerini göm (Mustache) -->\n    <div id=\"init\"\n      data-id=\"{{payload._id}}\"\n      data-username=\"{{payload.username}}\"\n      data-email=\"{{payload.email}}\"\n      data-displayname=\"{{payload.displayName}}\"\n      data-active=\"{{#payload.active}}true{{/payload.active}}{{^payload.active}}false{{/payload.active}}\"\n      data-roles='[{{#payload.roles}}\"{{.}}\",{{/payload.roles}}]'>\n    </div>\n\n    <div class=\"card shadow-sm\">\n      <div class=\"card-body\">\n        <div id=\"surveyContainer\"></div>\n      </div>\n    </div>\n\n    <footer class=\"text-center text-muted small my-4\">© {{year}} Admin</footer>\n  </main>\n\n  <script>\n    // Tema\n    Survey.StylesManager.applyTheme(\"modern\");\n\n    // Küçük yardımcılar\n    async function postJSON(url, data){\n      const r = await fetch(url, {\n        method:\"POST\",\n        headers:{ \"Content-Type\":\"application/json; charset=utf-8\" },\n        credentials:\"same-origin\",\n        body: JSON.stringify(data)\n      });\n      let j = {};\n      try { j = await r.json(); } catch(_) {}\n      if(!r.ok || j.ok === false){\n        const e = new Error(j?.message || \"Güncelleme başarısız.\");\n        e.fields = j?.errors || null;\n        throw e;\n      }\n      return j;\n    }\n\n    // Başlangıç verisini DOM'daki #init'ten oku\n    function readInit(){\n      const el = document.getElementById('init');\n      const rolesRaw = el.dataset.roles || \"[]\";\n      let roles = [];\n      try {\n        // trailing virgülü temizle\n        const fixed = rolesRaw.replace(/,\\s*]/, \"]\");\n        roles = JSON.parse(fixed);\n      } catch(_){ /* yoksay */ }\n      return {\n        id:          el.dataset.id || \"\",\n        username:    el.dataset.username || \"\",\n        email:       el.dataset.email || \"\",\n        displayName: el.dataset.displayname || \"\",\n        active:      String(el.dataset.active) === \"true\",\n        roles:       Array.isArray(roles) ? roles : []\n      };\n    }\n\n    // Mustache ile viewer admin mi?\n    {{#user.isAdmin}}\n    const isViewerAdmin = true;\n    {{/user.isAdmin}}\n    {{^user.isAdmin}}\n    const isViewerAdmin = false;\n    {{/user.isAdmin}}\n\n    // Form JSON\n    const formJson = {\n      showTitle: false,\n      showCompletedPage: false,\n      showQuestionNumbers: \"off\",\n      completeText: \"Güncelle\",\n      widthMode: \"responsive\",\n      elements: [\n        { type:\"text\", name:\"id\", visible:false },\n\n        // KULLANICI ADI / E-POSTA tam yazılamaz\n        { type:\"text\", name:\"username\", title:\"Kullanıcı adı\", readOnly:true },\n        { type:\"text\", name:\"email\",    title:\"E-posta\", inputType:\"email\", readOnly:true },\n\n        { type:\"text\", name:\"displayName\", title:\"Ad Soyad\", isRequired:true, minLength:2, maxLength:64,\n          placeholder: \"Ad Soyad\"\n        },\n\n        // Şifre değişimi (opsiyonel)\n        { type:\"text\", name:\"password\", title:\"Yeni şifre (opsiyonel)\", inputType:\"password\", minLength:8 },\n\n        // Aktif/Pasif\n        {\n          type:\"radiogroup\", name:\"active\", title:\"Durum\",\n          choices:[ {value:true, text:\"Aktif\"}, {value:false, text:\"Pasif\"} ],\n          colCount: 2, isRequired:true\n        },\n\n        // Sadece admin görecek → Admin yetkisi ver\n        {\n          type:\"boolean\",\n          name:\"isAdminFlag\",\n          title:\"Admin yetkisi ver\",\n          visible: isViewerAdmin === true,\n          valueTrue: true,\n          valueFalse: false,\n          labelTrue: \"Evet\",\n          labelFalse: \"Hayır\"\n        }\n      ]\n    };\n\n    const survey = new Survey.Model(formJson);\n\n    // Submit davranışı\n    survey.onCompleting.add(function(sender, options){\n      options.allow = false; // async\n      const f = sender.data || {};\n\n      // Admin switch güvenli parse\n      const v = f.isAdminFlag;\n      const isAdminChecked = (v === true || v === \"true\" || v === 1 || v === \"1\");\n\n      const payload = {\n        type: \"update\",\n        id: f.id,\n        displayName: (f.displayName || \"\").trim(),\n        // backend'e alanın gönderildiğini belirtmek için\n        isAdmin_present: isViewerAdmin ? \"1\" : undefined,\n        isAdmin: (isViewerAdmin && isAdminChecked) ? \"true\" : \"false\",\n        active: (String(f.active) === \"true\" || f.active === true) ? \"true\" : \"false\"\n      };\n      if ((f.password || \"\").trim().length > 0) payload.password = f.password;\n\n      (async () => {\n        try {\n          await postJSON(\"/user-opt/update\", payload);\n          // Başarılı → listeye dön\n          location.assign(`/user-list?updated=${encodeURIComponent(payload.id)}`);\n        } catch(e) {\n          // Alan bazlı hata varsa alana yaz\n          if (e.fields) {\n            for (const [name,msg] of Object.entries(e.fields)) {\n              sender.getQuestionByName(name)?.addError(new Survey.CustomError(String(msg)));\n            }\n          }\n          // Üst genel hata\n          sender.errors = [{ text: e.message || \"Güncelleme başarısız.\" }];\n          sender.doComplete(false);\n        }\n      })();\n    });\n\n    // Render ve başlangıç verisini bağla\n    $(function(){\n      const init = readInit();\n\n      // roles içinde admin var mı?\n      const hasAdmin = Array.isArray(init.roles) && init.roles.map(String).includes(\"admin\");\n\n      survey.data = {\n        id: init.id,\n        username: init.username,\n        email: init.email,\n        displayName: init.displayName || \"\",\n        active: !!init.active,\n        isAdminFlag: !!hasAdmin\n      };\n\n      const l = document.getElementById(\"loading\"); if (l) l.style.display = \"none\";\n      $(\"#surveyContainer\").Survey({ model: survey });\n\n      // Footer yılı\n      const ft = document.querySelector('footer');\n      if (ft && ft.innerHTML.includes('{{year}}')) {\n        ft.innerHTML = ft.innerHTML.replace('{{year}}', new Date().getFullYear());\n      }\n    });\n  </script>\n</body>\n</html>\n",
        "output": "str",
        "x": 1260,
        "y": 1280,
        "wires": [
            [
                "f8653907910821de"
            ]
        ]
    },
    {
        "id": "f8653907910821de",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 1280,
        "wires": []
    },
    {
        "id": "18d52f7ab428eef7",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "126ead5b72b171f3"
        ],
        "x": 1215,
        "y": 1340,
        "wires": []
    },
    {
        "id": "fc9042b8d1523bc0",
        "type": "switch",
        "z": "651af9bb9a46e4b0",
        "name": "hash-or-skip",
        "property": "payload.password",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$exists(payload.password) and $length($trim(payload.password)) > 0",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 1140,
        "wires": [
            [
                "158f6cdbc523a790"
            ],
            [
                "97440a5695968cc4"
            ]
        ]
    },
    {
        "id": "4aeed1b5c7644171",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/login",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1640,
        "wires": [
            [
                "8c7785adb445f91b"
            ]
        ]
    },
    {
        "id": "8c7785adb445f91b",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Giriş Yap</title>\n\n  <!-- Bootstrap -->\n  <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\" />\n  <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" />\n\n  <!-- SurveyJS (jQuery) -->\n  <script src=\"https://unpkg.com/jquery\"></script>\n  <script src=\"https://unpkg.com/survey-jquery/survey.jquery.min.js\"></script>\n  <link href=\"https://unpkg.com/survey-jquery/modern.min.css\" rel=\"stylesheet\" />\n</head>\n<body>\n  <div class=\"container mt-5\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-6 col-lg-5\">\n        <div class=\"card shadow-sm\">\n          <div class=\"card-body\">\n            <h5 class=\"mb-3\">Giriş Yap</h5>\n\n            {{#error}} <div class=\"alert alert-danger\">{{message}}</div> {{/error}}\n\n            <div id=\"surveyContainer\"></div>\n\n            <div class=\"text-center mt-3\">\n              Hesabın yok mu? <a href=\"/register\">Kayıt ol</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<script>\n  Survey.StylesManager.applyTheme(\"modern\");\n\n  const surveyJson = {\n    title: \"Giriş Yap\",\n    showTitle: false,\n    showCompletedPage: false,\n    showQuestionNumbers: \"off\",\n    completeText: \"Giriş Yap\",\n    widthMode: \"responsive\",\n    elements: [\n      {\n        type: \"text\",\n        name: \"identifier\",\n        title: \"Kullanıcı adı veya E-posta\",\n        isRequired: true,\n        minLength: 3,\n        placeholder: \"Kullanıcı Adı veya mail@ornek.com\"\n      },\n      {\n        type: \"text\",\n        name: \"password\",\n        title: \"Şifre\",\n        inputType: \"password\",\n        isRequired: true,\n        minLength: 8\n      }\n    ]\n  };\n\n  const survey = new Survey.Model(surveyJson);\n\n  let submitting = false;\n\n  survey.onCompleting.add(async function (sender, options) {\n    options.allowComplete = false;\n    if (submitting) return;\n    submitting = true;\n\n    // Hataları temizle\n    sender.errors = [];\n    const allQs = typeof sender.getAllQuestions === \"function\" ? sender.getAllQuestions() : [];\n    allQs.forEach(q => { if (q && typeof q.clearErrors === \"function\") q.clearErrors(); });\n\n    sender.isReadOnly = true;\n\n    const payload = sender.data;\n    const url = \"/login\" + (window.location.search || \"\");\n\n    try {\n      const res = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\"\n        },\n        credentials: \"same-origin\",\n        body: JSON.stringify(payload)\n      });\n\n      if (res.ok) {\n        const qs = new URLSearchParams(window.location.search);\n        let next = qs.get(\"next\") || \"/\";\n        try {\n          const data = await res.clone().json();\n          if (data && data.next) next = data.next;\n        } catch(_) {}\n        if (res.redirected && res.url) window.location.assign(res.url);\n        else window.location.assign(next);\n        return;\n      }\n\n      // Hata: JSON’u dene\n      let message = \"Kullanıcı adı/e-posta veya şifre hatalı.\";\n      let fieldErrors = null;\n      try {\n        const err = await res.clone().json();\n        if (err?.message) message = err.message;\n        if (err?.errors && typeof err.errors === \"object\") fieldErrors = err.errors;\n      } catch(_) {}\n\n      // --- ŞİFREYİ TEMİZLE + ODAKLA + ALTA HATA VER ---\n      const pwdQ = sender.getQuestionByName(\"password\");\n      if (pwdQ) {\n        // değeri sıfırla\n        if (\"value\" in pwdQ) pwdQ.value = \"\";\n        else sender.setValue(\"password\", \"\");\n        // alan altına hata yaz\n        if (typeof pwdQ.addError === \"function\") {\n          // backend özel bir password hatası göndermediyse varsayılan mesaj\n          const pwdMsg = (fieldErrors && fieldErrors.password) ? String(fieldErrors.password) : \"Hatalı şifre girdiniz.\";\n          pwdQ.addError(new Survey.CustomError(pwdMsg));\n        }\n        // imleci tekrar şifreye getir\n        setTimeout(() => { if (typeof pwdQ.focus === \"function\") pwdQ.focus(); }, 0);\n      }\n      // -------------------------------------------------\n\n      // Varsa diğer alan hataları\n      if (fieldErrors) {\n        Object.entries(fieldErrors).forEach(([name, text]) => {\n          if (name === \"password\") return; // yukarıda ele aldık\n          const q = sender.getQuestionByName(name);\n          if (q && typeof q.addError === \"function\") q.addError(new Survey.CustomError(String(text)));\n        });\n      }\n\n      // Genel üst hata (istersen bunu silebilirsin)\n      sender.errors = [{ text: message }];\n\n    } catch (e) {\n      sender.errors = [{ text: \"Sunucuya ulaşılamadı. Lütfen tekrar deneyin.\" }];\n      console.error(e);\n    } finally {\n      submitting = false;\n      sender.isReadOnly = false;\n    }\n  });\n\n  $(function () { $(\"#surveyContainer\").Survey({ model: survey }); });\n</script>\n</body>\n</html>\n",
        "output": "str",
        "x": 440,
        "y": 1640,
        "wires": [
            [
                "0f88d4f9899d9885"
            ]
        ]
    },
    {
        "id": "0f88d4f9899d9885",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 1640,
        "wires": []
    },
    {
        "id": "4ec111ca15940ef0",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/logout",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1880,
        "wires": [
            [
                "898343caa6e3f92c"
            ]
        ]
    },
    {
        "id": "78a062b04551d6e3",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/login"
        },
        "x": 760,
        "y": 1880,
        "wires": []
    },
    {
        "id": "0f7d31954dc9a188",
        "type": "jwt sign",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "alg": "HS256",
        "exp": "604800000",
        "jwkurl": "",
        "jwkkid": "",
        "secret": "147852369",
        "key": "",
        "signvar": "payload",
        "storetoken": "payload",
        "x": 1180,
        "y": 1720,
        "wires": [
            [
                "f59872569465a1b9"
            ]
        ]
    },
    {
        "id": "ad4d0de03b852821",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/login",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1740,
        "wires": [
            [
                "bcf4da036ac5b43b"
            ]
        ]
    },
    {
        "id": "e8c57f2b754850cc",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "passControl",
        "func": "if (!msg.match) {\n    msg.payload = { success: false, message: \"Kullanıcı adı/e-posta veya şifre hatalı\" };\n    msg.statusCode = 400; // HTTP 400 Bad Request\n    return [null, msg];   // Hata çıkışı\n}\n\n// Kullanıcı bilgilerini JWT payload için hazırla\nmsg.payload = {\n    username: msg.user.username,\n    email: msg.user.email,\n    displayName: msg.user.displayName,\n    roles: msg.user.roles,\n    ip: msg.req.ip\n};\n\n// Sonrasında JWT Sign node token'ı üretecek ve msg.token içine yazacak.\n// Biz de redirect adresini şimdiden hazırlıyoruz.\nconst next = msg.req && msg.req.query && msg.req.query.next;\nmsg.nextUrl = next && /^\\/.*/.test(next) ? next : \"/\";\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1720,
        "wires": [
            [
                "0f7d31954dc9a188"
            ],
            [
                "2b2157abba6313fe"
            ]
        ]
    },
    {
        "id": "bcf4da036ac5b43b",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "findUser",
        "func": "const p = msg.payload || {};\nconst identifier = (p.identifier || p.username || p.email || '').toString().trim();\nconst password   = (p.password || '').toString();\n\nmsg.formData = { identifier, password };\n\nif (!identifier || !password) {\n  msg.payload = { _id: \"__never__\" };\n  return msg;\n}\n\nmsg.payload = {\n  $and: [\n    { active: true },\n    { $or: [ { username: identifier }, { email: identifier } ] }\n  ]\n};\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 340,
        "y": 1740,
        "wires": [
            [
                "a1e33ed13fcde42a"
            ]
        ]
    },
    {
        "id": "ed58fab8df11b349",
        "type": "bcrypt",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "action": "verify",
        "field": "formData.password",
        "hash": "user.password",
        "target": "payload",
        "assignment": "replace",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 840,
        "y": 1720,
        "wires": [
            [
                "e8c57f2b754850cc"
            ]
        ]
    },
    {
        "id": "86740e96f67da72b",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 1520,
        "y": 1720,
        "wires": []
    },
    {
        "id": "6d8042d6f0a12ac0",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 270,
        "y": 220,
        "wires": [
            [
                "9e7745c31875caa6"
            ]
        ]
    },
    {
        "id": "472f3a2d0f361a1d",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/register",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1980,
        "wires": [
            [
                "8637acb46830d49a"
            ]
        ]
    },
    {
        "id": "84be4beb553cbe26",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 1980,
        "wires": []
    },
    {
        "id": "8637acb46830d49a",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Kayıt Ol</title>\n\n  <!-- Bootstrap -->\n  <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\" />\n  <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" />\n\n  <!-- SurveyJS (jQuery) -->\n  <script src=\"https://unpkg.com/jquery\"></script>\n  <script src=\"https://unpkg.com/survey-jquery/survey.jquery.min.js\"></script>\n  <link href=\"https://unpkg.com/survey-jquery/modern.min.css\" rel=\"stylesheet\" />\n</head>\n<body>\n  <div class=\"container mt-5\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-6 col-lg-5\">\n        <div class=\"card shadow-sm\">\n          <div class=\"card-body\">\n            <h5 class=\"mb-3\">Kayıt Ol</h5>\n\n            {{#error}} <div class=\"alert alert-danger\">{{message}}</div> {{/error}}\n\n            <div id=\"surveyContainer\"></div>\n\n            <div class=\"text-center mt-3\">\n              Zaten hesabın var mı? <a href=\"/login\">Giriş yap</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<script>\n  Survey.StylesManager.applyTheme(\"modern\");\n\n  const surveyJson = {\n    title: \"Kayıt Ol\",\n    showTitle: false,\n    showCompletedPage: false,\n    showQuestionNumbers: \"off\",\n    completeText: \"Kayıt Ol\",\n    widthMode: \"responsive\",\n    elements: [\n      {\n        type: \"text\",\n        name: \"username\",\n        title: \"Kullanıcı adı\",\n        isRequired: true,\n        minLength: 3,\n        placeholder: \"Kullanıcı adın\"\n      },\n      {\n        type: \"text\",\n        name: \"displayName\", \n        title: \"Ad Soyad \",\n        isRequired: true,\n        placeholder: \"Adınız Soyadınız\",\n        validators: [\n          { type: \"regex\", regex: \"^(?=.*\\\\S).{2,}$\", text: \"Lütfen ad soyad girin.\" }\n        ]\n      },\n      {\n        type: \"text\",\n        name: \"email\",\n        title: \"E-posta\",\n        inputType: \"email\",\n        isRequired: true,\n        placeholder: \"mail@ornek.com\",\n        validators: [{ type: \"email\" }]\n      },\n      {\n        type: \"text\",\n        name: \"password\",\n        title: \"Şifre\",\n        inputType: \"password\",\n        isRequired: true,\n        minLength: 8,\n        placeholder: \"En az 8 karakter giriniz!\"\n      },\n      {\n        type: \"text\",\n        name: \"password2\",\n        title: \"Şifre (tekrar)\",\n        inputType: \"password\",\n        isRequired: true,\n        validators: [\n          {\n            type: \"expression\",\n            text: \"Şifreler eşleşmiyor.\",\n            expression: \"{password} = {password2}\"\n          }\n        ]\n      }\n    ]\n  };\n\n  const survey = new Survey.Model(surveyJson);\n\n  // (isteğe bağlı) client validasyon logu\n  survey.onValidateQuestion.add(function(_, opt){\n    if (opt.error) console.log(\"[VALIDATION]\", opt.question?.name, opt.error);\n  });\n\n  let submitting = false;\n\n  // onCompleting: form gizlenmesin, submit burada\n  survey.onCompleting.add(async function (sender, options) {\n    options.allowComplete = false;\n    if (submitting) return;\n    submitting = true;\n\n    // Eski hataları temizle\n    sender.errors = [];\n    const allQs = typeof sender.getAllQuestions === \"function\" ? sender.getAllQuestions() : [];\n    allQs.forEach(q => { if (q && typeof q.clearErrors === \"function\") q.clearErrors(); });\n\n    // UI kilitle\n    sender.isReadOnly = true;\n\n    // --- GÖNDERİM ÖNCESİ TEMİZLİK ---\n    const payload = { ...sender.data };\n    // trim\n    [\"username\",\"displayName\",\"email\"].forEach(k => {\n      if (payload[k] != null) payload[k] = String(payload[k]).trim();\n    });\n    // password2’yi backend’e göndermeyelim\n    delete payload.password2;\n    // --------------------------------\n\n    const url = \"/user-opt/add\";\n\n    try {\n      const res = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\"\n        },\n        credentials: \"same-origin\",\n        body: JSON.stringify(payload)\n      });\n\n      if (res.ok) {\n        let next = \"/login\";\n        try {\n          const data = await res.clone().json();\n          if (data && data.next) next = data.next;\n        } catch(_) {}\n        window.location.assign(next);\n        return;\n      }\n\n      // Hata: JSON parse etmeyi dene\n      let message = \"Kayıt oluşturulamadı.\";\n      let fieldErrors = null;\n      try {\n        const err = await res.clone().json();\n        if (err?.message) message = err.message;\n        if (err?.errors && typeof err.errors === \"object\") fieldErrors = err.errors;\n      } catch(_) {}\n\n      // Özel: 409/400 ve alan bilgisi yoksa varsayılan mesajları üret\n      if ((res.status === 409 || res.status === 400) && !fieldErrors) {\n        fieldErrors = {};\n        // backend hangi alanın çakıştığını söylemiyorsa ikisini de uyar\n        fieldErrors.username = fieldErrors.username || \"Bu kullanıcı adı alınmış.\";\n        fieldErrors.email    = fieldErrors.email    || \"Bu e-posta kullanılmaktadır.\";\n      }\n\n      // Alan altı hataları sırayla bas ve ilk hatalı alana odaklan\n      const order = [\"username\",\"displayName\",\"email\",\"password\",\"password2\"];\n      let focused = false;\n\n      // Önce order’a göre geç\n      order.forEach(name => {\n        const text = fieldErrors?.[name];\n        if (text) {\n          const q = sender.getQuestionByName(name);\n          if (q && typeof q.addError === \"function\") {\n            q.addError(new Survey.CustomError(String(text)));\n            if (!focused && typeof q.focus === \"function\") {\n              focused = true; setTimeout(() => q.focus(), 0);\n            }\n          }\n        }\n      });\n\n      // Order dışı kalan olursa yine göster\n      if (fieldErrors) {\n        Object.entries(fieldErrors).forEach(([name, text]) => {\n          if (order.includes(name)) return;\n          const q = sender.getQuestionByName(name);\n          if (q && typeof q.addError === \"function\") q.addError(new Survey.CustomError(String(text)));\n        });\n      }\n\n      // Genel üst hata\n      sender.errors = [{ text: message }];\n\n    } catch (e) {\n      console.error(\"[NETWORK ERROR]\", e);\n      sender.errors = [{ text: \"Sunucuya ulaşılamadı. Lütfen tekrar deneyin.\" }];\n    } finally {\n      submitting = false;\n      sender.isReadOnly = false;\n    }\n  });\n\n  // Render\n  $(function () { $(\"#surveyContainer\").Survey({ model: survey }); });\n</script>\n</body>\n</html>\n",
        "output": "str",
        "x": 460,
        "y": 1980,
        "wires": [
            [
                "84be4beb553cbe26"
            ]
        ]
    },
    {
        "id": "898343caa6e3f92c",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 4",
        "func": "msg.cookies = {\n    token: null\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1880,
        "wires": [
            [
                "78a062b04551d6e3"
            ]
        ]
    },
    {
        "id": "5a5879c9b2e4a128",
        "type": "switch",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "property": "redirect",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/register",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 2020,
        "wires": [
            [
                "8637acb46830d49a"
            ],
            [
                "14819198696d743b"
            ]
        ]
    },
    {
        "id": "8a6d783f9fac6a74",
        "type": "link in",
        "z": "651af9bb9a46e4b0",
        "name": "link in 5",
        "links": [
            "7817b550669eb8a2"
        ],
        "x": 215,
        "y": 2020,
        "wires": [
            [
                "5a5879c9b2e4a128"
            ]
        ]
    },
    {
        "id": "14819198696d743b",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "126ead5b72b171f3"
        ],
        "x": 405,
        "y": 2060,
        "wires": []
    },
    {
        "id": "4a66cc4d80aa2897",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 310,
        "y": 320,
        "wires": [
            [
                "414d44229aa0ed03"
            ]
        ]
    },
    {
        "id": "2cbcf6d6ae4cab8b",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 330,
        "y": 440,
        "wires": [
            [
                "b8be420b120246f5"
            ]
        ]
    },
    {
        "id": "608bec346261cb04",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 330,
        "y": 940,
        "wires": [
            [
                "afee2af02b51714d"
            ]
        ]
    },
    {
        "id": "f55ef5f0d076fe2f",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 330,
        "y": 580,
        "wires": [
            [
                "c8e03f51ac6bfb33"
            ]
        ]
    },
    {
        "id": "8a33b0e666b5995f",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 350,
        "y": 1100,
        "wires": [
            [
                "acc7c1f55f0a682a"
            ]
        ]
    },
    {
        "id": "333ba1b4a05495f7",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 330,
        "y": 1300,
        "wires": [
            [
                "a6a7474d00f800aa"
            ]
        ]
    },
    {
        "id": "afee2af02b51714d",
        "type": "subflow:8775dfdfd56f79c1",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 500,
        "y": 940,
        "wires": [
            [
                "4801fcc29ebde45c"
            ]
        ]
    },
    {
        "id": "f59872569465a1b9",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 2",
        "func": "// JWT Sign node'u token'ı msg.payload'a yazıyor (storetoken=payload)\nconst token = String(msg.payload || \"\");\nif (!token) {\n  msg.statusCode = 302;\n  msg.headers = { location: \"/login\" };\n  msg.payload = \"\";\n  return msg;\n}\n\n// İstersen msg.cookies de kullanabilirsin, ama Set-Cookie header'ı kesin çalışır:\nmsg.headers = msg.headers || {};\nmsg.headers[\"Set-Cookie\"] = `token=${token}; HttpOnly; Path=/; SameSite=Lax; Max-Age=604800`;\n\n// /login?next=... desteği:\nconst q = (msg.req && msg.req.query) || {};\nconst next = (q.next && /^\\/.*/.test(q.next)) ? q.next : \"/\";\nmsg.headers.location = next;\n\nmsg.statusCode = 302;\nmsg.payload = \"\"; // 302 body boş\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1720,
        "wires": [
            [
                "86740e96f67da72b"
            ]
        ]
    },
    {
        "id": "a6a7474d00f800aa",
        "type": "subflow:8775dfdfd56f79c1",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 520,
        "y": 1300,
        "wires": [
            [
                "7c83cb4a19389f12"
            ]
        ]
    },
    {
        "id": "acc7c1f55f0a682a",
        "type": "subflow:8775dfdfd56f79c1",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 530,
        "y": 1100,
        "wires": [
            [
                "7083b2826db710fa"
            ]
        ]
    },
    {
        "id": "f3de723a0ab4e6a9",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 6",
        "func": "// Redirect after user-opt\nmsg.statusCode = 302;\nmsg.headers = { Location: msg.redirect || \"/user-list\" };\nmsg.payload = \"\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 1100,
        "wires": [
            [
                "b5c78ee5996d045c"
            ]
        ]
    },
    {
        "id": "b5c78ee5996d045c",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1770,
        "y": 1100,
        "wires": []
    },
    {
        "id": "da2c3ef5dc432c29",
        "type": "inject",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "a812e4a7bdb7b2cc"
            ]
        ]
    },
    {
        "id": "f285f794ec157009",
        "type": "debug",
        "z": "651af9bb9a46e4b0",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "b50b71bef2ac91e5",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 760,
        "y": 60,
        "wires": [
            [
                "f285f794ec157009"
            ]
        ]
    },
    {
        "id": "a15711b91a686a0d",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 440,
        "y": 60,
        "wires": [
            [
                "42e20be815dfa074"
            ]
        ]
    },
    {
        "id": "a812e4a7bdb7b2cc",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 7",
        "func": "msg.payload = {\n    username: \"admin\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 60,
        "wires": [
            [
                "a15711b91a686a0d"
            ]
        ]
    },
    {
        "id": "42e20be815dfa074",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 8",
        "func": "if (msg.payload) return null;  \n\nconst now = Date.now();\nmsg.payload = {\n  _id: 1000,\n  username: \"admin\",\n  password: \"$2a$10$xoiaDc.NvIeTq7eH0XoP5.47mNiKswxqXcXOSmkDTUEQ4MVhfqXOu\", \n  displayName: \"Sistem Yöneticisi\",\n  email: \"admin@site.local\",\n  roles: [\"admin\"],\n  active: true,\n  createdAt: now,\n  stamp: { createdAt: now, ip: \"127.0.0.1\", username: \"admin\", email: \"admin@site.local\" },\n  dateTime: new Date(now).toLocaleString(\"tr-TR\", { hour12: false })\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 60,
        "wires": [
            [
                "b50b71bef2ac91e5"
            ]
        ]
    },
    {
        "id": "7b383705f4aaec1f",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "aggregate",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": true,
        "name": "",
        "x": 620,
        "y": 220,
        "wires": [
            [
                "2ae9555726c58d4a"
            ]
        ]
    },
    {
        "id": "4ebc1649e8305f46",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 700,
        "y": 320,
        "wires": [
            [
                "a1e1269d2a6b4d4c"
            ]
        ]
    },
    {
        "id": "a1e1269d2a6b4d4c",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 9",
        "func": "if (!msg.payload) {\n    msg.error = {\n        message: \"id ile eşleşen bir kayıt bulunamadı\"\n    }\n    return [null, msg]\n}\nif (msg.payload.done) {\n    msg.error = {\n        message: \"Tamamlanmış işler güncellenemez\"\n    }\n    return [null, msg]\n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 320,
        "wires": [
            [
                "b38fb814b875aebb"
            ],
            [
                "2713f0cacf4e39f6"
            ]
        ]
    },
    {
        "id": "8af76568d2754a77",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 720,
        "y": 440,
        "wires": [
            [
                "b3bffd50b8d5c4d7"
            ]
        ]
    },
    {
        "id": "b3bffd50b8d5c4d7",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 10",
        "func": "if (!msg.payload) {\n  msg.error = { message: \"id ile eşleşen bir kayıt bulunamadı\" };\n  return [null, msg];\n}\n\nif (msg.payload.done) {\n  msg.error = { message: \"Tamamlanmış işler için hatırlatıcı kurulamaz\" };\n  return [null, msg];\n}\n\nfunction fmtLocal(dt) {\n  const p = n => String(n).padStart(2, '0');\n  return `${dt.getFullYear()}-${p(dt.getMonth() + 1)}-${p(dt.getDate())}T${p(dt.getHours())}:${p(dt.getMinutes())}`;\n}\n\nconst now = new Date();\nconst uiNow = fmtLocal(now);\nconst uiDt = msg.payload.schedule?.formData?.datetime || uiNow;\nconst uiNote = msg.payload.schedule?.formData?.note || \"\";\n\nmsg.payload = {\n  id: msg.payload.id,\n  name: msg.payload.name,\n  schedule: {\n    datetime: uiDt,  // burada formdan gelen tarih olacak\n    min: uiNow,\n    note: uiNote\n  }\n};\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 440,
        "wires": [
            [
                "a35e8f26138c2a60"
            ],
            [
                "22dd74058ceaa141"
            ]
        ]
    },
    {
        "id": "813b033439558352",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 11",
        "func": "// function 11 — /opt/:type (trash | complete | open | update | schedule)\n//\n// Bu sürümde \"schedule\" işleminde NOT metni schedule.formData içine\n// kaydedilmez; sadece zamanı tutulur. Not metni DB'de \"lastNote\" alanına\n// (opsiyonel) yazılır. Böylece listede \"not\" alanı boş görünür.\n\nconst type = msg.req?.params?.type || \"\";\nconst user = msg.user || { username: \"\", roles: [] };\n\n// findOne çıktısını normalize et\nconst doc = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload;\n\n// --- ID normalizasyonu\nconst rawFromForm = (msg.formData?.id ?? \"\").toString();\nconst rawFromDoc  = (doc?.id ?? \"\").toString();\nconst rawId = rawFromForm || rawFromDoc;\nconst asNum = Number(rawId);\nconst id = Number.isNaN(asNum) ? rawId : asNum;\n\nif (!doc) {\n  msg.error = { message: \"id ile eşleşen bir kayıt bulunamadı\" };\n  return [null, msg, null];  // [mongo, error, cron]\n}\n\n// --- Basit yetki kontrolü\nconst isAdmin = Array.isArray(user.roles) && user.roles.includes(\"admin\");\nif (doc?.stamp?.username && user?.username && doc.stamp.username !== user.username && !isAdmin) {\n  msg.error = { message: \"Yetkisiz işlem.\" };\n  return [null, msg, null];\n}\n\n// === İşlemler ===\nif (type === \"trash\") {\n  msg.operation = \"deleteOne\";\n  msg.payload   = [{ id }];\n  return [msg, null, null];\n}\n\nif (type === \"complete\") {\n  msg.operation = \"updateOne\";\n  msg.payload   = [{ id }, { $set: { done: true } }];\n  return [msg, null, null];\n}\n\nif (type === \"open\") {\n  msg.operation = \"updateOne\";\n  msg.payload   = [{ id }, { $set: { done: false } }];\n  return [msg, null, null];\n}\n\nif (type === \"update\") {\n  const newName = (msg.formData?.name || \"\").trim();\n  const origVal = (msg.formData?.orig || \"\").trim();\n  if (!newName) {\n    msg.error = { message: \"Görev adı boş olamaz.\" };\n    return [null, msg, null];\n  }\n  if (newName === origVal) {\n    msg.error = { message: \"Herhangi bir değişiklik yapmadınız.\" };\n    return [null, msg, null];\n  }\n  msg.operation = \"updateOne\";\n  msg.payload   = [{ id }, { $set: { name: newName } }];\n  return [msg, null, null];\n}\n\nif (type === \"schedule\") {\n  // ——— PLANLAMA ———\n  const whenRaw  = (msg.formData?.datetime || \"\").trim();   // \"YYYY-MM-DDTHH:mm[:ss]\"\n  const noteText = (msg.formData?.note || \"\").trim();       // EKRANDAKİ NOT (DB'de schedule'a yazmayacağız)\n\n  if (!whenRaw) {\n    msg.error = { message: \"Tarih/saat seçiniz.\" };\n    return [null, msg, null];\n  }\n\n  // saniye ekle (datetime-local saniyesiz gelir)\n  const whenIso = whenRaw.length === 16 ? (whenRaw + \":00\") : whenRaw;\n  const dt = new Date(whenIso);\n\n  if (isNaN(dt.getTime())) {\n    msg.error = { message: \"Geçersiz tarih/saat.\" };\n    return [null, msg, null];\n  }\n\n  // crontinject için doğru seçenek: Date nesnesi\n  const scheduleOptions = {\n    crontiMethod: \"onDate\",\n    crontiArgs: [dt]         // <— ÖNEMLİ: string değil, Date/epoch\n  };\n\n  // —— DB'ye yazılacak güncelleme ——\n  // NOT: schedule.formData içine NOTE KOYMUYORUZ; sadece datetime kalıyor.\n  const mongoMsg = {\n    ...msg,\n    operation: \"updateOne\",\n    payload: [\n      { id },\n      { $set: {\n          schedule: {\n            formData: { \n              datetime: msg.formData.datetime,\n              note: msg.formData.note\n              },\n            fireAt: dt.toISOString(),\n            epoch: dt.getTime()\n          },\n          // Notu ayrı bir alana istersen yaz (görsel temizlik için liste note'u boş kalsın)\n          lastNote: noteText\n        }\n      }\n    ]\n  };\n\n  // — akış hafızasına kısa bir kopya (tetik anında erişim için)\n  const shallowTodo = {\n    ...doc,\n    schedule: {\n      formData: { \n        datetime: msg.formData.datetime,\n        note: msg.formData.note\n        },\n      fireAt: dt.toISOString(),\n      epoch: dt.getTime()\n    },\n    lastNote: noteText\n  };\n  flow.set(`todo:${id}`, shallowTodo);\n\n  // — crontinject’e gidecek mesaj\n  const cronMsg = {\n    topic: `todo:${id}`,\n    payload: scheduleOptions,\n    todo: shallowTodo\n  };\n\n  // 3 çıkış: [mongo, error, cron]\n  return [mongoMsg, null, cronMsg];\n}\n\n// Bilinmeyen işlem\nmsg.error = { message: `Bilinmeyen işlem türü: ${type}` };\nreturn [null, msg, null];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 600,
        "wires": [
            [
                "9736330931d8ab79"
            ],
            [
                "8646b06022669592"
            ],
            [
                "7148ede4c5df0a6c"
            ]
        ]
    },
    {
        "id": "93d181d58a920cd0",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 840,
        "y": 540,
        "wires": [
            [
                "af5fc661d33623d3"
            ]
        ]
    },
    {
        "id": "af5fc661d33623d3",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 1000,
        "y": 540,
        "wires": []
    },
    {
        "id": "57fe0dbd56855d23",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 840,
        "y": 600,
        "wires": [
            [
                "813b033439558352"
            ]
        ]
    },
    {
        "id": "e82dbbf530f551b8",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "deleteOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1330,
        "y": 500,
        "wires": [
            [
                "91308c72ec45a46b"
            ]
        ]
    },
    {
        "id": "7148ede4c5df0a6c",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "18dc3105a4edec0c"
        ],
        "x": 1135,
        "y": 660,
        "wires": []
    },
    {
        "id": "193b96b36f8bb8a4",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "find",
        "output": "forEach",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 450,
        "y": 120,
        "wires": [
            [
                "c993661ed2271d85"
            ]
        ]
    },
    {
        "id": "4957ed9e50014e41",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 12",
        "func": "/*\nmsg.payload = {\n    schedule: {\n        $exists: 1\n    }\n}\nreturn msg;\n*/\nvar user = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload;\n\nif (!user) {\n    msg.error = { message: \"Kullanıcı adı/e-posta veya şifre hatalı\" };\n    return [null, msg];\n}\nmsg.user = user;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 120,
        "wires": [
            [
                "193b96b36f8bb8a4"
            ]
        ]
    },
    {
        "id": "c993661ed2271d85",
        "type": "change",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.schedule.options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 120,
        "wires": [
            [
                "dcacbd7ada1430a0"
            ]
        ]
    },
    {
        "id": "7ca247c16df46b79",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1190,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "f99da836ba8f456d",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 830,
        "y": 940,
        "wires": [
            [
                "83aeb4a66b06d227"
            ]
        ]
    },
    {
        "id": "0d8a639157364107",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1460,
        "y": 1100,
        "wires": [
            [
                "f3de723a0ab4e6a9"
            ]
        ]
    },
    {
        "id": "0c8fb0b08f44164f",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1460,
        "y": 1180,
        "wires": [
            [
                "30ba0301a2a907e7"
            ]
        ]
    },
    {
        "id": "30ba0301a2a907e7",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 13",
        "func": "// function 13 — activate/deactivate + update + başarılı işlemde redirect\nconst type  = msg.req?.params?.type ?? \"\";\nconst found = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload;\n\nif (!found) {\n  msg.error = { message: `İşlem için kullanıcı bulunamadı (ID: ${msg.formData?.id})` };\n  msg.redirect = \"/user-list\";\n  return [null, msg]; // [success, error]\n}\n\n// form verisini normalize et\nconst f = msg.formData || {};\nconst changes = {};\n\n// ---- UPDATE (profil düzenleme)\nif (type === \"update\") {\n  const changes = {};\n\n  // Görünen ad\n  const dn = (f.displayName || \"\").trim();\n  if (dn && dn !== found.displayName) changes.displayName = dn;\n\n  // ROL: ya admin ya user (tek değer)\n  if (\"isAdmin_present\" in f) {\n    const wantAdmin = String(f.isAdmin) === \"true\";\n    changes.roles = wantAdmin ? [\"admin\"] : [\"user\"]; // <<< tek rol\n  }\n\n  // Aktif/Pasif\n  if (typeof f.active !== \"undefined\") {\n    const wantActive = String(f.active) === \"true\";\n    const current = found.active ?? true;\n    if (wantActive !== current) changes.active = wantActive;\n  }\n\n  // Şifre (hash’lenmiş)\n  if (f.password && String(f.password).trim().length) {\n    changes.password = f.password;\n  }\n\n  if (!Object.keys(changes).length) {\n    msg.error = { message: \"Herhangi bir değişiklik yapmadınız.\" };\n    msg.redirect = `/user-edit/${found._id}`;\n    return [null, msg];\n  }\n\n  msg.payload = [{ _id: found._id }, { $set: changes }];\n  msg.statusCode = 302;\n  msg.headers = { Location: \"/user-list\" };\n  return [msg, null];\n}\n\n// ---- ACTIVATE / DEACTIVATE\nif (type === \"activate\" || type === \"deactivate\") {\n  changes.active = (type === \"activate\");\n\n  msg.payload = [{ _id: found._id }, { $set: changes }];\n\n  msg.statusCode = 302;\n  msg.headers = { Location: \"/user-list\" };\n\n  return [msg, null];\n}\n\n// ---- Bilinmeyen işlem\nmsg.error = { message: `Bilinmeyen işlem türü: ${type}` };\nmsg.redirect = \"/user-list\";\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1180,
        "wires": [
            [
                "b6a0401ccb7c0187"
            ],
            [
                "68b150d9072e014b"
            ]
        ]
    },
    {
        "id": "b6a0401ccb7c0187",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1810,
        "y": 1160,
        "wires": [
            [
                "388bd9ef3519ee93"
            ]
        ]
    },
    {
        "id": "388bd9ef3519ee93",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1970,
        "y": 1160,
        "wires": []
    },
    {
        "id": "049f6c44dff76dd4",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 920,
        "y": 1300,
        "wires": [
            [
                "d8c7a9da715ff676"
            ]
        ]
    },
    {
        "id": "d8c7a9da715ff676",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 14",
        "func": "const doc = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload;\n\nif (!doc) { msg.error = { message: \"Kayıt bulunamadı.\" }; return msg; }\n\n// id ve durum türevleri\ndoc.id       = String(doc._id);\ndoc.isActive = doc.active ?? true;\n\n// roller normalizasyonu (sizde zaten var)\nconst roles = Array.isArray(doc.roles) ? doc.roles : (doc.role ? [doc.role] : []);\nconst norm  = roles.map(s => String(s).toLowerCase().trim());\ndoc.roles   = norm.length ? Array.from(new Set(norm)) : [\"user\"];\ndoc.isAdmin = doc.roles.includes(\"admin\");\n\nmsg.payload = doc;\nmsg.year = new Date().getFullYear(); // alt yazı için (şablonda {{year}} var)\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1300,
        "wires": [
            [
                "1251f822538e5dd8"
            ],
            [
                "18d52f7ab428eef7"
            ]
        ]
    },
    {
        "id": "a1e33ed13fcde42a",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 500,
        "y": 1740,
        "wires": [
            [
                "23c69382a41e73a9"
            ]
        ]
    },
    {
        "id": "23c69382a41e73a9",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 15",
        "func": "const fp = msg.formData || {};\nconst identifier = (fp.identifier || fp.username || fp.email || '').toString().trim().toLowerCase();\nconst password   = (fp.password || '').toString();\n\n\nconst user = msg.payload || null;\n\n\nif (!user) {\n  msg.payload = { success: false, message: \"Kullanıcı adı/e-posta veya şifre hatalı\" };\n  msg.statusCode = 400; // HTTP 400 Bad Request\n  return [null, msg]; // 2. çıkışa gönder\n}\n\nconst uName = String(user.username || '').toLowerCase();\nconst uMail = String(user.email || '').toLowerCase();\nif (identifier && identifier !== uName && identifier !== uMail) {\n  msg.payload = { success: false, message: \"Kullanıcı adı/e-posta veya şifre hatalı\" };\n  msg.statusCode = 400; // HTTP 400 Bad Request\n  return [null, msg];\n}\n\n\nmsg.user = user;                 \nmsg.payload = { password };      \nreturn [msg, null];              \n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1740,
        "wires": [
            [
                "ed58fab8df11b349"
            ],
            [
                "2b2157abba6313fe"
            ]
        ]
    },
    {
        "id": "83aeb4a66b06d227",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "processUserList",
        "func": "// processUserList — createdAt'a göre DESC sırala + \"Kod 1\" zenginleştirme\n\n// 0) payload'ı diziye normalize et\nlet arr = Array.isArray(msg.payload) ? msg.payload : (msg.payload ? [msg.payload] : []);\n\n// 1) Zamana göre (createdAt) azalan sırala\nconst getTs = (u) => {\n    const v = u?.createdAt;\n    if (typeof v === \"number\" && !isNaN(v)) return v;       // epoch ms / s (ms olduğunu varsayar)\n    const t = Date.parse(v);                                 // ISO string vs.\n    return isNaN(t) ? 0 : t;\n};\narr.sort((a, b) => getTs(b) - getTs(a));\n\n// 2) \"Kod 1\" (hiç dokunmadan) — her kullanıcı kaydını zenginleştir\nmsg.payload = arr.map(user => {\n    user.id = String(user._id);\n    user.isAdmin = Array.isArray(user?.roles) && user.roles.includes(\"admin\");\n    user.isActive = user?.active ?? true;\n    \n    let formattedCreatedAt = \"\";\n    if (user.createdAt) {\n        const date = new Date(user.createdAt);\n        formattedCreatedAt = date.toLocaleString(\"tr-TR\", {\n            day: \"2-digit\",\n            month: \"2-digit\",\n            year: \"numeric\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n            hour12: false,\n            timeZone: \"Europe/Istanbul\"\n        });\n    }\n    user.createdAtText = formattedCreatedAt;\n    \n    let displayIdValue = String(user.id || \"\");\n    if (displayIdValue.length > 10) {\n        user.display_short_created_at_id = displayIdValue.substring(0, 10) + \"...\";\n    } else {\n        user.display_short_created_at_id = displayIdValue;\n    }\n\n    return user;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 940,
        "wires": [
            [
                "90f7036bef489ba2"
            ]
        ]
    },
    {
        "id": "4e98ad516c31ad46",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1330,
        "y": 580,
        "wires": [
            [
                "91308c72ec45a46b"
            ]
        ]
    },
    {
        "id": "9736330931d8ab79",
        "type": "switch",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "property": "operation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "deleteOne",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "updateOne",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 540,
        "wires": [
            [
                "e82dbbf530f551b8"
            ],
            [
                "4e98ad516c31ad46"
            ]
        ]
    },
    {
        "id": "2b2157abba6313fe",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "Login Error Response",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1000,
        "y": 1780,
        "wires": []
    },
    {
        "id": "d9c5fb2fbf3b0189",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "UniqueCheck",
        "func": "// Sadece /user-opt/add için kontrol yap\nconst p = msg.payload || {};\nif ((p.type || '') !== 'add') { return [null, msg]; }\n\n// Orijinal form verisini sakla (az sonra geri koyacağız)\nmsg.register = { ...p };\n\n// Case-insensitive arama için $expr + toLower\nconst uname = String(p.username || '').trim().toLowerCase();\nconst email = String(p.email || '').trim().toLowerCase();\n\nmsg.payload = {\n    $expr: {\n        $or: [\n            { $eq: [{ $toLower: \"$username\" }, uname] },\n            { $eq: [{ $toLower: \"$email\" }, email] }\n        ]\n    }\n};\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1080,
        "wires": [
            [
                "e8416d08fd2d145b"
            ],
            [
                "fc9042b8d1523bc0"
            ]
        ]
    },
    {
        "id": "e8416d08fd2d145b",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1060,
        "y": 1040,
        "wires": [
            [
                "a2f9234ca65d363f"
            ]
        ]
    },
    {
        "id": "a2f9234ca65d363f",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 16",
        "func": "// bulunan dokümanı al (mongodb4 findOne bazen tek obje, bazen array dönebiliyor)\nconst found = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload;\n\nif (!found) {\n  // Çakışma yok → orijinal payload'ı geri koy ve devam\n  msg.payload = msg.register || msg.payload;\n  return [msg, null];\n}\n\n// Hangi alan(lar) çakışmış?\nconst reqU = (msg.register?.username || '').toLowerCase();\nconst reqE = (msg.register?.email || '').toLowerCase();\n\nconst errors = {};\nif (String(found.username || '').toLowerCase() === reqU) {\n  errors.username = \"Bu kullanıcı adı alınmış.\";\n}\nif (String(found.email || '').toLowerCase() === reqE) {\n  errors.email = \"Bu e-posta kullanılmaktadır.\";\n}\n// emin olmak için, hiçbir key eşleşmezse ikisini de set et\nif (!Object.keys(errors).length) {\n  errors.username = \"Bu kullanıcı adı alınmış.\";\n  errors.email = \"Bu e-posta kullanılmaktadır.\";\n}\n\n// XHR ise JSON 409 dön, değilse /register’a redirect et\nconst isXHR = String(msg.req?.headers?.['x-requested-with'] || '').toLowerCase() === 'xmlhttprequest';\nif (isXHR) {\n  msg.statusCode = 409; // veya 400\n  msg.headers = { 'Content-Type': 'application/json' };\n  msg.payload = { message: \"Bu bilgilerle kayıt oluşturulamadı.\", errors };\n  return [null, msg];\n}\n\n// SSR/normal POST ise geri yönlendir\nmsg.statusCode = 302;\nmsg.headers = { Location: '/register' };\nmsg.payload = '';\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1040,
        "wires": [
            [
                "158f6cdbc523a790"
            ],
            [
                "4848370bce242d83"
            ]
        ]
    },
    {
        "id": "4848370bce242d83",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1430,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ea1d26fd84096912",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/user-opt/list",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1420,
        "wires": [
            [
                "2bdbfa0d8494761e"
            ]
        ]
    },
    {
        "id": "2907d6d03e02be62",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.user.findTwo()",
        "func": "msg.payload = {};                 // tüm kullanıcılar\nmsg.sort = { \"stamp.createdAt\": -1 };\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1420,
        "wires": [
            [
                "9b87694706ea779c"
            ]
        ],
        "outputLabels": [
            "Success"
        ]
    },
    {
        "id": "2bdbfa0d8494761e",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 330,
        "y": 1420,
        "wires": [
            [
                "4b2ebf20f31e61db"
            ]
        ]
    },
    {
        "id": "4b2ebf20f31e61db",
        "type": "subflow:8775dfdfd56f79c1",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 520,
        "y": 1420,
        "wires": [
            [
                "2907d6d03e02be62"
            ]
        ]
    },
    {
        "id": "9b87694706ea779c",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 910,
        "y": 1420,
        "wires": [
            [
                "6c06c270b9cd5eb6"
            ]
        ]
    },
    {
        "id": "6c06c270b9cd5eb6",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "map json",
        "func": "// map json  ( /user-opt/list )\nconst rows = (Array.isArray(msg.payload) ? msg.payload : []).map(u => {\n  const ts = (u.stamp && u.stamp.createdAt) || u.createdAt;\n  const createdAtText = ts ? new Date(ts).toLocaleString(\"tr-TR\", { hour12: false }) : \"\";\n  // rol tekilleme görüntü için (DB’de zaten tekil olacak ama yine de güvence):\n  const roles = Array.isArray(u.roles) ? u.roles : [];\n  const role  = roles.includes(\"admin\") ? [\"admin\"] : [\"user\"];\n\n  return {\n    id: String(u._id),\n    username: u.username,\n    displayName: u.displayName || \"\",\n    email: u.email || \"\",\n    roles: role,\n    active: (u.active !== false),\n    createdAtText\n  };\n});\nmsg.payload = rows; // veya { items: rows }\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1420,
        "wires": [
            [
                "9e2c5e43db39a222"
            ]
        ]
    },
    {
        "id": "9e2c5e43db39a222",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 1420,
        "wires": []
    }
]