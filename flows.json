[
    {
        "id": "651af9bb9a46e4b0",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9357c048778312fb",
        "type": "subflow",
        "name": "Check User",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 180,
                "wires": [
                    {
                        "id": "b45ed1d156b58f2b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 120,
                "wires": [
                    {
                        "id": "9e67bd51c83a538c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-address-book"
    },
    {
        "id": "8775dfdfd56f79c1",
        "type": "subflow",
        "name": "Has admin",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 180,
                "wires": [
                    {
                        "id": "2cf53f5e4e43c395"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 140,
                "wires": [
                    {
                        "id": "2cf53f5e4e43c395",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FFAAAA",
        "icon": "node-red/cog.svg"
    },
    {
        "id": "071adb762f609302",
        "type": "mongodb4-client",
        "name": "",
        "protocol": "mongodb",
        "hostname": "localhost",
        "port": "27017",
        "dbName": "todoDb",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "",
        "advanced": "{}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "c511762b02162f48",
        "type": "jwt verify",
        "z": "9357c048778312fb",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "147852369",
        "key": "",
        "signvar": "token",
        "storetoken": "token",
        "x": 670,
        "y": 180,
        "wires": [
            [
                "9e67bd51c83a538c"
            ]
        ]
    },
    {
        "id": "9e67bd51c83a538c",
        "type": "function",
        "z": "9357c048778312fb",
        "name": "function 1",
        "func": "// Bypass varsa (login/register veya /user-opt/add), direk geçir\nif (msg.auth && msg.auth.skip) {\n  if (msg.user === undefined) msg.user = null;\n  return msg;\n}\n\n// Normal yol: token doğrulandıktan sonra kullanıcıyı ekle\nif (!msg.token) { return null; }\nif (msg.token.ip && msg.req && msg.token.ip !== msg.req.ip) { return null; }\n\nmsg.user = msg.token;\nmsg.user.isAdmin = Array.isArray(msg.user?.roles) && msg.user.roles.includes(\"admin\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b45ed1d156b58f2b",
        "type": "function",
        "z": "9357c048778312fb",
        "name": "function 3",
        "func": "// OUT1: devam (verify-bypass'a gidecek)\n// OUT2: 302 /login (redirect)\n\nconst urlPath = (msg.req?.originalUrl || \"/\").split(\"?\")[0];\nconst method  = msg.req?.method || \"GET\";\nconst t = msg.req?.cookies?.token;\n\n// Herkese açık sayfalar\n// Herkese açık sayfalar\nconst isPublic =\n  /^\\/login\\b/.test(urlPath) ||\n  /^\\/register\\b/.test(urlPath) ||\n  /^\\/favicon\\.ico$/.test(urlPath) ||\n  /^\\/assets\\//.test(urlPath) ||\n  /^\\/css\\//.test(urlPath) ||      \n  /^\\/js\\//.test(urlPath)  ||      \n  /^\\/font(s)?\\//.test(urlPath) || \n  /^\\/img\\//.test(urlPath);        \n\n\n// Kayıt formu POST'u (register'dan)\nconst DB = global.get(\"DB\") || {};\nconst isFirstUser = !Array.isArray(DB.user) || DB.user.length === 0;\nconst fromRegister = (msg.req?.headers?.referer || \"\").includes(\"/register\");\nconst allowSignupPost = urlPath === \"/user-opt/add\" && method === \"POST\" && (isFirstUser || fromRegister);\n\nif (isPublic || allowSignupPost) {\n  // verify'ı atlayacağımızı işaretle\n  msg.auth = { skip: true };\n  return [msg, null];     // OUT1\n}\n\nif (!t) {\n  msg.statusCode = 302;\n  msg.headers = { Location: \"/login?next=\" + encodeURIComponent(msg.req?.originalUrl || \"/\") };\n  msg.payload = \"\";\n  return [null, msg];     // OUT2 → http (302)\n}\n\nmsg.token = t;\nreturn [msg, null];       // OUT1 → verify-bypass\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 180,
        "wires": [
            [
                "3ec52673b7ad49d0"
            ],
            [
                "0c24164cf1ebeb78"
            ]
        ]
    },
    {
        "id": "0c24164cf1ebeb78",
        "type": "http response",
        "z": "9357c048778312fb",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/login"
        },
        "x": 440,
        "y": 200,
        "wires": []
    },
    {
        "id": "3ec52673b7ad49d0",
        "type": "function",
        "z": "9357c048778312fb",
        "name": "verify-bypass",
        "func": "if (msg.auth && msg.auth.skip) {\n  msg.user = null;\n  return [msg, null];      // OUT1\n}\n// Bypass yoksa JWT verify'a gönder\nreturn [null, msg];        // OUT2\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 140,
        "wires": [
            [
                "9e67bd51c83a538c"
            ],
            [
                "c511762b02162f48"
            ]
        ]
    },
    {
        "id": "2cf53f5e4e43c395",
        "type": "function",
        "z": "8775dfdfd56f79c1",
        "name": "function 5",
        "func": "if (msg.auth && msg.auth.skip) return msg;\n\n\nif (msg.user && msg.user.roles && msg.user.roles.includes(\"admin\")) return msg;\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 180,
        "wires": [
            [],
            [
                "99ccd2c20e9fc2c3"
            ]
        ]
    },
    {
        "id": "99ccd2c20e9fc2c3",
        "type": "http response",
        "z": "8775dfdfd56f79c1",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 580,
        "y": 200,
        "wires": []
    },
    {
        "id": "2ae9555726c58d4a",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Yapılacaklar</title>\n\n  <!-- Bootstrap & Icons -->\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\" rel=\"stylesheet\">\n\n  <!-- SurveyJS (jQuery) -->\n  <script src=\"https://unpkg.com/jquery\"></script>\n  <script src=\"https://unpkg.com/survey-jquery/survey.jquery.min.js\"></script>\n  <link href=\"https://unpkg.com/survey-jquery/modern.min.css\" rel=\"stylesheet\" />\n\n  <style>\n    :root{\n      --todo-form-gap: 6px;\n      --todo-gap: 6px;\n      --todo-pad: 12px; \n      --todo-radius: 12px;\n      --todo-border: #e9ecef; \n      --todo-bg: #fff;\n      --done: #16a34a; \n      --pending: #0d6efd;\n    }\n    body{background:#f8f9fa}\n    .navbar{--bs-navbar-padding-y:.9rem}\n\n    .todos-toolbar{\n      display:flex; gap:12px; align-items:center;\n      margin-top:16px;\n      padding:10px 12px; background:#fff;\n      border:1px solid var(--todo-border);\n      border-radius:var(--todo-radius);\n    }\n    .toolbar-title{font-weight:700}\n    .toolbar-stats{margin-left:auto; display:flex; gap:8px}\n    .stat-pill{background:#f1f3f5; color:#495057; font-size:.85rem; padding:6px 10px; border-radius:999px}\n\n    .toolbar-block { margin-bottom: var(--todo-form-gap) !important; }\n\n    .todo-wrap{\n      margin:0 0 var(--todo-gap) 0 !important;\n      background:var(--todo-bg);\n      border:1px solid var(--todo-border); \n      border-radius:var(--todo-radius); \n      overflow:hidden;\n    }\n    #todoListHost .todo-wrap:last-child{ margin-bottom:0 !important; }\n\n    .todo-row{\n      display:grid; grid-template-columns:12px 1fr auto; gap:12px; align-items:center;\n      padding:var(--todo-pad); cursor:pointer;\n    }\n    .todo-accent{width:12px; height:100%; border-radius:4px; background:var(--pending)}\n    .todo-wrap.done .todo-accent{background:var(--done)}\n    .todo-title{font-weight:600; white-space:nowrap; overflow:hidden; text-overflow:ellipsis}\n    .todo-title.done{color:#6c757d; text-decoration:line-through}\n    .todo-badges{display:flex; gap:8px; flex-wrap:wrap}\n    .todo-badge{display:inline-flex; align-items:center; gap:6px; background:#f1f3f5; color:#495057; padding:4px 8px; border-radius:999px; font-size:.8rem}\n    .todo-actions{display:none; padding:10px 12px; border-top:1px dashed #e5e7eb; background:#fff}\n    .todo-wrap.open .todo-actions{display:block}\n\n    .inline-add .sv-row{display:flex; align-items:center; gap:12px}\n    .inline-add .sv-row>div:has(> .sv-question[data-name=\"newName\"]){flex:1 1 auto !important; min-width:0 !important}\n    .inline-add .sv-row>div:has(> .sv-question[data-name=\"addButtons\"]){flex:0 0 auto !important}\n    .inline-add .sv-question[data-name=\"newName\"], \n    .inline-add .sv-question[data-name=\"addButtons\"]{margin:0 !important; padding:0 !important}\n    @media (max-width:576px){ .inline-add .sv-row{flex-direction:column; align-items:stretch} }\n\n    .user-fab{\n      position: fixed; right: 18px; bottom: 18px; z-index: 1000;\n      display: flex; align-items: center; gap: 10px;\n      background: #fff; border-radius: 999px; padding: 8px 12px;\n      box-shadow: 0 6px 16px rgba(0, 0, 0, .15); border: 1px solid #eee;\n    }\n    .user-fab .avatar{\n      width: 36px; height: 36px; border-radius: 50%;\n      display:flex; align-items:center; justify-content:center;\n      background:#0d6efd; color:#fff;\n    }\n    .user-fab .name{ line-height:1.1 }\n\n    .admin-btn-48{ width:48px; height:48px; }\n\n    .btn-clear { background:#fff !important; color:#6c757d !important; border:1px solid #ced4da !important; }\n    .btn-clear:hover { background:#f8f9fa !important; border-color:#adb5bd !important; }\n    .btn-add { background:#0d6efd !important; color:#fff !important; border:1px solid #0d6efd !important; }\n    .btn-add:hover { background:#0b5ed7 !important; }\n\n    /* === Overrides (renk güncellemeleri) === */\n    .todo-badge.date,\n    .todo-badge.who {\n      background:#6c757d !important;   /* koyu gri */\n      color:#fff !important;\n    }\n    .todo-badge.pending {\n      background:#ffca2c !important;   /* koyu gri */\n      color:#fff !important;\n    }\n    .todo-badge.done {\n      background:#198754 !important;   /* yeşil */\n      color:#fff !important;\n    }\n    #statAll {\n      background:#0d6efd !important;   /* mavi */\n      color:#fff !important;\n    }\n    #statOpen {\n      background:#ffca2c !important;   /* açık sarı */\n      color:#664d03 !important;\n      border:1px solid #ffe69c !important;\n    }\n    #statDone {\n      background:#198754 !important;   /* yeşil */\n      color:#fff !important;\n    }\n  </style>\n</head>\n<body>\n\n  <!-- NAVBAR -->\n  <nav class=\"navbar bg-white border-bottom mb-4\">\n    <div class=\"container d-flex align-items-center\">\n      <span class=\"navbar-text fw-semibold fs-4\">Yapılacaklar</span>\n      <div class=\"ms-auto\">\n        {{#user.isAdmin}}\n        <a href=\"/user-list\"\n           class=\"btn btn-primary d-flex align-items-center justify-content-center rounded-1 p-0 admin-btn-48\"\n           title=\"Admin Panel\">\n          <i class=\"bi bi-people-fill fs-4\"></i>\n        </a>\n        {{/user.isAdmin}}\n      </div>\n    </div>\n  </nav>\n\n  <div class=\"container\">\n    <div id=\"surveyHost\"></div>\n    {{#error}}<div class=\"alert alert-danger mt-3\"><h4 class=\"m-0\">{{message}}</h4></div>{{/error}}\n  </div>\n\n  <!-- Sağ altta FAB -->\n  <div class=\"user-fab\">\n    <div class=\"avatar\"><i class=\"bi bi-person-fill fs-5\"></i></div>\n    <div class=\"name small text-muted\" id=\"userLabel\">Kullanıcı</div>\n    <a href=\"/logout\" class=\"btn btn-danger p-0 d-flex align-items-center justify-content-center\"\n       style=\"width:40px;height:40px;border-radius:50%\" title=\"Çıkış\">\n      <i class=\"bi bi-power fs-5\"></i>\n    </a>\n  </div>\n\n  <!-- Backend verileri -->\n  <script>\n    window.__TODOS__ = {{#todosJson}}{{{todosJson}}}{{/todosJson}}{{^todosJson}}[]{{/todosJson}};\n    window.__USER__  = {{#userJson}}{{{userJson}}}{{/userJson}}{{^userJson}}{username:\"misafir\",email:\"\",isAdmin:false}{{/userJson}};\n    if(!Array.isArray(window.__TODOS__)) window.__TODOS__ = [];\n\n    (function(){\n      const u = window.__USER__ || {};\n      const label = [u.username || \"Kullanıcı\", u.email].filter(Boolean).join(\" — \");\n      const el = document.getElementById(\"userLabel\");\n      if(el) el.textContent = label;\n    })();\n  </script>\n\n  <script>\n  (function(){\n    Survey.StylesManager.applyTheme(\"modern\");\n    const isAdmin = !!(window.__USER__ && window.__USER__.isAdmin);\n    const esc = s => String(s ?? \"\").replace(/[&<>\"']/g, m=>({ \"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",\"\\\"\":\"&quot;\",\"'\":\"&#39;\" }[m]));\n    const filterByUser = (all,u)=>{\n      if(u?.isAdmin) return all||[];\n      const n=(u?.username||\"\").toLowerCase(), e=(u?.email||\"\").toLowerCase();\n      return (all||[]).filter(x=> (x?.stamp?.username||\"\").toLowerCase()===n || (x?.stamp?.email||\"\").toLowerCase()===e);\n    };\n\n    function rowHtml(t){\n      const titleCls = t.done ? \"todo-title done\" : \"todo-title\";\n      const datePill = `<span class=\"todo-badge date\"><i class=\"bi bi-calendar2-date\"></i> ${esc(t.dateTime||\"-\")}</span>`;\n      const whoPill  = isAdmin && t?.stamp?.username ? `<span class=\"todo-badge who\"><i class=\"bi bi-person-fill\"></i> ${esc(t.stamp.username)}</span>` : \"\";\n      const statePill= t.done \n        ? `<span class=\"todo-badge done\"><i class=\"bi bi-check2\"></i> Tamamlandı</span>`\n        : `<span class=\"todo-badge pending\"><i class=\"bi bi-hourglass-split\"></i> Beklemede</span>`;\n      const actions  = t.done\n        ? `<button class=\"btn btn-warning btn-open\"><i class=\"bi bi-arrow-counterclockwise\"></i> Yeniden Aç</button>\n           <button class=\"btn btn-danger btn-trash\"><i class=\"bi bi-trash\"></i> Sil</button>`\n        : `<button class=\"btn btn-success btn-complete\"><i class=\"bi bi-check2-square\"></i> Tamamla</button>\n           <button class=\"btn btn-info btn-edit\"><i class=\"bi bi-pencil-square\"></i> Düzenle</button>\n           <button class=\"btn btn-secondary btn-schedule\"><i class=\"bi bi-alarm-fill\"></i> Hatırlat</button>\n           <button class=\"btn btn-danger btn-trash\"><i class=\"bi bi-trash\"></i> Sil</button>`;\n      return `\n        <div class=\"todo-wrap ${t.done?'done':''}\" data-id=\"${t.id}\">\n          <div class=\"todo-row\">\n            <div class=\"todo-accent\" aria-hidden=\"true\"></div>\n            <div>\n              <div class=\"${titleCls}\">${esc(t.name)}</div>\n              <div class=\"todo-badges\">${datePill}${whoPill}${statePill}</div>\n            </div>\n            <i class=\"bi bi-chevron-down text-muted\"></i>\n          </div>\n          <div class=\"todo-actions\"><div class=\"d-flex flex-wrap gap-2 justify-content-end\">${actions}</div></div>\n        </div>`;\n    }\n\n    const surveyJson = {\n      showNavigationButtons:\"none\", showQuestionNumbers:\"off\", widthMode:\"responsive\",\n      pages:[{ name:\"home\", elements:[\n        { type:\"panel\", name:\"newItemPanel\", title:\"Yeni iş ekle\", elements:[\n          { type:\"text\", name:\"newName\", titleLocation:\"hidden\", isRequired:true,\n            placeholder:\"Dosyalar teslim edilecek...\", startWithNewLine:false },\n          { type:\"html\", name:\"addButtons\", startWithNewLine:false, html:\n            `<div class=\"d-flex justify-content-end align-items-center gap-2\">\n               <button type=\"button\" class=\"sv-btn btn-clear\">Temizle</button>\n               <button type=\"button\" class=\"sv-btn btn-add\">Ekle</button>\n             </div>` }\n        ]},\n        { type:\"html\", name:\"toolbar\", cssClasses:{root:\"toolbar-block\"}, html:\n          `<div class=\"todos-toolbar\">\n             <div class=\"toolbar-title\">Yapılacaklar</div>\n             <div class=\"toolbar-stats\">\n               <span class=\"stat-pill\" id=\"statAll\"><i class=\"bi bi-list-task\"></i> Toplam: 0</span>\n               <span class=\"stat-pill\" id=\"statOpen\"><i class=\"bi bi-hourglass-split\"></i> Açık: 0</span>\n               <span class=\"stat-pill\" id=\"statDone\"><i class=\"bi bi-check2-circle\"></i> Tamam: 0</span>\n             </div>\n           </div>` },\n        { type:\"html\", name:\"listHost\", html:`<div id=\"todoListHost\"></div>` },\n        { type:\"html\", name:\"emptyMsg\", html:`<div class=\"text-muted text-center py-4 d-none\" id=\"emptyListMsg\">Henüz kayıt yok…</div>` }\n      ]}]\n    };\n\n    const model = new Survey.Model(surveyJson);\n\n    model.onAfterRenderPanel.add((s,opt)=>{\n      if(opt.panel.name!==\"newItemPanel\") return;\n      opt.htmlElement.classList.add(\"inline-add\");\n      const row = opt.htmlElement.querySelector('.sv-row');\n      const inputWrap = row?.children?.[0]; const btnWrap = row?.children?.[1];\n      if(inputWrap){ inputWrap.style.flex='1 1 auto'; inputWrap.style.minWidth='0'; }\n      if(btnWrap){ btnWrap.style.flex='0 0 auto'; }\n    });\n\n    model.onAfterRenderQuestion.add((s,opt)=>{\n      if(opt.question.name===\"addButtons\"){\n        const host = opt.htmlElement;\n        host.querySelector(\".btn-add\")?.addEventListener(\"click\", ()=>{\n          const name = s.getQuestionByName(\"newName\")?.value?.trim();\n          if(!name) return; postForm(\"/opt/add\",{name});\n        });\n        host.querySelector(\".btn-clear\")?.addEventListener(\"click\", ()=>{\n          s.getQuestionByName(\"newName\").value=\"\";\n        });\n      }\n    });\n\n    model.onAfterRenderPage.add((s)=>{\n      const mine = filterByUser(window.__TODOS__, window.__USER__);\n      const list = mine.slice().sort((a,b)=>(b?.stamp?.createdAt||0)-(a?.stamp?.createdAt||0));\n      const host = document.getElementById(\"todoListHost\");\n      if(host){ host.innerHTML = list.map(rowHtml).join(\"\"); }\n      if(!list.length) document.getElementById(\"emptyListMsg\")?.classList.remove(\"d-none\");\n      const openCnt = list.filter(x=>!x.done).length, doneCnt = list.length-openCnt;\n      document.getElementById('statAll').innerHTML  = `<i class=\"bi bi-list-task\"></i> Toplam: ${list.length}`;\n      document.getElementById('statOpen').innerHTML = `<i class=\"bi bi-hourglass-split\"></i> Açık: ${openCnt}`;\n      document.getElementById('statDone').innerHTML = `<i class=\"bi bi-check2-circle\"></i> Tamam: ${doneCnt}`;\n      host?.querySelectorAll(\".todo-wrap\").forEach(wrap=>{\n        const id = wrap.getAttribute(\"data-id\");\n        wrap.querySelector(\".todo-row\")?.addEventListener(\"click\", ()=> wrap.classList.toggle(\"open\"));\n        wrap.querySelector(\".btn-trash\")?.addEventListener(\"click\",(e)=>{e.stopPropagation();postForm(\"/opt/trash\",{id});});\n        wrap.querySelector(\".btn-complete\")?.addEventListener(\"click\",(e)=>{e.stopPropagation();postForm(\"/opt/complete\",{id});});\n        wrap.querySelector(\".btn-open\")?.addEventListener(\"click\",(e)=>{e.stopPropagation();postForm(\"/opt/open\",{id});});\n        wrap.querySelector(\".btn-edit\")?.addEventListener(\"click\",(e)=>{e.stopPropagation();location.href=\"/edit/\"+encodeURIComponent(id);});\n        wrap.querySelector(\".btn-schedule\")?.addEventListener(\"click\",(e)=>{e.stopPropagation();location.href=\"/schedule/\"+encodeURIComponent(id);});\n      });\n    });\n\n    async function postForm(url,data){\n      const res = await fetch(url,{method:\"POST\",credentials:\"include\",\n        headers:{ \"Content-Type\":\"application/x-www-form-urlencoded\" },\n        body:new URLSearchParams(data)});\n      if(!res.ok){ alert(\"İstek başarısız.\"); return; }\n      location.reload();\n    }\n\n    $(\"#surveyHost\").Survey({ model });\n  })();\n  </script>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n",
        "output": "str",
        "x": 960,
        "y": 260,
        "wires": [
            [
                "5f3b77fa64a6ca14"
            ]
        ]
    },
    {
        "id": "5f3b77fa64a6ca14",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 260,
        "wires": []
    },
    {
        "id": "9e7745c31875caa6",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.find()",
        "func": "\nlet query = msg.user.roles.includes(\"admin\")\n  ? {}\n  : { \"stamp.username\": msg.user.username };\n\nmsg.payload = [[{ $match: query },\n{ $sort: { \"stamp.createdAt\": -1 } },\n\n  ]\n];\n\nmsg.hasAdmin = msg.user.roles.includes(\"admin\") ? true : false;\nreturn msg;\n/*\nlet query = msg.user.roles.includes(\"admin\")\n      ? {}\n      : { \"stamp.username\": msg.user.username };\n\n    msg.payload = query; // Sadece sorgu nesnesini gönderiyoruz\n\n    return msg;\n*/",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 260,
        "wires": [
            [
                "7b383705f4aaec1f"
            ]
        ]
    },
    {
        "id": "c5f4d0120c89df7e",
        "type": "link in",
        "z": "651af9bb9a46e4b0",
        "name": "link in 1",
        "links": [
            "0302817e86f493e9",
            "8646b06022669592",
            "2713f0cacf4e39f6",
            "22dd74058ceaa141"
        ],
        "x": 175,
        "y": 220,
        "wires": [
            [
                "6d8042d6f0a12ac0"
            ]
        ]
    },
    {
        "id": "cb74c25f1cb1ec44",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/opt/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "f55ef5f0d076fe2f"
            ]
        ]
    },
    {
        "id": "91308c72ec45a46b",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 1500,
        "y": 580,
        "wires": []
    },
    {
        "id": "f8a16a36a9c0bb02",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.opt()",
        "func": "const type = (msg.req?.params?.type || \"\").trim();\nconst nowDate = new Date();\nconst now = nowDate.getTime();\n\nmsg.formData = msg.payload || {};\nconst f = msg.formData;\n\nfunction normId(v) {\n  const s = (v ?? \"\").toString().trim();\n  if (!s) return s;\n  const n = Number(s);\n  return Number.isNaN(n) ? s : n;\n}\n\nif (type === \"add\") {\n  const name = (f.name || \"\").trim();\n  msg.payload = {\n    id: now,\n    name,\n    done: false,\n    stamp: {\n      createdAt: now,\n      ip: msg.req?.ip || \"\",\n      username: msg.user?.username || \"\",\n      email: msg.user?.email || \"\"\n    },\n    dateTime: nowDate.toLocaleString(\"tr-TR\", { hour12: false })\n  };\n  return [msg, null];\n}\n\nconst id =\n  normId(f.id) ||\n  normId(msg.req?.body?.id) ||\n  normId(msg.req?.params?.id) ||\n  \"\";\n\nmsg.payload = { id };\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 620,
        "wires": [
            [
                "93d181d58a920cd0"
            ],
            [
                "57fe0dbd56855d23"
            ]
        ],
        "outputLabels": [
            "Success",
            ""
        ]
    },
    {
        "id": "c8e03f51ac6bfb33",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "validation",
        "func": "const typeLookup = {\n    trash: {\n        text: \"Silme\",\n        requireArgs: [\"id\"]\n    },\n    complete: {\n        text: \"Tamamlama\",\n        requireArgs: [\"id\"]\n    },\n    open: {\n        text: \"Açma\",\n        requireArgs: [\"id\"]\n    },\n    add: {\n        text: \"Ekleme\",\n        requireArgs: [\"name\"]\n    },\n    update: {\n        text: \"Güncelle\",\n        requireArgs: [\"id\", \"name\", \"orig\"]\n    },\n    schedule: {\n        text: \"Hatırlatıcı\",\n        requireArgs: [\"id\", \"datetime\"]\n    }\n    \n}\n\nif (!Object.keys(typeLookup).includes(msg.req.params.type)) {\n    msg.error = {\n        message: `${msg.req.params.type} geçersiz bir parametre değeridir.`\n    }\n    return [null, msg]\n}\n\nif (!typeLookup[msg.req.params.type].requireArgs.every(arg => msg.payload[arg])) {\n    msg.error = {\n        message: `${typeLookup[msg.req.params.type].text} istediğiniz elemanın ${typeLookup[msg.req.params.type].requireArgs} bilgisi olmalı`\n    }\n    return [null, msg]\n}\n\nif (msg.req.params.type === \"update\") {\n    const newVal = (msg.payload.name || \"\").trim();\n    const origVal = (msg.payload.orig || \"\").trim();\n    if (newVal === origVal) {\n        msg.error = {\n            message: \"Herhangi bir güncelleme yapmadınız.\"\n        };\n        return [null, msg];\n    }\n}\nif (msg.req.params.type === \"schedule\") {\n    const newDt = (msg.payload.datetime || \"\").trim();\n    const origDt = (msg.payload.origDt || \"\").trim();\n    const newNote = (msg.payload.note || \"\").trim();\n    const origNote = (msg.payload.origNote || \"\").trim();\n\n    const ms = Date.parse(newDt);\n\n    if (ms < Date.now()) {\n        msg.error = { message: \"Geçmiş bir zamana planlanamaz.\" };\n        return [null, msg];\n    }\n    if (origDt && newDt === origDt) {\n        msg.error = { message: \"Herhangi bir değişiklik yapmadınız.\" };\n        return [null, msg];\n    }\n\n    msg.payload.schedule = { datetime: newDt, epoch: ms };\n}\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 620,
        "wires": [
            [
                "f8a16a36a9c0bb02"
            ],
            [
                "0302817e86f493e9"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "0302817e86f493e9",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 595,
        "y": 660,
        "wires": []
    },
    {
        "id": "8646b06022669592",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 1135,
        "y": 640,
        "wires": []
    },
    {
        "id": "a72f64871256d68a",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "6d8042d6f0a12ac0"
            ]
        ]
    },
    {
        "id": "6f79df54bf91c316",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/edit/:id",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "4a66cc4d80aa2897"
            ]
        ]
    },
    {
        "id": "414d44229aa0ed03",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.findOne()",
        "func": "// URL'den gelen id'yi sayı yapılabiliyorsa sayıya çevir\nconst raw = (msg.req.params.id ?? \"\").toString().trim();\nconst num = Number(raw);\nconst id  = Number.isNaN(num) ? raw : num;\n\nmsg.payload = { id };\n\nif(!msg.user.roles.includes(\"admin\")){\n  msg.payload[\"stamp.username\"] = msg.user.username;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 360,
        "wires": [
            [
                "4ebc1649e8305f46"
            ]
        ],
        "outputLabels": [
            "Success"
        ]
    },
    {
        "id": "b38fb814b875aebb",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Yapılacaklar — Düzenleme</title>\n\n  <!-- Bootstrap & Icons -->\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\" rel=\"stylesheet\">\n\n  <!-- SurveyJS (jQuery) -->\n  <script src=\"https://unpkg.com/jquery\"></script>\n  <script src=\"https://unpkg.com/survey-jquery/survey.jquery.min.js\"></script>\n  <link href=\"https://unpkg.com/survey-jquery/modern.min.css\" rel=\"stylesheet\" />\n\n  <style>\n    body { background: #f8f9fa; }\n    /* SurveyJS modern tema: soru başlığını ve yeşil header şeridini gizle */\n    .sv_q_title { display: none !important; }\n    .sd-element__header { display: none !important; }\n  </style>\n</head>\n\n<body class=\"bg-light\">\n  <!-- NAVBAR aynı kalsın -->\n  <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n    <div class=\"container d-flex align-items-center\">\n      <span class=\"navbar-text fw-semibold fs-4\">Yapılacaklar — Düzenleme</span>\n      <a class=\"ms-auto nav-link fw-semibold fs-5\" href=\"/\">Ana Sayfa</a>\n    </div>\n  </nav>\n\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-8 offset-md-2\">\n        {{#error}}\n        <div class=\"alert alert-danger\">\n          <h4>{{message}}</h4>\n        </div>\n        {{/error}}\n\n        <!-- SurveyJS alanı -->\n        <div id=\"surveyContainer\"></div>\n\n        <!-- Butonlar -->\n        <div class=\"d-flex justify-content-end gap-2 mt-3\">\n          <a class=\"btn btn-danger text-white\" href=\"/\">Vazgeç</a>\n          <button class=\"btn btn-secondary text-white\" type=\"button\" id=\"btnClear\">Temizle</button>\n          <button id=\"btnUpdate\" class=\"btn btn-success text-white px-4\" type=\"button\" disabled>Güncelle</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    const surveyJson = {\n      questionTitleLocation: \"hidden\",\n      title: \"Düzenleme\",\n      showQuestionNumbers: \"off\",\n      questionTitleLocation: \"hidden\",\n      pages: [\n        {\n          elements: [\n            {\n              type: \"text\",\n              name: \"name\",\n              titleLocation: \"hidden\",\n              isRequired: true,\n              defaultValue: \"{{payload.name}}\",\n              placeholder: \"Dosyalar teslim edilecek...\"\n            }\n          ]\n        }\n      ],\n      showPrevButton: false,\n      showNavigationButtons: false,\n      showCompletedPage: false\n    };\n\n    const survey = new Survey.Model(surveyJson);\n    $(\"#surveyContainer\").Survey({ model: survey });\n\n    survey.textUpdateMode = \"onTyping\";\n\n    const btnUpdate = document.getElementById(\"btnUpdate\");\n    const originalValue = \"{{payload.name}}\".trim();\n\n    function toggleUpdateButton(sender){\n      const currentValue = (sender.data.name || \"\").trim();\n      btnUpdate.disabled = currentValue.length === 0 || currentValue === originalValue;\n    }\n\n    survey.onValueChanged.add(function(sender){ toggleUpdateButton(sender); });\n\n    toggleUpdateButton(survey);\n\n    document.getElementById(\"btnClear\").addEventListener(\"click\", function(){\n      survey.setValue(\"name\", \"\");\n      toggleUpdateButton(survey);\n    });\n\n    btnUpdate.addEventListener(\"click\", function(){\n      if (btnUpdate.disabled) return;\n      const form = document.createElement(\"form\");\n      form.method = \"POST\";\n      form.action = \"/opt/update\";\n\n      const id = document.createElement(\"input\");\n      id.type = \"hidden\";\n      id.name = \"id\";\n      id.value = \"{{payload.id}}\";\n      form.appendChild(id);\n\n      const orig = document.createElement(\"input\");\n      orig.type = \"hidden\";\n      orig.name = \"orig\";\n      orig.value = \"{{payload.name}}\";\n      form.appendChild(orig);\n\n      const name = document.createElement(\"input\");\n      name.type = \"hidden\";\n      name.name = \"name\";\n      name.value = survey.data.name;\n      form.appendChild(name);\n\n      document.body.appendChild(form);\n      form.submit();\n    });\n  </script>\n\n</body>\n\n</html>\n",
        "output": "str",
        "x": 1020,
        "y": 360,
        "wires": [
            [
                "16deb591861247c0"
            ]
        ]
    },
    {
        "id": "2713f0cacf4e39f6",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 955,
        "y": 400,
        "wires": []
    },
    {
        "id": "16deb591861247c0",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 360,
        "wires": []
    },
    {
        "id": "3eea38f2a6d357e1",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/schedule/:id",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "2cbcf6d6ae4cab8b"
            ]
        ]
    },
    {
        "id": "b8be420b120246f5",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.findTwo()",
        "func": "// URL'den gelen id'yi sayı yapılabiliyorsa sayıya çevir\nconst raw = (msg.req.params.id ?? \"\").toString().trim();\nconst num = Number(raw);\nconst id  = Number.isNaN(num) ? raw : num;\n\nmsg.payload = { id };\n\nif(!msg.user.roles.includes(\"admin\")){\n  msg.payload[\"stamp.username\"] = msg.user.username;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 480,
        "wires": [
            [
                "8af76568d2754a77"
            ]
        ],
        "outputLabels": [
            "Success"
        ]
    },
    {
        "id": "a35e8f26138c2a60",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Hatırlatıcılar</title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\" rel=\"stylesheet\">\n  <link rel=\"stylesheet\" href=\"https://cdn.datatables.net/v/bs5/dt-1.13.8/datatables.min.css\"/>\n  <style>\n    :root { --soft-bg: #f8f9fa; }\n    body { background: var(--soft-bg); }\n    .dt-center { text-align:center; }\n    .nowrap { white-space: nowrap; }\n    #remTable{ table-layout: fixed; }\n    .action-btn{ min-width: 92px; }\n  </style>\n</head>\n<body class=\"bg-light\">\n  <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n    <div class=\"container d-flex align-items-center\">\n      <span class=\"navbar-text fw-semibold fs-4\">Hatırlatıcılar</span>\n      <a class=\"ms-auto nav-link fw-semibold fs-5\" href=\"/\">Ana Sayfa</a>\n    </div>\n  </nav>\n\n  <main class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-10 offset-md-1\">\n        <!-- FORM -->\n        <div class=\"card shadow-sm mb-3\">\n          <div class=\"card-body\">\n            <div class=\"d-flex align-items-center mb-2\">\n              <div class=\"flex-grow-1\"></div>\n              <small class=\"text-muted\">Zaman Dilimi: Europe/Istanbul</small>\n            </div>\n            <form id=\"frm\" action=\"/opt/schedule\" method=\"post\" novalidate>\n              <input type=\"hidden\" name=\"id\" id=\"idHidden\" value=\"{{payload.id}}\">\n              <input type=\"hidden\" name=\"origDt\" id=\"origDtHidden\" value=\"\">\n              <input type=\"hidden\" name=\"origNote\" id=\"origNoteHidden\" value=\"\">\n              <div class=\"row g-3 align-items-end\">\n                <div class=\"col-md-6\">\n                  <label for=\"dt\" class=\"form-label\">Tarih ve Saat</label>\n                  <input id=\"dt\" name=\"datetime\" type=\"datetime-local\" step=\"60\" class=\"form-control form-control-lg\" aria-label=\"Tarih ve saat\" required>\n                  <div class=\"form-text\">Geçmiş tarih seçilemez.</div>\n                </div>\n                <div class=\"col-12\">\n                  <label for=\"note\" class=\"form-label\">Not</label>\n                  <textarea id=\"note\" name=\"note\" class=\"form-control form-control-lg\" placeholder=\"Not ekleyin…\" rows=\"3\" maxlength=\"500\"></textarea>\n                </div>\n                <div class=\"col-12 d-flex justify-content-end gap-2\">\n                  <a href=\"/\" class=\"btn btn-danger\">Vazgeç</a>\n                  <button id=\"btnClear\" class=\"btn btn-secondary\" type=\"button\">Temizle</button>\n                  <button id=\"btnPlan\" class=\"btn btn-success\" type=\"submit\">Planla</button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        <!-- LİSTE -->\n        <div class=\"card shadow-sm\">\n          <div class=\"card-header bg-white d-flex align-items-center justify-content-between\">\n            <h5 class=\"m-0 text-muted\">Yaklaşan hatırlatıcılar</h5>\n          </div>\n          <div class=\"card-body p-0\">\n            <div class=\"table-responsive\">\n              <table id=\"remTable\" class=\"table table-striped table-hover m-0 align-middle\">\n                <thead class=\"table-light\">\n                  <tr>\n                    <th style=\"width:40%\">Not</th>\n                    <th class=\"nowrap\" style=\"width:20%\">Tarih/Saat</th>\n                    <th class=\"nowrap\" style=\"width:20%\">Kalan Süre</th>\n                    <th class=\"dt-center nowrap\" style=\"width:20%;\" data-orderable=\"false\">İşlemler</th>\n                  </tr>\n                </thead>\n                <tbody></tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </main>\n\n  <!-- TOAST -->\n  <div class=\"position-fixed bottom-0 end-0 p-3\" style=\"z-index: 1080;\">\n    <div id=\"toast\" class=\"toast align-items-center text-bg-dark border-0\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\n      <div class=\"d-flex\">\n        <div class=\"toast-body\" id=\"toastBody\">İşlem tamam.</div>\n        <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n      </div>\n    </div>\n  </div>\n\n  <!-- BACKEND'TEN GÖMÜLEN VERİLER -->\n  <script>\n    window.__TODO__      = {{#todoJson}}{{{todoJson}}}{{/todoJson}}{{^todoJson}}null{{/todoJson}};\n    window.__SCHEDULES__ = {{#schedulesJson}}{{{schedulesJson}}}{{/schedulesJson}}{{^schedulesJson}}[]{{/schedulesJson}};\n  </script>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>\n  <script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\n  <script src=\"https://cdn.datatables.net/v/bs5/dt-1.13.8/datatables.min.js\"></script>\n  <script>\n  (function(){\n    const dtInput  = document.getElementById('dt');\n    const note     = document.getElementById('note');\n    const btnClear = document.getElementById('btnClear');\n    const planBtn  = document.getElementById('btnPlan');\n    const idHidden = document.getElementById('idHidden');\n    const tableEl  = document.getElementById('remTable');\n\n    const toastEl   = document.getElementById('toast');\n    const toastBody = document.getElementById('toastBody');\n    const toast     = new bootstrap.Toast(toastEl, {delay:2000});\n    function showToast(msg){ toastBody.textContent = msg; toast.show(); }\n\n    const pad = n => String(n).padStart(2,'0');\n    function toLocalInputValue(d){\n      const yy = d.getFullYear();\n      const mm = pad(d.getMonth()+1);\n      const dd = pad(d.getDate());\n      const hh = pad(d.getHours());\n      const mi = pad(d.getMinutes());\n      return `${yy}-${mm}-${dd}T${hh}:${mi}`;\n    }\n    function plusMinutes(date, minutes){ const d=new Date(date.getTime()); d.setMinutes(d.getMinutes()+minutes); d.setSeconds(0,0); return d; }\n    function humanDiff(dStr){\n      const d = new Date(dStr);\n      const diffMs = d - new Date();\n      if(!isFinite(d) || isNaN(d)) return '-';\n      if(diffMs <= 0) return 'Süre doldu';\n      const mins = Math.round(diffMs/60000);\n      if(mins < 60) return `${mins} dk`;\n      const hrs = Math.floor(mins/60); const rem = mins%60;\n      if(hrs < 24) return `${hrs} sa ${rem} dk`;\n      const days = Math.floor(hrs/24);\n      return `${days} gün ${hrs%24} sa`;\n    }\n    const esc = s => String(s).replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;').replaceAll('\"','&quot;').replaceAll(\"'\",\"&#39;\");\n\n    const now = new Date();\n    dtInput.value = toLocalInputValue(plusMinutes(now, 10));\n    dtInput.min   = toLocalInputValue(now);\n    dtInput.addEventListener('change', function(){\n      const chosen = new Date(dtInput.value);\n      const now2 = new Date();\n      if (!isFinite(chosen) || chosen < now2) {\n        dtInput.value = toLocalInputValue(plusMinutes(now2, 1));\n      }\n    });\n\n    btnClear.addEventListener('click', function(){\n      dtInput.value = '';\n      note.value = '';\n      planBtn.textContent = 'Planla';\n      dtInput.focus();\n    });\n\n    document.getElementById('frm').addEventListener('submit', async function(e){\n      e.preventDefault();\n      const id   = idHidden.value || (window.__TODO__ && window.__TODO__.id);\n      const dval = dtInput.value;\n      const nval = (note.value||'').trim();\n      if(!id){ showToast('Kayıt bulunamadı.'); return; }\n      if(!dval){ showToast('Tarih/Saat gerekli.'); return; }\n      const chosen = new Date(dval);\n      if(!(chosen instanceof Date) || isNaN(chosen)) { showToast('Geçersiz tarih.'); return; }\n      if(chosen < new Date()) { showToast('Geçmişe planlanamaz.'); return; }\n\n      const res = await fetch('/opt/schedule',{\n        method:'POST', credentials:'include',\n        headers:{'Content-Type':'application/x-www-form-urlencoded'},\n        body:new URLSearchParams({ id:String(id), datetime:dval, note:nval, origDt: document.getElementById('origDtHidden').value || '', origNote: document.getElementById('origNoteHidden').value || '' })\n      });\n      if(!res.ok){ showToast('İstek başarısız.'); return; }\n      location.reload();\n    });\n\n    let dataTable = null;\n    function drawTable(){\n      if(dataTable){ dataTable.clear().destroy(); }\n      const tbody = tableEl.querySelector('tbody');\n      tbody.innerHTML = '';\n      const items = (Array.isArray(window.__SCHEDULES__)? window.__SCHEDULES__: [])\n        .slice().sort((a,b)=> String(a.datetime).localeCompare(String(b.datetime)));\n      for(const r of items){\n        const tr = document.createElement('tr');\n        const text = r.note ? esc(r.note) : 'Hatırlatıcı';\n        tr.innerHTML = `\n          <td class=\"text-truncate\" style=\"max-width:0;\" title=\"${text}\">${text}</td>\n          <td class=\"nowrap\" data-order=\"${esc(r.datetime)}\">${esc(String(r.datetime).replace('T',' '))}</td>\n          <td class=\"nowrap\">${humanDiff(r.datetime)}</td>\n          <td class=\"dt-center\">\n            <div class=\"d-flex justify-content-center gap-2 flex-wrap\">\n                <button class=\"btn btn-outline-primary action-btn\" type=\"button\"\n                        data-role=\"edit\" data-dt=\"${esc(String(r.datetime))}\"\n                        data-note=\"${esc(String(r.note||''))}\">\n                  <i class=\"bi bi-pencil-square\"></i> Düzenle\n                </button>\n                <form class=\"d-inline\" method=\"post\" action=\"/opt/schedule\">\n                  <input type=\"hidden\" name=\"mode\" value=\"delete\">\n                  <input type=\"hidden\" name=\"id\" value=\"${esc(String(r.todoId||window.__TODO__?.id||''))}\">\n                  <input type=\"hidden\" name=\"scheduleId\" value=\"${esc(String(r._id||r.scheduleId||''))}\">\n                  <button class=\"btn btn-outline-danger action-btn\" type=\"submit\">\n                    <i class=\"bi bi-trash\"></i> Sil\n                  </button>\n                </form>\n              </div>\n          </td>`;\n        tbody.appendChild(tr);\n      }\n      dataTable = new window.jQuery(tableEl).DataTable({\n        order: [[1,'asc']], paging:true, pageLength:10, lengthChange:false,\n        searching:false, info:false, columnDefs:[{targets:3, orderable:false}],\n        language:{ emptyTable:'Kayıt yok.', paginate:{ previous:'Previous', next:'Next' } }\n      });\n    }\n\n    tableEl.addEventListener('click', (e)=>{\n      const btn = e.target.closest('button[data-role=\"edit\"]');\n      if(!btn) return;\n      const id = btn.getAttribute('data-id');\n      const r = (window.__SCHEDULES__||[]).find(x=> String(x._id)===id);\n      if(!r) return;\n      idHidden.value = window.__TODO__?.id || '';\n      dtInput.value = r.datetime.slice(0,16);\n      note.value = r.note || '';\n      planBtn.textContent = 'Güncelle';\n      dtInput.focus();\n    });\n\n    tableEl.addEventListener('submit', function(e){\n      const f = e.target.closest('form[action=\"/opt/schedule\"]');\n      if(!f) return;\n      e.preventDefault();\n      const fd = new FormData(f);\n      fetch('/opt/schedule',{\n        method:'POST', credentials:'include',\n        headers:{'Content-Type':'application/x-www-form-urlencoded'},\n        body:new URLSearchParams(fd)\n      }).then(res=>{\n        if(!res.ok) throw new Error('fail');\n        location.reload();\n      }).catch(()=> showToast('İstek başarısız.'));\n    });\n\n    // Event delegation: schedule Düzenle\n    tableEl.addEventListener('click', (e)=>{\n      const btn = e.target.closest('button[data-role=\"edit\"]');\n      if(!btn) return;\n      e.preventDefault();\n      const dt = btn.getAttribute('data-dt') || '';\n      const nt = btn.getAttribute('data-note') || '';\n      if(dt) dtInput.value = dt.slice(0,16);\n      note.value = nt;\n      document.getElementById('origDtHidden').value = dtInput.value || '';\n      document.getElementById('origNoteHidden').value = note.value || '';\n      planBtn.textContent = 'Güncelle';\n      dtInput.focus();\n    });\n\n    drawTable();\n  })();\n  </script>\n</body>\n</html>\n",
        "output": "str",
        "x": 1060,
        "y": 460,
        "wires": [
            [
                "c001fccb8fb4cf85",
                "212b93a82df7edc7"
            ]
        ]
    },
    {
        "id": "22dd74058ceaa141",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 995,
        "y": 520,
        "wires": []
    },
    {
        "id": "c001fccb8fb4cf85",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 460,
        "wires": []
    },
    {
        "id": "463e1db29a4e8833",
        "type": "crontinject",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 1,
        "hasButton": false,
        "x": 960,
        "y": 120,
        "wires": [
            [
                "d6134361a15b1330"
            ]
        ]
    },
    {
        "id": "4a377d0e6259123f",
        "type": "inject",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "4957ed9e50014e41"
            ]
        ]
    },
    {
        "id": "6deb06d96837b126",
        "type": "e-mail",
        "z": "651af9bb9a46e4b0",
        "server": "smtp-relay.brevo.com",
        "port": "587",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 1590,
        "y": 120,
        "wires": []
    },
    {
        "id": "0b9f34182300bc33",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "header",
        "func": "// header (TEK ÇIKIŞ)\n// Amaç: cronti'nin gönderdiği topic \"todo:<todoId>\" veya \"todo:<todoId>:<scheduleId>\"\n// iken sadece <todoId>'yi çekip flow cache'ten todo'yu almak ve e-posta başlıklarını hazırlamak.\n\nif (!msg.todo) {\n  // todo:<todoId> veya todo:<todoId>:<scheduleId> -> sadece <todoId>'yi yakala\n  const m = (msg.topic || \"\").match(/^todo:([^:]+)/);\n  if (!m) return null;\n\n  const todoId = m[1];\n\n  // Flow cache anahtarı sadece todoId ile set ediliyor: flow.set(`todo:${todoId}`, shallowTodo)\n  msg.todo = flow.get(`todo:${todoId}`) || null;\n\n  if (!msg.todo) return null; // cache yoksa düş\n}\n\n// E-posta başlıkları\nmsg.from  = \"Hatırlatıcı <talhaormekaya@gmail.com>\";\nmsg.to    = msg.todo?.stamp?.email || \"talhaormekaya@gmail.com\";\nmsg.topic = `Hatırlatma: ${msg.todo?.name || \"Görev\"}`;\n\n// (Opsiyonel) Tetik sonrası aynı todo için cache'i temizlemek istiyorsan açabilirsin.\n// try { flow.set(`todo:${String(msg.todo.id)}`, undefined); } catch (_) {}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "1e3410a2c0801097"
            ]
        ]
    },
    {
        "id": "1e3410a2c0801097",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<p>{{todo.name}} işi için hatırlatma.</p>\n\n{{#todo.schedule.formData.note}}\n  <p style=\"white-space:pre-wrap;\"><strong>Not:</strong> {{{todo.schedule.formData.note}}}</p>\n{{/todo.schedule.formData.note}}\n{{^todo.schedule.formData.note}}\n  {{#todo.lastNote}}\n    <p style=\"white-space:pre-wrap;\"><strong>Not:</strong> {{{todo.lastNote}}}</p>\n  {{/todo.lastNote}}\n{{/todo.schedule.formData.note}}\n",
        "output": "str",
        "x": 1440,
        "y": 120,
        "wires": [
            [
                "6deb06d96837b126"
            ]
        ]
    },
    {
        "id": "18dc3105a4edec0c",
        "type": "link in",
        "z": "651af9bb9a46e4b0",
        "name": "link in 2",
        "links": [
            "7148ede4c5df0a6c",
            "dcacbd7ada1430a0",
            "c85f8a5a8f2e81bc"
        ],
        "x": 845,
        "y": 120,
        "wires": [
            [
                "463e1db29a4e8833"
            ]
        ]
    },
    {
        "id": "dcacbd7ada1430a0",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "18dc3105a4edec0c"
        ],
        "x": 775,
        "y": 120,
        "wires": []
    },
    {
        "id": "d6134361a15b1330",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "OnlyFires",
        "func": "// OnlyFires — sadece gerçek tetiklemeyi geçir\nif (msg.schedule && (msg.schedule.list || msg.schedule.self)) {\n  return null; // kayıt onayı → mail gönderme\n}\n\n// Kurulum mesajlarını ele\nif (typeof msg.payload === \"object\" &&\n  (msg.payload?.crontiMethod || msg.payload?.crontiArgs)) {\n  return null;\n}\n\n// Gerçek tetik: number (epoch) | Date | \"timestamp\" string'i\nconst isDateObj = msg.payload && Object.prototype.toString.call(msg.payload) === \"[object Date]\";\nconst isNumber = typeof msg.payload === \"number\";\nconst isParsableString = (typeof msg.payload === \"string\") && !Number.isNaN(Date.parse(msg.payload));\n\nconst isRealFire = isNumber || isDateObj || isParsableString;\nreturn isRealFire ? msg : null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 120,
        "wires": [
            [
                "0b9f34182300bc33"
            ]
        ]
    },
    {
        "id": "90f7036bef489ba2",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Kullanıcı Listesi</title>\n\n  <!-- Bootstrap & DataTables CSS -->\n  <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\" />\n  <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" />\n  <link rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.13.8/css/dataTables.bootstrap5.min.css\" />\n\n  <!-- SurveyJS (jQuery) -->\n  <script src=\"https://unpkg.com/jquery\"></script>\n  <script src=\"https://unpkg.com/survey-jquery/survey.jquery.min.js\"></script>\n  <link href=\"https://unpkg.com/survey-jquery/modern.min.css\" rel=\"stylesheet\" />\n\n  <style>\n    @media (min-width: 1400px) {\n      .container {\n        max-width: 1320px;\n      }\n    }\n\n    #tblUsers {\n      width: 100% !important;\n    }\n\n    .card {\n      border-radius: .75rem;\n    }\n\n    .badge-role {\n      font-weight: 500;\n    }\n\n    /* Kaydet butonu mavi */\n    .sv-footer__complete-btn {\n      background-color: #0d6efd !important;\n      color: #fff !important;\n      border: 1px solid #0d6efd !important;\n    }\n\n    .sv-footer__complete-btn:hover {\n      background-color: #0b5ed7 !important;\n    }\n\n    /* Temizle butonu beyaz (outline) */\n    #btnReset {\n      background-color: #fff !important;\n      color: #6c757d !important;\n      /* gri yazı */\n      border: 1px solid #ced4da !important;\n    }\n\n    #btnReset:hover {\n      background-color: #f8f9fa !important;\n      border-color: #adb5bd !important;\n    }\n  </style>\n</head>\n\n<body class=\"bg-light\">\n\n  <!-- NAVBAR -->\n  <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n    <div class=\"container d-flex align-items-center justify-content-between\">\n      <span class=\"navbar-text fw-semibold fs-5\">Admin Panel</span>\n      <a class=\"ms-auto nav-link fw-semibold fs-5\" href=\"/\">Ana Sayfa</a>\n    </div>\n  </nav>\n\n  <div class=\"container pb-5\">\n\n    <!-- Kullanıcı Ekle -->\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <div class=\"card shadow-sm mb-4\">\n          <div class=\"card-body\">\n            <h5 class=\"mb-3\">Kullanıcı Ekle</h5>\n            <div id=\"formHost\"></div>\n\n            <div class=\"d-flex align-items-center justify-content-between mt-2\">\n              <div class=\"text-muted\">Parola gücü: <span id=\"pwLabel\">—</span></div>\n              <div>\n                <!-- SurveyJS butonları -->\n                <input type=\"button\" id=\"btnSubmit\" value=\"Kaydet\" class=\"sv-btn sv-footer__complete-btn\"/>\n                <input type=\"button\" id=\"btnReset\" value=\"Temizle\" class=\"sv-btn sv-footer__next-btn me-2\"/>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Kullanıcı Listesi -->\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <div class=\"card shadow-sm\">\n          <div class=\"card-body\">\n            <div class=\"d-flex align-items-center justify-content-between mb-2\">\n              <h5 class=\"mb-0\">Kullanıcı Listesi</h5>\n              <div id=\"listMeta\" class=\"text-muted small\"></div>\n            </div>\n\n            <div class=\"table-responsive\">\n              <table id=\"tblUsers\" class=\"table table-striped table-hover table-sm align-middle\">\n                <thead>\n                  <tr>\n                    <th>ID</th>\n                    <th>Kullanıcı Adı</th>\n                    <th>Ad Soyad</th>\n                    <th>E-posta</th>\n                    <th>Kayıt</th>\n                    <th>Rol</th>\n                    <th>Durum</th>\n                    <th class=\"text-end\">İşlemler</th>\n                  </tr>\n                </thead>\n                <tbody></tbody>\n              </table>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div><!-- /.container -->\n\n  <!-- Backend’ten gömülen veri -->\n  <script>\n    window.__USERS__ = {{{usersJson}}};\n  </script>\n\n  <!-- DataTables JS -->\n  <script src=\"https://cdn.datatables.net/1.13.8/js/jquery.dataTables.min.js\"></script>\n  <script src=\"https://cdn.datatables.net/1.13.8/js/dataTables.bootstrap5.min.js\"></script>\n\n  <script>\n    let survey; \n    let dt;     \n\n    const norm = v => String(v||\"\").trim().toLowerCase();\n    const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^A-Za-z0-9]).{8,64}$/;\n\n    function scorePassword(p){ let s=0; if(!p) return 0;\n      s += Math.min(6, new Set(p).size);\n      s += /[a-z]/.test(p); s += /[A-Z]/.test(p);\n      s += /\\d/.test(p);    s += /[^A-Za-z0-9]/.test(p);\n      s += Math.min(4, Math.floor(p.length/3));\n      return s;\n    }\n    function pwLabel(sc){\n      if(sc>=9) return {text:\"çok güçlü\", cls:\"color:#198754\"};\n      if(sc>=7) return {text:\"güçlü\",      cls:\"color:#198754\"};\n      if(sc>=5) return {text:\"orta\",       cls:\"color:#fd7e14\"};\n      return          {text:\"zayıf\",       cls:\"color:#dc3545\"};\n    }\n\n    (function initForm(){\n      if (!window.Survey) return;\n      Survey.StylesManager.applyTheme(\"modern\");\n\n      const surveyJson = {\n        showQuestionNumbers: \"off\",\n        questionTitleLocation: \"left\",\n        widthMode: \"responsive\",\n        showNavigationButtons: \"none\",\n        showCompletedPage: false,\n        elements: [\n          { type:\"text\", name:\"username\", title:\"Kullanıcı Adı\", isRequired:true,\n            minLength:3, placeholder:\"(3–32, harf/rakam/._)\" , width:\"40%\"},\n          { type:\"text\", name:\"displayName\", title:\"Ad Soyad\", isRequired:true, startWithNewLine:false,width:\"30%\" },\n          { type:\"text\", name:\"email\", title:\"E-posta\", inputType:\"email\", isRequired:true, startWithNewLine:false,\n            placeholder:\"ornek@site.com\", validators:[{ type:\"email\", text:\"Geçerli bir e-posta girin.\" }] },\n          { type:\"text\", name:\"password\", title:\"Parola\", inputType:\"password\", isRequired:true, minLength:8,\n            validators:[{type:\"regex\", regex: PWD_REGEX.source, text:\"En az 8 karakter; küçük+BÜYÜK+rakam+özel karakter olmalı.\"}],\n            description: \"Şifre ipucu: En az 8 karakter; küçük+BÜYÜK+rakam+özel karakter (!@#$%...) içermeli.\",\n            descriptionLocation: \"underInput\" },\n          { type:\"text\", name:\"password2\", title:\"Parola (Tekrar)\", inputType:\"password\", isRequired:true, startWithNewLine:false,\n            validators:[{ type:\"expression\", expression:\"{password} = {password2}\", text:\"Parolalar eşleşmiyor.\" }] }\n        ]\n      };\n\n      survey = new Survey.Model(surveyJson);\n      $(\"#formHost\").Survey({ model: survey });\n\n      survey.onValueChanged.add((s,opt)=>{\n        if(opt.name===\"password\"){\n          const lbl=document.getElementById(\"pwLabel\");\n          if(lbl){ const info=pwLabel(scorePassword(opt.value||\"\"));\n            lbl.textContent=info.text; lbl.style=info.cls; }\n        }\n        if(opt.name===\"username\" || opt.name===\"email\"){\n          checkUniquenessInline(opt.name, opt.value);\n        }\n      });\n\n      function getExistingSets(){\n        const arr = Array.isArray(window.__USERS__)? window.__USERS__: [];\n        return {\n          usernames: new Set(arr.map(u => norm(u.username))),\n          emails:    new Set(arr.map(u => norm(u.email)))\n        };\n      }\n\n      function checkUniquenessInline(fieldName, fieldValue){\n        const {usernames, emails} = getExistingSets();\n        const q = survey.getQuestionByName(fieldName);\n        if(!q) return;\n        try { q.clearErrors && q.clearErrors(); } catch(_) {}\n        if(fieldName === \"username\" && fieldValue && usernames.has(norm(fieldValue))){\n          q.addError(new Survey.CustomError(\"Bu kullanıcı adı zaten kayıtlı.\"));\n        }\n        if(fieldName === \"email\" && fieldValue && emails.has(norm(fieldValue))){\n          q.addError(new Survey.CustomError(\"Bu e-posta zaten kayıtlı.\"));\n        }\n      }\n\n      async function postJSON(url, data) {\n        const res = await fetch(url, {\n          method: \"POST\",\n          headers: {\"Content-Type\":\"application/json\"},\n          credentials: \"include\",\n          body: JSON.stringify(data)\n        });\n        if(!res.ok) throw new Error(res.statusText || \"İstek başarısız.\");\n        try { return await res.json(); } catch { return null; }\n      }\n\n      document.getElementById(\"btnSubmit\")?.addEventListener(\"click\", handleSubmit);\n      document.getElementById(\"btnReset\") ?.addEventListener(\"click\", handleReset);\n\n      async function handleSubmit(){\n        if (survey.hasErrors && survey.hasErrors(true)) return;\n        const payload = { ...survey.data };\n        [\"username\",\"displayName\",\"email\"].forEach(k=>{\n          if(payload[k]!=null) payload[k]=String(payload[k]).trim();\n        });\n\n        const {usernames, emails} = getExistingSets();\n        let dup = false;\n        if (usernames.has(norm(payload.username))) {\n          survey.getQuestionByName(\"username\")?.addError(new Survey.CustomError(\"Bu kullanıcı adı zaten kayıtlı.\"));\n          dup = true;\n        }\n        if (emails.has(norm(payload.email))) {\n          survey.getQuestionByName(\"email\")?.addError(new Survey.CustomError(\"Bu e-posta zaten kayıtlı.\"));\n          dup = true;\n        }\n        if (dup) return;\n\n        try{\n          await postJSON(\"/user-opt/add\", payload);\n        }catch(e){\n          survey.errors = [{ text: e?.message || \"Kayıt başarısız.\" }];\n          return;\n        }\n\n        const now = new Date();\n        const newRow = {\n          id: Math.random().toString(36).slice(2),\n          username: payload.username,\n          displayName: payload.displayName,\n          email: payload.email,\n          createdAtText: now.toLocaleString(),\n          roles: [\"user\"],\n          active: true\n        };\n        try { dt?.row.add(newRow).draw(false); } catch(_) {}\n        if (Array.isArray(window.__USERS__)) window.__USERS__.push(newRow);\n\n        handleReset();\n      }\n\n      function handleReset(){\n        try { survey.clearErrors && survey.clearErrors(); } catch(_) {}\n        survey.data = {};\n        const lbl=document.getElementById(\"pwLabel\");\n        if(lbl){ lbl.textContent=\"—\"; lbl.style=\"\"; }\n        setTimeout(()=>survey.getQuestionByName(\"username\")?.focus?.(true),0);\n      }\n    })();\n\n    const shortId = (id)=> (id? String(id).slice(0,10)+\"…\" : \"—\");\n\n    $(function(){\n      dt = $(\"#tblUsers\").DataTable({\n        order: [[4, \"desc\"]],\n        pageLength: 10,\n        data: Array.isArray(window.__USERS__) ? window.__USERS__ : [],\n        columns: [\n          { data:\"id\", render:(v)=>`<span class=\"text-muted\">${shortId(v)}</span>` },\n          { data:\"username\" },\n          { data:\"displayName\" },\n          { data:\"email\" },\n          { data:\"createdAtText\", defaultContent:\"—\",\n            render:(v)=>`<span class=\"text-muted small\">${v||\"—\"}</span>` },\n          { data:\"roles\", render:(r)=>{\n              const role = Array.isArray(r)&&r.includes(\"admin\") ? \"admin\" : \"user\";\n              const cls  = role==='admin' ? 'primary' : 'secondary';\n              return `<span class=\"badge text-bg-${cls} badge-role\">${role}</span>`;\n          }},\n          { data:\"active\", render:(v)=> v\n              ? '<span class=\"badge text-bg-success\">Aktif</span>'\n              : '<span class=\"badge text-bg-danger\">Pasif</span>' },\n          { data:null, className:\"text-end\", orderable:false, render:(_,__,row)=>{\n              const q=(k)=>encodeURIComponent(row[k]??\"\");\n              const isActive=!!row.active;\n              const urlEdit=`/user-edit/${q('id')}`;\n              const btnClass=isActive?'btn-outline-danger':'btn-outline-success';\n              const icon=isActive?'bi-power':'bi-check2-circle';\n              const label=isActive?'Pasifleştir':'Aktifleştir';\n              return `\n                <a class=\"btn btn-sm btn-outline-primary me-1\" href=\"${urlEdit}\">\n                  <i class=\"bi bi-pencil-square\"></i> Düzenle\n                </a>\n                <button class=\"btn btn-sm ${btnClass} me-1 btn-toggle\" data-id=\"${q('id')}\" data-active=\"${isActive}\">\n                  <i class=\"bi ${icon}\"></i> ${label}\n                </button>`;\n          }}\n        ]\n      });\n    });\n  </script>\n\n  <script src=\"/js/bootstrap.bundle.min.js\"></script>\n</body>\n\n</html>",
        "output": "str",
        "x": 1180,
        "y": 1060,
        "wires": [
            [
                "ec5abb8df0da65db"
            ]
        ]
    },
    {
        "id": "ec5abb8df0da65db",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1330,
        "y": 1060,
        "wires": []
    },
    {
        "id": "4801fcc29ebde45c",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.user.find()",
        "func": "\nmsg.payload = {}; // Tüm kullanıcıları bulmak için boş sorgu\nmsg.sort = { \"stamp.createdAt\": -1 }; // Oluşturulma tarihine göre tersten sırala\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1060,
        "wires": [
            [
                "f99da836ba8f456d"
            ]
        ]
    },
    {
        "id": "4ca887471ba0d4a5",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/user-list",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "608bec346261cb04"
            ]
        ]
    },
    {
        "id": "cecc1be4c4bb0aa4",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/user-opt/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1220,
        "wires": [
            [
                "8a33b0e666b5995f"
            ]
        ]
    },
    {
        "id": "97440a5695968cc4",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.user.opt()",
        "func": "const type = msg.req?.params?.type ?? \"\";\nmsg.formData = msg.payload; \n\nif (type === \"add\") {\n  const now = Date.now();\n  const userDoc = {\n    username: (msg.formData.username || \"\").trim(),\n    password: (msg.formData.password || \"\").trim(),\n    displayName: (msg.formData.displayName || \"\").trim(),\n    email: (msg.formData.email || \"\").trim(),\n    roles: [\"user\"],\n    active: true,\n    createdAt: now,\n    order: now,\n    stamp: {\n      createdAt: now,\n      ip: msg.req?.ip,\n      username: (msg.formData.username || \"\").trim(),\n      email: (msg.formData.email || \"\").trim()\n    },\n    dateTime: new Date(now).toLocaleString(\"tr-TR\", { hour12: false })\n  };\n  msg.payload = userDoc;\n  return [msg, null];\n}\n\n// Sorunlu \"if (id.length === 48)\" satırı kaldırılmış, sadeleştirilmiş kod\nconst id = String(msg.formData.id || \"\");\n\nlet query;\nif (!id) {\n    query = { _id: \"__NEVER_FIND_THIS__\" };\n} else {\n    // \"Düzenle\" akışında çalıştığı kanıtlanmış olan güvenilir sorgu yöntemi kullanılıyor\n    query = {\n        $expr: {\n            $eq: [ { $toString: \"$_id\" }, id ]\n        }\n    };\n}\n\nmsg.payload = query;\nreturn [null, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1260,
        "wires": [
            [
                "0d8a639157364107"
            ],
            [
                "0c8fb0b08f44164f"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "7083b2826db710fa",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "validation",
        "func": "/***********************\n * Admin Validation v2\n * - /user-opt/:type  (POST)\n *   type ∈ { add, activate, deactivate }\n * - Cache KULLANMAZ → varlık kontrolünü DB bir sonraki nodda yapar.\n ***********************/\nconst BAD_REQ = 400;\n\nfunction redirect(path, flashType, flashMsg) {\n    msg.flash = { type: flashType || \"danger\", text: flashMsg || \"\" };\n    msg.statusCode = 302;\n    msg.headers = msg.headers || {};\n    msg.headers.Location = path || \"/user-list\";\n    return msg;\n}\n\nfunction fail(message, fieldErrors, toPath) {\n    msg.valid = false;\n    msg.errors = fieldErrors || {};\n    return redirect(toPath || \"/user-list\", \"danger\", message || \"İstek doğrulanamadı.\");\n}\n\nfunction ok(payload) {\n    msg.valid = true;\n    if (payload) msg.payload = payload;\n    return msg;\n}\n\n// ---- request kaynakları\nconst params = (msg.req && msg.req.params) || {};\nconst body   = (msg.payload && typeof msg.payload === \"object\") ? msg.payload : {};\nconst type   = String(params.type || body.type || \"\").trim().toLowerCase();\n\n// Küçük yardımcılar\nconst isEmail = (e) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(String(e || \"\").trim());\nconst notEmpty = (s) => String(s || \"\").trim().length > 0;\n\n// ---- router\nif (!type) {\n    return fail(\"Geçersiz istek: işlem türü yok.\", { type: \"Zorunlu.\" }, \"/user-list\");\n}\n\nif (type === \"activate\" || type === \"deactivate\") {\n    // Sadece ID’nin geldiğini doğrula; varlık kontrolünü MongoDB findOne yapacak\n    const id = String(body.id || \"\").trim();\n    if (!id) {\n        return fail(\"Geçersiz istek: id yok.\", { id: \"Zorunlu.\" }, \"/user-list\");\n    }\n    // Opsiyonel: 24 hex veya string id kabul edelim\n    const looksLikeObjectId = /^[a-fA-F0-9]{24}$/.test(id);\n    if (!looksLikeObjectId && id.length < 8) {\n        return fail(\"Geçersiz id.\", { id: \"Biçim geçersiz.\" }, \"/user-list\");\n    }\n\n    // Downstream için temiz bir payload bırak\n    msg.payload = { id, type };\n    return ok();\n}\n\nif (type === \"add\") {\n    const username = String(body.username || body.kullaniciAdi || \"\").trim();\n    const displayName = String(body.displayName || body.fullname || body.isim || \"\").trim();\n    const email    = String(body.email || body.eposta || \"\").trim();\n    const password = String(body.password || body.parola || \"\").trim();\n\n    const errors = {};\n    if (!notEmpty(username)) errors.username = \"Kullanıcı adı zorunlu.\";\n    if (!notEmpty(displayName)) errors.displayName = \"İsim soyisim zorunlu.\";\n    if (!isEmail(email))     errors.email    = \"E-posta biçimi hatalı.\";\n    if (password.length < 8) errors.password = \"Parola en az 8 karakter olmalı.\";\n\n    if (Object.keys(errors).length) {\n        return fail(\"Eksik veya hatalı alanlar var.\", errors, \"/user-list\");\n    }\n\n    // Downstream insert için normalize payload\n    msg.payload = { type, username, displayName, email, password };\n    return ok();\n}\n\n// İleride başka türler gelirse:\nreturn fail(`Desteklenmeyen işlem: ${type}`, { type: \"Bilinmiyor.\" }, \"/user-list\");\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1220,
        "wires": [
            [
                "d9c5fb2fbf3b0189"
            ],
            [
                "7817b550669eb8a2"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "126ead5b72b171f3",
        "type": "link in",
        "z": "651af9bb9a46e4b0",
        "name": "link in 4",
        "links": [
            "68b150d9072e014b",
            "18d52f7ab428eef7",
            "14819198696d743b"
        ],
        "x": 565,
        "y": 1020,
        "wires": [
            [
                "4801fcc29ebde45c"
            ]
        ]
    },
    {
        "id": "7817b550669eb8a2",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "8a6d783f9fac6a74"
        ],
        "x": 815,
        "y": 1260,
        "wires": []
    },
    {
        "id": "68b150d9072e014b",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "126ead5b72b171f3"
        ],
        "x": 1765,
        "y": 1360,
        "wires": []
    },
    {
        "id": "158f6cdbc523a790",
        "type": "bcrypt",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "action": "encrypt",
        "field": "payload.password",
        "hash": "payload",
        "target": "payload.password",
        "assignment": "assign",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 1190,
        "y": 1220,
        "wires": [
            [
                "97440a5695968cc4"
            ]
        ]
    },
    {
        "id": "314b400985be68da",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/user-edit/:id",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1420,
        "wires": [
            [
                "333ba1b4a05495f7"
            ]
        ]
    },
    {
        "id": "7c83cb4a19389f12",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.user.findOne()",
        "func": "const id = String(msg.req.params.id || '');\n\nmsg.payload = {\n  $expr: { $eq: [ { $toString: '$_id' }, id ] }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1420,
        "wires": [
            [
                "049f6c44dff76dd4"
            ]
        ],
        "outputLabels": [
            "Success"
        ]
    },
    {
        "id": "1251f822538e5dd8",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Kullanıcı Düzenle</title>\n\n  <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\" />\n  <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" />\n\n  <script src=\"https://unpkg.com/jquery\"></script>\n  <script src=\"https://unpkg.com/survey-jquery/survey.jquery.min.js\"></script>\n  <link href=\"https://unpkg.com/survey-jquery/modern.min.css\" rel=\"stylesheet\" />\n\n  <style>\n    .card {\n      border-radius: .75rem;\n    }\n\n    .sv-root-modern .sv-container {\n      padding: 0;\n    }\n\n    .sv-root-modern .sv-question {\n      margin-bottom: .6rem;\n    }\n\n    .sv-root-modern .sv-title {\n      margin-bottom: .25rem;\n      font-size: .95rem;\n    }\n\n    .sv-root-modern .sv-input,\n    .sv-root-modern input[type=\"text\"].sv-text,\n    .sv-root-modern input[type=\"password\"].sv-text {\n      padding: .4rem .55rem;\n    }\n\n    .sv-question__content[style*=\"50%\"] {\n      padding-right: .5rem;\n    }\n\n    .sv-row .sv-question__content:last-child {\n      padding-right: 0;\n    }\n\n    .form-inline-title {\n      font-size: .95rem;\n      color: #6c757d;\n    }\n\n    /* Parola gücü etiketi */\n    .pw-strength {\n      font-size: .9rem;\n      margin-top: .25rem;\n      display: none;\n    }\n\n    /* Footer butonlarını sağa topla + yakın dursun */\n    .sv-footer-right-tight {\n      display: flex !important;\n      justify-content: flex-end !important;\n      align-items: center !important;\n      gap: .5rem !important;\n    }\n\n    /* SIRAYI ZORLA: Vazgeç solda, Güncelle sağda */\n    .sv-footer__cancel-btn {\n      order: 1 !important;\n    }\n\n    .sv-footer__complete-btn,\n    .sd-navigation__complete-btn {\n      order: 2 !important;\n    }\n  </style>\n</head>\n\n<body class=\"bg-light\">\n  <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n    <div class=\"container d-flex align-items-center\">\n      <span class=\"navbar-text fw-semibold fs-4\">Admin Panel — Düzenleme Sayfası</span>\n      <a class=\"ms-auto nav-link fw-semibold fs-5\" href=\"/user-list\">Admin Panel</a>\n    </div>\n  </nav>\n\n  <main class=\"container\">\n    <div id=\"init\" data-id=\"{{payload._id}}\" data-username=\"{{payload.username}}\" data-email=\"{{payload.email}}\"\n      data-displayname=\"{{payload.displayName}}\"\n      data-active=\"{{#payload.active}}true{{/payload.active}}{{^payload.active}}false{{/payload.active}}\"\n      data-roles='[{{#payload.roles}}\"{{.}}\",{{/payload.roles}}]'>\n    </div>\n\n    <div class=\"card shadow-sm\">\n      <div class=\"card-body\">\n        <div class=\"d-flex align-items-center mb-2\">\n          <h6 class=\"form-inline-title m-0\">Kullanıcı Düzenle</h6>\n        </div>\n        <div id=\"surveyContainer\"></div>\n      </div>\n    </div>\n\n    <footer class=\"text-center text-muted small my-4\">© {{year}} Admin</footer>\n  </main>\n\n  <script>\n    Survey.StylesManager.applyTheme(\"modern\");\n  \n    async function postJSON(url, data){\n      const r = await fetch(url, {\n        method:\"POST\",\n        headers:{ \"Content-Type\":\"application/json; charset=utf-8\" },\n        credentials:\"same-origin\",\n        body: JSON.stringify(data)\n      });\n      let j = {};\n      try { j = await r.json(); } catch(_) {}\n      if(!r.ok || j.ok === false){\n        const e = new Error(j?.message || \"Güncelleme başarısız.\");\n        e.fields = j?.errors || null;\n        throw e;\n      }\n      return j;\n    }\n  \n    function readInit(){\n      const el=document.getElementById(\"init\");\n      let roles=[]; try{roles=JSON.parse((el.dataset.roles||\"[]\").replace(/,\\s*]/,\"]\"));}catch{}\n      return {\n        id:el.dataset.id||\"\", username:el.dataset.username||\"\", email:el.dataset.email||\"\",\n        displayName:el.dataset.displayname||\"\", active:(el.dataset.active===\"true\"), roles\n      };\n    }\n  \n    {{#user.isAdmin}} const isViewerAdmin = true; {{/user.isAdmin}}\n    {{^user.isAdmin}} const isViewerAdmin = false; {{/user.isAdmin}}\n  \n    const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^A-Za-z0-9]).{8,64}$/;\n  \n    function scorePassword(p){ let s=0; if(!p) return 0;\n      s += Math.min(6, new Set(p).size);\n      s += /[a-z]/.test(p); s += /[A-Z]/.test(p);\n      s += /\\d/.test(p);    s += /[^A-Za-z0-9]/.test(p);\n      s += Math.min(4, Math.floor(p.length/3));\n      return s;\n    }\n    function pwLabel(sc){\n      if(sc>=9) return {text:\"çok güçlü\", cls:\"text-success\"};\n      if(sc>=7) return {text:\"güçlü\",      cls:\"text-success\"};\n      if(sc>=5) return {text:\"orta\",       cls:\"text-warning\"};\n      return          {text:\"zayıf\",       cls:\"text-danger\"};\n    }\n  \n    const formJson = {\n      showTitle:false, showCompletedPage:false, showQuestionNumbers:\"off\",\n      completeText:\"Güncelle\", widthMode:\"responsive\",\n      elements:[\n        { type:\"text\", name:\"id\", visible:false },\n  \n        { type:\"text\", name:\"username\", title:\"Kullanıcı adı\", readOnly:true,  width:\"50%\" },\n        { type:\"text\", name:\"email\",    title:\"E-posta\",      readOnly:true,  width:\"50%\", startWithNewLine:false },\n  \n        { type:\"text\", name:\"displayName\", title:\"Ad Soyad\", isRequired:true, minLength:2, maxLength:64 },\n  \n        { type:\"text\", name:\"password\",  title:\"Yeni şifre (opsiyonel)\", inputType:\"password\",\n          width:\"50%\",\n          validators:[{type:\"regex\", regex:PWD_REGEX.source, text:\"En az 8 karakter; küçük+BÜYÜK+rakam+özel karakter olmalı.\"}] },\n  \n        { type:\"text\", name:\"password2\", title:\"Yeni şifre (tekrar)\", inputType:\"password\",\n          width:\"50%\", startWithNewLine:false, visibleIf:\"{password} notempty\",\n          validators:[{ type:\"expression\", expression:\"{password} = {password2}\", text:\"Parolalar eşleşmiyor.\" }] },\n  \n        { type:\"radiogroup\", name:\"active\", title:\"Durum\", width:\"50%\",\n          choices:[ {value:true, text:\"Aktif\"}, {value:false, text:\"Pasif\"} ],\n          colCount: 2, isRequired:true },\n  \n        { type:\"boolean\", name:\"isAdminFlag\", title:\"Admin yetkisi ver\", width:\"50%\", startWithNewLine:false,\n          visible: isViewerAdmin === true, valueTrue: true, valueFalse: false, labelTrue: \"Evet\", labelFalse: \"Hayır\" }\n      ]\n    };\n  \n    const survey = new Survey.Model(formJson);\n  \n    /* ---- Parola gücü etiketi ---- */\n    function ensurePwMeter(container){\n      if (!container) return null;\n      let el = container.querySelector('#pwStrength');\n      if (!el) {\n        el = document.createElement('div');\n        el.id = 'pwStrength';\n        el.className = 'pw-strength text-muted';\n        el.innerHTML = 'Parola gücü: <span class=\"pwLabel\">—</span>';\n        container.appendChild(el);\n      }\n      return el;\n    }\n    function updatePwStrength(){\n      const container = document.querySelector('[data-question=\"password\"] .sv-question__content') ||\n                        document.querySelector('.sd-question[data-name=\"password\"] .sv-question__content') ||\n                        document.querySelector('.sv-question[data-name=\"password\"] .sv-question__content');\n      const meter = ensurePwMeter(container);\n      if (!meter) return;\n  \n      const pw = String(survey.getValue('password') || '');\n      const span = meter.querySelector('.pwLabel');\n      if (!pw) { meter.style.display = 'none'; return; }\n      const info = pwLabel(scorePassword(pw));\n      meter.style.display = 'block';\n      if (span) { span.textContent = info.text; span.className = 'pwLabel ' + info.cls; }\n    }\n    survey.onAfterRenderQuestion.add((s, opt)=>{\n      if (opt.question.name === 'password') {\n        const container = opt.htmlElement.querySelector('.sv-question__content');\n        ensurePwMeter(container);\n        updatePwStrength();\n      }\n    });\n    survey.onValueChanged.add((s, o)=>{\n      if (o.name === 'password') updatePwStrength();\n    });\n  \n    // Submit\n    survey.onCompleting.add(function(sender, options){\n      options.allow = false;\n      const f = sender.data || {};\n      const pwd  = (f.password  || \"\").trim();\n      const pwd2 = (f.password2 || \"\").trim();\n\n      // 🔒 Şifre kontrolleri\n      if (pwd.length > 0) {\n        if (!PWD_REGEX.test(pwd)) {\n          sender.getQuestionByName(\"password\")?.addError(new Survey.CustomError(\"Şifre karmaşıklığı yetersiz.\"));\n          sender.doComplete(false); return;\n        }\n        if (pwd !== pwd2) {\n          sender.getQuestionByName(\"password2\")?.addError(new Survey.CustomError(\"Parolalar eşleşmiyor.\"));\n          sender.doComplete(false); return;\n        }\n      }\n\n      // ❗ Değişiklik yapılmadıysa yönlendirme yok\n      if (!sender.isModified) {\n        sender.errors = [{ text: \"Herhangi bir değişiklik yapılmadı.\" }];\n        sender.doComplete(false);\n        return;\n      }\n\n      const isAdminChecked = (f.isAdminFlag===true || f.isAdminFlag===\"true\" || f.isAdminFlag===1 || f.isAdminFlag===\"1\");\n      const payload = {\n        type: \"update\",\n        id: f.id,\n        displayName: (f.displayName || \"\").trim(),\n        isAdmin_present: isViewerAdmin ? \"1\" : undefined,\n        isAdmin: (isAdminChecked && isViewerAdmin) ? \"true\" : \"false\",\n        active: (String(f.active) === \"true\" || f.active === true) ? \"true\" : \"false\"\n      };\n      if (pwd.length > 0) payload.password = pwd;\n\n      (async () => {\n        try {\n          await postJSON(\"/user-opt/update\", payload);\n          // Başarılı → listeye dön\n          location.assign(`/user-list?updated=${encodeURIComponent(payload.id)}`);\n        } catch (e) {\n          if (e.fields) {\n            for (const [name, msg] of Object.entries(e.fields)) {\n              survey.getQuestionByName(name)?.addError(new Survey.CustomError(String(msg)));\n            }\n          }\n          survey.errors = [{ text: e.message || \"Güncelleme başarısız.\" }];\n          survey.doComplete(false);\n        }\n      })();\n    });\n  \n    // Render + init\n    $(function(){\n      const init = readInit();\n      const hasAdmin = Array.isArray(init.roles) && init.roles.map(String).includes(\"admin\");\n      survey.data = {\n        id: init.id,\n        username: init.username,\n        email: init.email,\n        displayName: init.displayName || \"\",\n        active: !!init.active,\n        isAdminFlag: !!hasAdmin\n      };\n      $(\"#surveyContainer\").Survey({ model: survey });\n      setTimeout(updatePwStrength, 0);\n    });\n  \n    /* --- VAZGEÇ: Güncelle ile aynı şekil, solda; Güncelle sağda --- */\n    (function attachCancelButton(){\n      function inject(root){\n        if (!root) return;\n\n        const completeBtn = root.querySelector(\n          'button.sv-footer__complete-btn, input.sv-footer__complete-btn, .sd-btn.sd-navigation__complete-btn'\n        );\n        if (!completeBtn) return;\n\n        const parent = completeBtn.parentElement || root;\n\n        // Kapsayıcıyı sağa hizalı flex yap ve araya küçük boşluk koy\n        parent.style.display = 'flex';\n        parent.style.justifyContent = 'flex-end';\n        parent.style.alignItems = 'center';\n        parent.style.gap = '8px';\n\n        // Zaten eklenmişse çık\n        if (parent.querySelector('.sv-footer__cancel-btn')) return;\n\n        // Vazgeç butonu\n        const btn = document.createElement('button');\n        btn.type = 'button';\n        btn.textContent = 'Vazgeç';\n\n        // Şekli birebir yapmak için COMPLETE sınıflarını kopyala\n        btn.className = (completeBtn.className + ' sv-footer__cancel-btn').trim();\n\n        // Rengi kırmızı yap\n        btn.style.backgroundColor = '#dc3545';\n        btn.style.borderColor = '#dc3545';\n\n        // SIRAYI ZORLA: Vazgeç solda (order 1), Güncelle sağda (order 2)\n        btn.style.order = '1';\n        completeBtn.style.order = '2';\n\n        // Olası margin auto vb. etkilerini sıfırla\n        btn.style.margin = '0';\n        completeBtn.style.margin = '0';\n\n        btn.onclick = () => { location.href = '/user-list'; };\n\n        // Hemen yanına ekle (sıra zaten order ile garanti)\n        parent.insertBefore(btn, completeBtn);\n      }\n\n      survey.onAfterRenderSurvey.add((s, opt) => inject(opt.htmlElement));\n      survey.onAfterRenderPage.add((s, opt) => inject(opt.htmlElement));\n      [0,150,400].forEach(t => setTimeout(() => inject(document), t));\n\n      const mo = new MutationObserver(() => inject(document));\n      mo.observe(document.body, { childList:true, subtree:true });\n      setTimeout(() => mo.disconnect(), 2500);\n    })();\n  </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 1260,
        "y": 1400,
        "wires": [
            [
                "f8653907910821de"
            ]
        ]
    },
    {
        "id": "f8653907910821de",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 1400,
        "wires": []
    },
    {
        "id": "18d52f7ab428eef7",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "126ead5b72b171f3"
        ],
        "x": 1215,
        "y": 1460,
        "wires": []
    },
    {
        "id": "fc9042b8d1523bc0",
        "type": "switch",
        "z": "651af9bb9a46e4b0",
        "name": "hash-or-skip",
        "property": "payload.password",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$exists(payload.password) and $length($trim(payload.password)) > 0",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 1260,
        "wires": [
            [
                "158f6cdbc523a790"
            ],
            [
                "97440a5695968cc4"
            ]
        ]
    },
    {
        "id": "4aeed1b5c7644171",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/login",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1720,
        "wires": [
            [
                "8c7785adb445f91b"
            ]
        ]
    },
    {
        "id": "8c7785adb445f91b",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Giriş Yap</title>\n\n  <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\" />\n  <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" />\n\n  <script src=\"https://unpkg.com/jquery\"></script>\n  <script src=\"https://unpkg.com/survey-jquery/survey.jquery.min.js\"></script>\n  <link href=\"https://unpkg.com/survey-jquery/modern.min.css\" rel=\"stylesheet\" />\n</head>\n<body class=\"bg-light\">\n  <div class=\"container mt-5\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-6 col-lg-5\">\n        <div class=\"card shadow-sm\">\n          <div class=\"card-body\">\n            <h5 class=\"mb-3\">Giriş Yap</h5>\n\n            {{#error}} <div class=\"alert alert-danger\">{{message}}</div> {{/error}}\n\n            <div id=\"surveyContainer\"></div>\n\n            <div class=\"text-center mt-3\">\n              Hesabın yok mu? <a href=\"/register\">Kayıt ol</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<script>\n  Survey.StylesManager.applyTheme(\"modern\");\n\n  const surveyJson = {\n    showTitle: false,\n    showCompletedPage: false,\n    showQuestionNumbers: \"off\",\n    completeText: \"Giriş Yap\",\n    widthMode: \"responsive\",\n    elements: [\n      { type:\"text\", name:\"identifier\", title:\"Kullanıcı adı veya E-posta\", isRequired:true, minLength:3,\n        placeholder:\"Kullanıcı Adı veya mail@ornek.com\" },\n      { type:\"text\", name:\"password\", title:\"Şifre\", inputType:\"password\", isRequired:true, minLength:8 }\n    ]\n  };\n\n  const survey = new Survey.Model(surveyJson);\n  let submitting = false;\n\n  survey.onCompleting.add(async (sender, options) => {\n    options.allowComplete = false;\n    if (submitting) return;\n    submitting = true;\n\n    // temizle\n    sender.errors = [];\n    (sender.getAllQuestions?.()||[]).forEach(q => q?.clearErrors?.());\n    sender.isReadOnly = true;\n\n    const payload = sender.data;\n    const url = \"/login\" + (window.location.search || \"\");\n\n    try {\n      const res = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\":\"application/json; charset=utf-8\", \"Accept\":\"application/json\", \"X-Requested-With\":\"XMLHttpRequest\" },\n        credentials: \"same-origin\",\n        body: JSON.stringify(payload)\n      });\n\n      if (res.ok) {\n        const qs = new URLSearchParams(window.location.search);\n        let next = qs.get(\"next\") || \"/\";\n        try { const data = await res.clone().json(); if (data?.next) next = data.next; } catch(_){}\n        if (res.redirected && res.url) window.location.assign(res.url); else window.location.assign(next);\n        return;\n      }\n\n      let message = \"Kullanıcı adı/e-posta veya şifre hatalı.\";\n      let fieldErrors = null;\n      try { const err = await res.clone().json(); message = err?.message || message; fieldErrors = err?.errors||null; } catch(_){}\n\n      const pwdQ = sender.getQuestionByName(\"password\");\n      if (pwdQ) {\n        (\"value\" in pwdQ) ? (pwdQ.value = \"\") : sender.setValue(\"password\",\"\");\n        pwdQ.addError?.(new Survey.CustomError(fieldErrors?.password || \"Hatalı şifre girdiniz.\"));\n        setTimeout(()=>pwdQ.focus?.(),0);\n      }\n\n      if (fieldErrors) {\n        Object.entries(fieldErrors).forEach(([name, text])=>{\n          if (name===\"password\") return;\n          const q = sender.getQuestionByName(name);\n          q?.addError?.(new Survey.CustomError(String(text)));\n        });\n      }\n\n      sender.errors = [{ text: message }];\n\n    } catch (e) {\n      sender.errors = [{ text: \"Sunucuya ulaşılamadı. Lütfen tekrar deneyin.\" }];\n      console.error(e);\n    } finally {\n      submitting = false;\n      sender.isReadOnly = false;\n    }\n  });\n\n  $(function(){ $(\"#surveyContainer\").Survey({ model: survey }); });\n</script>\n</body>\n</html>\n",
        "output": "str",
        "x": 440,
        "y": 1720,
        "wires": [
            [
                "0f88d4f9899d9885"
            ]
        ]
    },
    {
        "id": "0f88d4f9899d9885",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 1720,
        "wires": []
    },
    {
        "id": "4ec111ca15940ef0",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/logout",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1960,
        "wires": [
            [
                "898343caa6e3f92c"
            ]
        ]
    },
    {
        "id": "78a062b04551d6e3",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/login"
        },
        "x": 760,
        "y": 1960,
        "wires": []
    },
    {
        "id": "0f7d31954dc9a188",
        "type": "jwt sign",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "alg": "HS256",
        "exp": "604800000",
        "jwkurl": "",
        "jwkkid": "",
        "secret": "147852369",
        "key": "",
        "signvar": "payload",
        "storetoken": "payload",
        "x": 1180,
        "y": 1800,
        "wires": [
            [
                "f59872569465a1b9"
            ]
        ]
    },
    {
        "id": "ad4d0de03b852821",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/login",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1820,
        "wires": [
            [
                "bcf4da036ac5b43b"
            ]
        ]
    },
    {
        "id": "e8c57f2b754850cc",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "passControl",
        "func": "if (!msg.match) {\n    msg.payload = { success: false, message: \"Kullanıcı adı/e-posta veya şifre hatalı\" };\n    msg.statusCode = 400; // HTTP 400 Bad Request\n    return [null, msg];   // Hata çıkışı\n}\n\n// Kullanıcı bilgilerini JWT payload için hazırla\nmsg.payload = {\n    username: msg.user.username,\n    email: msg.user.email,\n    displayName: msg.user.displayName,\n    roles: msg.user.roles,\n    ip: msg.req.ip\n};\n\n// Sonrasında JWT Sign node token'ı üretecek ve msg.token içine yazacak.\n// Biz de redirect adresini şimdiden hazırlıyoruz.\nconst next = msg.req && msg.req.query && msg.req.query.next;\nmsg.nextUrl = next && /^\\/.*/.test(next) ? next : \"/\";\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1800,
        "wires": [
            [
                "0f7d31954dc9a188"
            ],
            [
                "2b2157abba6313fe"
            ]
        ]
    },
    {
        "id": "bcf4da036ac5b43b",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "findUser",
        "func": "const p = msg.payload || {};\nconst identifier = (p.identifier || p.username || p.email || '').toString().trim();\nconst password   = (p.password || '').toString();\n\nmsg.formData = { identifier, password };\n\nif (!identifier || !password) {\n  msg.payload = { _id: \"__never__\" };\n  return msg;\n}\n\nmsg.payload = {\n  $and: [\n    { active: true },\n    { $or: [ { username: identifier }, { email: identifier } ] }\n  ]\n};\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 340,
        "y": 1820,
        "wires": [
            [
                "a1e33ed13fcde42a"
            ]
        ]
    },
    {
        "id": "ed58fab8df11b349",
        "type": "bcrypt",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "action": "verify",
        "field": "formData.password",
        "hash": "user.password",
        "target": "payload",
        "assignment": "replace",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 840,
        "y": 1800,
        "wires": [
            [
                "e8c57f2b754850cc"
            ]
        ]
    },
    {
        "id": "86740e96f67da72b",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 1520,
        "y": 1800,
        "wires": []
    },
    {
        "id": "6d8042d6f0a12ac0",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 270,
        "y": 260,
        "wires": [
            [
                "9e7745c31875caa6"
            ]
        ]
    },
    {
        "id": "472f3a2d0f361a1d",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/register",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2060,
        "wires": [
            [
                "8637acb46830d49a"
            ]
        ]
    },
    {
        "id": "84be4beb553cbe26",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 2060,
        "wires": []
    },
    {
        "id": "8637acb46830d49a",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Kayıt Ol</title>\n\n  <!-- Bootstrap -->\n  <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\" />\n  <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" />\n\n  <!-- SurveyJS (jQuery sürümü) -->\n  <script src=\"https://unpkg.com/jquery\"></script>\n  <script src=\"https://unpkg.com/survey-jquery/survey.jquery.min.js\"></script>\n  <link href=\"https://unpkg.com/survey-jquery/modern.min.css\" rel=\"stylesheet\" />\n\n  <style>\n    .card { border-radius: .75rem; }\n    .card-body { padding: 1.5rem 1.5rem .75rem; }\n    .sv-root-modern .sv-container { padding: 0; }\n    .sv-root-modern .sv-question { margin-bottom: .5rem; }\n    .sv-root-modern .sv-title { margin-bottom: .25rem; font-size: 1rem; }\n    .sv-root-modern .sv-input,\n    .sv-root-modern input[type=\"text\"].sv-text,\n    .sv-root-modern input[type=\"password\"].sv-text { padding: .375rem .5rem; }\n    .pw-label { font-size: .9rem; }\n\n    /* ========================\n       BUTON STİLLERİ (KESİN)\n       ======================== */\n\n    /* ActionBar: TEMİZLE (beyaz/outline) */\n    .sv-action-bar .sv-action-bar-item[data-name=\"act-reset\"] .sv-btn {\n      background-color: #fff !important;\n      color: #6c757d !important;                  /* gri yazı */\n      border: 1px solid #ced4da !important;\n    }\n    .sv-action-bar .sv-action-bar-item[data-name=\"act-reset\"] .sv-btn:hover {\n      background-color: #f8f9fa !important;\n      border-color: #adb5bd !important;\n    }\n\n    /* ActionBar: KAYIT OL (primary) */\n    .sv-action-bar .sv-action-bar-item[data-name=\"act-submit\"] .sv-btn {\n      background-color: var(--sjs-primary-backcolor, #0d6efd) !important;\n      color: var(--sjs-primary-forecolor, #fff) !important;\n      border: 1px solid var(--sjs-primary-backcolor, #0d6efd) !important;\n    }\n    .sv-action-bar .sv-action-bar-item[data-name=\"act-submit\"] .sv-btn:hover {\n      background-color: var(--sjs-primary-backcolor-dark, #0b5ed7) !important;\n      border-color: var(--sjs-primary-backcolor-dark, #0b5ed7) !important;\n    }\n\n    /* Fallback HTML: aynı görünümler */\n    #btnReset {\n      background-color: #fff !important;\n      color: #6c757d !important;\n      border: 1px solid #ced4da !important;\n    }\n    #btnReset:hover {\n      background-color: #f8f9fa !important;\n      border-color: #adb5bd !important;\n    }\n    #btnSubmit {\n      background-color: var(--sjs-primary-backcolor, #0d6efd) !important;\n      color: var(--sjs-primary-forecolor, #fff) !important;\n      border: 1px solid var(--sjs-primary-backcolor, #0d6efd) !important;\n    }\n    #btnSubmit:hover {\n      background-color: var(--sjs-primary-backcolor-dark, #0b5ed7) !important;\n      border-color: var(--sjs-primary-backcolor-dark, #0b5ed7) !important;\n    }\n  </style>\n</head>\n<body class=\"bg-light\">\n  <div class=\"container mt-4 pb-5\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-10 col-lg-8\">\n        <div class=\"card shadow-sm\">\n          <div class=\"card-body\">\n            <h5 class=\"mb-3\">Kayıt Ol</h5>\n\n            {{#error}} <div class=\"alert alert-danger\">{{message}}</div> {{/error}}\n\n            <!-- SurveyJS form alanı -->\n            <div id=\"surveyContainer\"></div>\n\n            <!-- Alt sıra: solda parola gücü, sağda (Survey) butonlar -->\n            <div class=\"d-flex align-items-center justify-content-between mt-2\">\n              <div class=\"text-muted pw-label\">Parola gücü: <span id=\"pwLabel\">—</span></div>\n              <div id=\"svBtnsHost\"></div>\n            </div>\n\n            <div class=\"text-center mt-3\">\n              Zaten hesabın var mı? <a href=\"/login\">Giriş yap</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<script>\n  Survey.StylesManager.applyTheme(\"modern\");\n\n  // --- Parola politikası ve skorlayıcı ---\n  const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^A-Za-z0-9]).{8,64}$/;\n  function scorePassword(p){ let s=0; if(!p) return 0;\n    s += Math.min(6, new Set(p).size);\n    s += /[a-z]/.test(p); s += /[A-Z]/.test(p);\n    s += /\\d/.test(p);    s += /[^A-Za-z0-9]/.test(p);\n    s += Math.min(4, Math.floor(p.length/3));\n    return s;\n  }\n  function pwLabel(sc){\n    if(sc>=9) return {text:\"çok güçlü\", cls:\"color:#198754\"};\n    if(sc>=7) return {text:\"güçlü\",      cls:\"color:#198754\"};\n    if(sc>=5) return {text:\"orta\",       cls:\"color:#fd7e14\"};\n    return          {text:\"zayıf\",       cls:\"color:#dc3545\"};\n  }\n\n  // --- Form şeması (Survey butonları kapalı) ---\n  const surveyJson = {\n    showQuestionNumbers: \"off\",\n    questionTitleLocation: \"left\",\n    widthMode: \"responsive\",\n    showNavigationButtons: \"none\",\n    showCompletedPage: false,\n    elements: [\n      { type:\"text\", name:\"username\", title:\"Kullanıcı Adı \", isRequired:true,\n        minLength:3, placeholder:\"(3–32, harf/rakam/._)\", width:\"45%\" },\n      { type:\"text\", name:\"displayName\", title:\"Ad Soyad \", isRequired:true,\n        startWithNewLine:false, width:\"35%\",\n        validators:[{ type:\"regex\", regex:\"^(?=.*\\\\S).{2,}$\", text:\"Lütfen ad soyad girin.\" }] },\n      { type:\"text\", name:\"email\", title:\"E-posta \", inputType:\"email\", isRequired:true,\n        startWithNewLine:false, placeholder:\"mail@ornek.com\",\n        validators:[{ type:\"email\", text:\"Geçerli bir e-posta girin.\" }] },\n\n      { type:\"text\", name:\"password\", title:\"Şifre \", inputType:\"password\", isRequired:true, minLength:8,\n        validators:[{ type:\"regex\", regex: PWD_REGEX.source,\n          text:\"En az 8 karakter; küçük+BÜYÜK+rakam+özel karakter olmalı.\" }],\n        description: \"Şifre ipucu: En az 8 karakter; küçük+BÜYÜK+rakam+özel karakter (!@#$%...) içermeli.\",\n  descriptionLocation: \"underInput\"  },\n\n      { type:\"text\", name:\"password2\", title:\"Şifre (tekrar) \", inputType:\"password\", isRequired:true,\n        startWithNewLine:false,\n        validators:[{ type:\"expression\", expression:\"{password} = {password2}\",\n          text:\"Parolalar eşleşmiyor.\" }] }\n    ]\n  };\n\n  const survey = new Survey.Model(surveyJson);\n\n  // Inline parola gücü\n  survey.onValueChanged.add((s,opt)=>{\n    if(opt.name===\"password\"){\n      const lbl=document.getElementById(\"pwLabel\");\n      if(lbl){ const info=pwLabel(scorePassword(opt.value||\"\"));\n        lbl.textContent=info.text; lbl.style=info.cls; }\n    }\n  });\n\n  // Uzak benzersizlik kontrolü (opsiyonel)\n  let uniqTimer=null;\n  survey.onValueChanged.add((s,opt)=>{\n    if(opt.name!==\"username\" && opt.name!==\"email\") return;\n    clearTimeout(uniqTimer);\n    uniqTimer = setTimeout(()=>remoteUniqueInline(opt.name), 350);\n  });\n\n  async function remoteUniqueInline(field){\n    const q = survey.getQuestionByName(field);\n    if(!q) return;\n    try { q.clearErrors && q.clearErrors(); } catch(_) {}\n    const val = String(survey.data?.[field]||\"\").trim();\n    if(!val) return;\n\n    const qs = new URLSearchParams();\n    if (field===\"username\") qs.set(\"username\", val);\n    if (field===\"email\")    qs.set(\"email\", val);\n    try{\n      const res = await fetch(\"/user-opt/check-unique?\"+qs.toString(), { credentials:\"same-origin\" });\n      if(!res.ok) return;\n      const data = await res.json(); // { username: true/false, email: true/false }\n      if (field===\"username\" && data.username === false) {\n        q.addError(new Survey.CustomError(\"Bu kullanıcı adı zaten kayıtlı.\"));\n      }\n      if (field===\"email\" && data.email === false) {\n        q.addError(new Survey.CustomError(\"Bu e-posta zaten kayıtlı.\"));\n      }\n    }catch{}\n  }\n\n  // Yardımcı: alan hatası yaz\n  function setFieldErrors(map){\n    if(!map) return;\n    for(const [name,msg] of Object.entries(map)){\n      const q = survey.getQuestionByName(name);\n      if(q) q.addError(new Survey.CustomError(String(msg)));\n    }\n  }\n\n  // POST helper\n  async function postJSON(url, data) {\n    const res = await fetch(url, {\n      method: \"POST\",\n      headers: { \"Content-Type\":\"application/json; charset=utf-8\", \"Accept\":\"application/json\" },\n      credentials: \"same-origin\",\n      body: JSON.stringify(data)\n    });\n    return res;\n  }\n\n  // Reset\n  function doReset(){\n    try { survey.clearErrors && survey.clearErrors(); } catch(_) {}\n    survey.data = {};\n    const lbl=document.getElementById(\"pwLabel\");\n    if(lbl){ lbl.textContent=\"—\"; lbl.style=\"\"; }\n    setTimeout(()=>survey.getQuestionByName(\"username\")?.focus?.(true),0);\n  }\n\n  // Kayıt gönderimi\n  async function onSubmit(){\n    if (survey.hasErrors && survey.hasErrors(true)) return;\n\n    const payload = { ...survey.data };\n    [\"username\",\"displayName\",\"email\"].forEach(k=>{\n      if(payload[k]!=null) payload[k]=String(payload[k]).trim();\n    });\n    delete payload.password2;\n\n    // Sunucu tarafı benzersizlik\n    try{\n      const checkQs = new URLSearchParams({ username: payload.username||\"\", email: payload.email||\"\" });\n      const chk = await fetch(\"/user-opt/check-unique?\"+checkQs.toString(), { credentials:\"same-origin\" });\n      if (chk.ok) {\n        const info = await chk.json();\n        const errs = {};\n        if (info.username === false) errs.username = \"Bu kullanıcı adı zaten kayıtlı.\";\n        if (info.email === false)    errs.email    = \"Bu e-posta zaten kayıtlı.\";\n        if (Object.keys(errs).length){ setFieldErrors(errs); return; }\n      }\n    }catch{}\n\n    let res;\n    try{\n      res = await postJSON(\"/user-opt/add\", payload);\n    }catch(e){\n      survey.errors = [{ text: \"Sunucuya ulaşılamadı. Lütfen tekrar deneyin.\" }];\n      return;\n    }\n\n    if (res.ok){\n      try {\n        const data = await res.clone().json();\n        const next = data?.next || \"/login\";\n        window.location.assign(next);\n      } catch {\n        window.location.assign(\"/login\");\n      }\n      return;\n    }\n\n    let message = \"Kayıt oluşturulamadı.\";\n    let fieldErrors = null;\n    try {\n      const err = await res.clone().json();\n      if (err?.message) message = err.message;\n      if (err?.errors && typeof err.errors === \"object\") fieldErrors = err.errors;\n    } catch {}\n\n    if ((res.status === 409 || res.status === 400) && !fieldErrors) {\n      fieldErrors = {};\n      fieldErrors.username = fieldErrors.username || \"Bu kullanıcı adı zaten kayıtlı.\";\n      fieldErrors.email    = fieldErrors.email    || \"Bu e-posta zaten kayıtlı.\";\n    }\n\n    setFieldErrors(fieldErrors);\n    survey.errors = [{ text: message }];\n  }\n\n  // Survey render + BUTONLAR (ActionBar varsa onu, yoksa fallback)\n  document.addEventListener(\"DOMContentLoaded\", function(){\n    $(\"#surveyContainer\").Survey({ model: survey });\n\n    const host = document.getElementById(\"svBtnsHost\");\n    if (!host) return;\n\n    if (Survey.ActionBar && Survey.Action) {\n      // Survey ActionBar\n      const actions = [\n        new Survey.Action({ id:\"act-reset\",  title:\"Temizle\",  tooltip:\"Formu temizle\",  action: doReset }),\n        new Survey.Action({ id:\"act-submit\", title:\"Kayıt Ol\", tooltip:\"Kayıt oluştur\", action: onSubmit })\n      ];\n      const bar = new Survey.ActionBar(actions);\n      bar.render(host);\n    } else {\n      // Fallback: Survey buton sınıflarıyla HTML\n      host.innerHTML = `\n        <div class=\"sv-action-bar\">\n          <button type=\"button\" id=\"btnReset\"  class=\"sv-btn sv-footer__prev-btn me-2\">Temizle</button>\n          <button type=\"button\" id=\"btnSubmit\" class=\"sv-btn sv-footer__complete-btn\">\n            <span class=\"sv-action-bar-item__title\">Kayıt Ol</span>\n          </button>\n        </div>`;\n      document.getElementById(\"btnReset\").addEventListener(\"click\", doReset);\n      document.getElementById(\"btnSubmit\").addEventListener(\"click\", onSubmit);\n    }\n  });\n</script>\n</body>\n</html>\n",
        "output": "str",
        "x": 460,
        "y": 2060,
        "wires": [
            [
                "84be4beb553cbe26"
            ]
        ]
    },
    {
        "id": "898343caa6e3f92c",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 4",
        "func": "msg.cookies = {\n    token: null\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1960,
        "wires": [
            [
                "78a062b04551d6e3"
            ]
        ]
    },
    {
        "id": "5a5879c9b2e4a128",
        "type": "switch",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "property": "redirect",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/register",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 2100,
        "wires": [
            [
                "8637acb46830d49a"
            ],
            [
                "14819198696d743b"
            ]
        ]
    },
    {
        "id": "8a6d783f9fac6a74",
        "type": "link in",
        "z": "651af9bb9a46e4b0",
        "name": "link in 5",
        "links": [
            "7817b550669eb8a2"
        ],
        "x": 215,
        "y": 2100,
        "wires": [
            [
                "5a5879c9b2e4a128"
            ]
        ]
    },
    {
        "id": "14819198696d743b",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "126ead5b72b171f3"
        ],
        "x": 405,
        "y": 2140,
        "wires": []
    },
    {
        "id": "4a66cc4d80aa2897",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 310,
        "y": 360,
        "wires": [
            [
                "414d44229aa0ed03"
            ]
        ]
    },
    {
        "id": "2cbcf6d6ae4cab8b",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 330,
        "y": 480,
        "wires": [
            [
                "b8be420b120246f5"
            ]
        ]
    },
    {
        "id": "608bec346261cb04",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 330,
        "y": 1060,
        "wires": [
            [
                "afee2af02b51714d"
            ]
        ]
    },
    {
        "id": "f55ef5f0d076fe2f",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 330,
        "y": 620,
        "wires": [
            [
                "c8e03f51ac6bfb33"
            ]
        ]
    },
    {
        "id": "8a33b0e666b5995f",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 350,
        "y": 1220,
        "wires": [
            [
                "acc7c1f55f0a682a"
            ]
        ]
    },
    {
        "id": "333ba1b4a05495f7",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 330,
        "y": 1420,
        "wires": [
            [
                "a6a7474d00f800aa"
            ]
        ]
    },
    {
        "id": "afee2af02b51714d",
        "type": "subflow:8775dfdfd56f79c1",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 500,
        "y": 1060,
        "wires": [
            [
                "4801fcc29ebde45c"
            ]
        ]
    },
    {
        "id": "f59872569465a1b9",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 2",
        "func": "// JWT Sign node'u token'ı msg.payload'a yazıyor (storetoken=payload)\nconst token = String(msg.payload || \"\");\nif (!token) {\n  msg.statusCode = 302;\n  msg.headers = { location: \"/login\" };\n  msg.payload = \"\";\n  return msg;\n}\n\n// İstersen msg.cookies de kullanabilirsin, ama Set-Cookie header'ı kesin çalışır:\nmsg.headers = msg.headers || {};\nmsg.headers[\"Set-Cookie\"] = `token=${token}; HttpOnly; Path=/; SameSite=Lax; Max-Age=604800`;\n\n// /login?next=... desteği:\nconst q = (msg.req && msg.req.query) || {};\nconst next = (q.next && /^\\/.*/.test(q.next)) ? q.next : \"/\";\nmsg.headers.location = next;\n\nmsg.statusCode = 302;\nmsg.payload = \"\"; // 302 body boş\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1800,
        "wires": [
            [
                "86740e96f67da72b"
            ]
        ]
    },
    {
        "id": "a6a7474d00f800aa",
        "type": "subflow:8775dfdfd56f79c1",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 520,
        "y": 1420,
        "wires": [
            [
                "7c83cb4a19389f12"
            ]
        ]
    },
    {
        "id": "acc7c1f55f0a682a",
        "type": "subflow:8775dfdfd56f79c1",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 530,
        "y": 1220,
        "wires": [
            [
                "7083b2826db710fa"
            ]
        ]
    },
    {
        "id": "f3de723a0ab4e6a9",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 6",
        "func": "// Redirect after user-opt\nmsg.statusCode = 302;\nmsg.headers = { Location: msg.redirect || \"/user-list\" };\nmsg.payload = \"\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 1220,
        "wires": [
            [
                "b5c78ee5996d045c"
            ]
        ]
    },
    {
        "id": "b5c78ee5996d045c",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1770,
        "y": 1220,
        "wires": []
    },
    {
        "id": "da2c3ef5dc432c29",
        "type": "inject",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "a812e4a7bdb7b2cc"
            ]
        ]
    },
    {
        "id": "f285f794ec157009",
        "type": "debug",
        "z": "651af9bb9a46e4b0",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "b50b71bef2ac91e5",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 760,
        "y": 60,
        "wires": [
            [
                "f285f794ec157009"
            ]
        ]
    },
    {
        "id": "a15711b91a686a0d",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 440,
        "y": 60,
        "wires": [
            [
                "42e20be815dfa074"
            ]
        ]
    },
    {
        "id": "a812e4a7bdb7b2cc",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 7",
        "func": "msg.payload = {\n    username: \"admin\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 60,
        "wires": [
            [
                "a15711b91a686a0d"
            ]
        ]
    },
    {
        "id": "42e20be815dfa074",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 8",
        "func": "if (msg.payload) return null;  \n\nconst now = Date.now();\nmsg.payload = {\n  _id: 1000,\n  username: \"admin\",\n  password: \"$2a$10$xoiaDc.NvIeTq7eH0XoP5.47mNiKswxqXcXOSmkDTUEQ4MVhfqXOu\", \n  displayName: \"Sistem Yöneticisi\",\n  email: \"admin@site.local\",\n  roles: [\"admin\"],\n  active: true,\n  createdAt: now,\n  stamp: { createdAt: now, ip: \"127.0.0.1\", username: \"admin\", email: \"admin@site.local\" },\n  dateTime: new Date(now).toLocaleString(\"tr-TR\", { hour12: false })\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 60,
        "wires": [
            [
                "b50b71bef2ac91e5"
            ]
        ]
    },
    {
        "id": "7b383705f4aaec1f",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "aggregate",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": true,
        "name": "",
        "x": 620,
        "y": 260,
        "wires": [
            [
                "fdcf576ad7ef630b"
            ]
        ]
    },
    {
        "id": "4ebc1649e8305f46",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 700,
        "y": 360,
        "wires": [
            [
                "a1e1269d2a6b4d4c"
            ]
        ]
    },
    {
        "id": "a1e1269d2a6b4d4c",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 9",
        "func": "if (!msg.payload) {\n    msg.error = {\n        message: \"id ile eşleşen bir kayıt bulunamadı\"\n    }\n    return [null, msg]\n}\nif (msg.payload.done) {\n    msg.error = {\n        message: \"Tamamlanmış işler güncellenemez\"\n    }\n    return [null, msg]\n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 360,
        "wires": [
            [
                "b38fb814b875aebb"
            ],
            [
                "2713f0cacf4e39f6"
            ]
        ]
    },
    {
        "id": "8af76568d2754a77",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 720,
        "y": 480,
        "wires": [
            [
                "b3bffd50b8d5c4d7"
            ]
        ]
    },
    {
        "id": "b3bffd50b8d5c4d7",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 10",
        "func": "// Function 10 — /schedule/:id GET\n// Amaç: (1) form defaultlarını hazırlamak, (2) SSR gömme için todoJson & schedulesJson üretmek (ÇOKLU kayıt)\n\n/***** 1) Temel kontroller *****/\nif (!msg.payload && !msg.todo) {\n  msg.error = { message: \"id ile eşleşen bir kayıt bulunamadı\" };\n  return [null, msg];\n}\n\n// Upstream'te todo'yu msg.todo'ya koyduysan onu kullan, yoksa payload tekil todo olmalı\nconst todo = msg.todo || msg.payload;\nif (!todo) {\n  msg.error = { message: \"id ile eşleşen bir kayıt bulunamadı\" };\n  return [null, msg];\n}\nif (todo.done) {\n  msg.error = { message: \"Tamamlanmış işler için hatırlatıcı kurulamaz\" };\n  return [null, msg];\n}\n\n/***** 2) Yardımcılar *****/\nconst pad = (n)=> String(n).padStart(2, '0');\nfunction fmtLocal(d){\n  return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`+\n         `T${pad(d.getHours())}:${pad(d.getMinutes())}`;\n}\nfunction safe(v){ try { return JSON.stringify(v ?? null); } catch { return 'null'; } }\n\nfunction pickDateStr(rec){\n  if (!rec) return null;\n  // Olası alanlar: formData.datetime | datetime | dt | epoch | fireAt\n  if (rec.formData && rec.formData.datetime) return String(rec.formData.datetime);\n  if (rec.datetime) return String(rec.datetime);\n  if (rec.dt)       return String(rec.dt);\n  if (rec.epoch) {\n    const d = new Date(Number(rec.epoch));\n    if (!Number.isNaN(d.getTime())) return fmtLocal(d);\n  }\n  if (rec.fireAt) {\n    const d = new Date(rec.fireAt);\n    if (!Number.isNaN(d.getTime())) return fmtLocal(d);\n  }\n  return null;\n}\n\n/***** 3) Kaynaklardan çoklu listeyi toparla *****/\nconst collected = [];\nconst seen = new Set();\n\nfunction pushRec(rec){\n  if (!rec) return;\n  const dt = pickDateStr(rec);\n  if (!dt) return; // tarihi olmayanı listelemeyelim\n\n  // --- SADECE GERÇEK id VARSA tekilleştir ---\n  const sidRaw = rec._id ?? rec.id ?? rec.jobId ?? rec.scheduleId;\n  const sid = (sidRaw != null && sidRaw !== '') ? String(sidRaw) : null;\n  if (sid) {\n    if (seen.has(sid)) return;\n    seen.add(sid);\n  }\n\n  const note = (rec.formData && rec.formData.note) ? rec.formData.note\n             : (rec.note || todo.lastNote || '');\n\n  collected.push({\n    _id: sid || null,\n    todoId: todo.id,\n    datetime: dt,\n    note: String(note || '')\n  });\n}\n\n// a) Eğer upstream'ten bir array geldiyse (örn. ayrı schedule koleksiyonu find):\nif (Array.isArray(msg.schedules))     msg.schedules.forEach(pushRec);\nif (Array.isArray(msg.scheduleList))  msg.scheduleList.forEach(pushRec);\nif (Array.isArray(msg.payload))       msg.payload.forEach(pushRec); // (nadiren; upstream array olabilir)\n\n// b) Todo içine gömülü alanlar:\nif (Array.isArray(todo.scheduleHistory)) todo.scheduleHistory.forEach(pushRec);\nif (todo.schedule) pushRec(todo.schedule);\n\n// c) Sırala (yakın tarih önde)\ncollected.sort((a,b)=> String(a.datetime).localeCompare(String(b.datetime)));\n\n/***** 4) Form defaultları *****/\nconst now = new Date();\nconst uiNow = fmtLocal(now);\nlet uiDt = uiNow;\nlet uiNote = todo.lastNote || '';\n\n// En son kurulan hatırlatıcıyı default olarak yaz (yoksa now+10dk)\nif (collected.length) {\n  const lastRec = collected[collected.length - 1];\n  uiDt = lastRec.datetime || uiNow;\n  uiNote = lastRec.note || uiNote;\n} else {\n  const d = new Date(now.getTime());\n  d.setMinutes(d.getMinutes()+10, 0, 0);\n  uiDt = fmtLocal(d);\n}\n\n/***** 5) SSR gömme + form payloadu *****/\n// Tekil todo bilgisi\nmsg.todoJson = safe({ id: todo.id, name: todo.name, dateTime: todo.dateTime, stamp: todo.stamp });\n\n// Çoklu liste\nmsg.schedulesJson = safe(collected);\n\n// Template'in doğrudan kullandığı form payloadu\nmsg.payload = {\n  id:   todo.id,\n  name: todo.name,\n  schedule: { datetime: uiDt, min: uiNow, note: uiNote }\n};\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 480,
        "wires": [
            [
                "a35e8f26138c2a60",
                "dba9374ef41f8679"
            ],
            [
                "22dd74058ceaa141"
            ]
        ]
    },
    {
        "id": "813b033439558352",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 11",
        "func": "// function 11 — /opt/:type (trash | complete | open | update | schedule)\n\nconst type = msg.req?.params?.type || \"\";\nconst user = msg.user || { username: \"\", roles: [] };\n\n// findOne çıktısını normalize et\nconst doc = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload;\n\n// --- ID normalizasyonu\nconst rawFromForm = (msg.formData?.id ?? \"\").toString();\nconst rawFromDoc  = (doc?.id ?? \"\").toString();\nconst rawId = rawFromForm || rawFromDoc;\nconst asNum = Number(rawId);\nconst id = Number.isNaN(asNum) ? rawId : asNum;\n\nif (!doc) {\n  msg.error = { message: \"id ile eşleşen bir kayıt bulunamadı\" };\n  return [null, msg, null];  // [mongo, error, cron]\n}\n\n// --- Basit yetki kontrolü\nconst isAdmin = Array.isArray(user.roles) && user.roles.includes(\"admin\");\nif (doc?.stamp?.username && user?.username && doc.stamp.username !== user.username && !isAdmin) {\n  msg.error = { message: \"Yetkisiz işlem.\" };\n  return [null, msg, null];\n}\n\n// === İşlemler ===\nif (type === \"trash\") {\n  msg.operation = \"deleteOne\";\n  msg.payload   = [{ id }];\n  return [msg, null, null];\n}\n\nif (type === \"complete\") {\n  msg.operation = \"updateOne\";\n  msg.payload   = [{ id }, { $set: { done: true } }];\n  return [msg, null, null];\n}\n\nif (type === \"open\") {\n  msg.operation = \"updateOne\";\n  msg.payload   = [{ id }, { $set: { done: false } }];\n  return [msg, null, null];\n}\n\nif (type === \"update\") {\n  const newName = (msg.formData?.name || \"\").trim();\n  const origVal = (msg.formData?.orig || \"\").trim();\n  if (!newName) {\n    msg.error = { message: \"Görev adı boş olamaz.\" };\n    return [null, msg, null];\n  }\n  if (newName === origVal) {\n    msg.error = { message: \"Herhangi bir değişiklik yapmadınız.\" };\n    return [null, msg, null];\n  }\n  msg.operation = \"updateOne\";\n  msg.payload   = [{ id }, { $set: { name: newName } }];\n  return [msg, null, null];\n}\n\nif (type === \"schedule\") {\n  // ——— PLANLAMA ———\n  const whenRaw  = (msg.formData?.datetime || \"\").trim();   // \"YYYY-MM-DDTHH:mm[:ss]\"\n  const noteText = (msg.formData?.note || \"\").trim();\n\n  if (!whenRaw) {\n    msg.error = { message: \"Tarih/saat seçiniz.\" };\n    return [null, msg, null];\n  }\n\n  // saniye ekle (datetime-local saniyesiz gelir)\n  const whenIso = whenRaw.length === 16 ? (whenRaw + \":00\") : whenRaw;\n  const dt = new Date(whenIso);\n\n  if (isNaN(dt.getTime())) {\n    msg.error = { message: \"Geçersiz tarih/saat.\" };\n    return [null, msg, null];\n  }\n\n  // crontinject için doğru seçenek\n  const scheduleOptions = {\n    crontiMethod: \"onDate\",\n    crontiArgs: [dt]   // Date nesnesi/epoch kullanılmalı\n  };\n\n  // --- BENZERSİZ _id üret (aynı dakikada birden fazla hatırlatıcı için) ---\n  let schSeq = (flow.get('schSeq') || 0) + 1;\n  flow.set('schSeq', schSeq);\n  const recId = `${dt.getTime()}-${schSeq}`;   // Örn: \"1756888260000-3\"\n\n  // — Normalize edilmiş plan kaydı —\n  const rec = {\n    _id:   recId, // <<< benzersiz id\n    formData: {\n      datetime: msg.formData.datetime,  // \"YYYY-MM-DDTHH:mm\"\n      note:     noteText\n    },\n    fireAt:   dt.toISOString(),\n    epoch:    dt.getTime(),\n    createdAt: new Date().toISOString()\n  };\n\n  // — akış hafızasına kısa bir kopya (tetik anında erişim için)\n  const shallowTodo = {\n    ...doc,\n    schedule: rec,\n    lastNote: noteText\n  };\n  flow.set(`todo:${id}`, shallowTodo);\n\n  // — DB güncellemesi —\n  const isRehydrate = msg.rehydrate === true;\n  let updateDoc;\n  if (isRehydrate) {\n    // Rehydrate'de ikinci kez push etmeyelim; istersen hiç dokunma da diyebilirsin.\n    updateDoc = { $set: { schedule: rec } };\n  } else {\n    updateDoc = {\n      $set:  { schedule: rec, lastNote: noteText },\n      $push: { scheduleHistory: rec }\n    };\n  }\n\n  const mongoMsg = {\n    ...msg,\n    operation: \"updateOne\",\n    payload: [\n      { id },\n      updateDoc\n    ]\n  };\n\n  // — crontinject’e gidecek mesaj\n  const cronMsg = {\n    topic: `todo:${id}`,\n    payload: scheduleOptions,\n    todo: shallowTodo\n  };\n\n  // 3 çıkış: [mongo, error, cron]\n  return [mongoMsg, null, cronMsg];\n}\n\n// Bilinmeyen işlem\nmsg.error = { message: `Bilinmeyen işlem türü: ${type}` };\nreturn [null, msg, null];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 640,
        "wires": [
            [
                "9736330931d8ab79"
            ],
            [
                "8646b06022669592"
            ],
            [
                "7148ede4c5df0a6c"
            ]
        ]
    },
    {
        "id": "93d181d58a920cd0",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 840,
        "y": 580,
        "wires": [
            [
                "af5fc661d33623d3"
            ]
        ]
    },
    {
        "id": "af5fc661d33623d3",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 1000,
        "y": 580,
        "wires": []
    },
    {
        "id": "57fe0dbd56855d23",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 840,
        "y": 640,
        "wires": [
            [
                "813b033439558352"
            ]
        ]
    },
    {
        "id": "e82dbbf530f551b8",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "deleteOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1330,
        "y": 540,
        "wires": [
            [
                "91308c72ec45a46b"
            ]
        ]
    },
    {
        "id": "7148ede4c5df0a6c",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "18dc3105a4edec0c"
        ],
        "x": 1135,
        "y": 700,
        "wires": []
    },
    {
        "id": "193b96b36f8bb8a4",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "find",
        "output": "forEach",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 450,
        "y": 120,
        "wires": [
            [
                "f81c142f4742637a"
            ]
        ]
    },
    {
        "id": "4957ed9e50014e41",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 12",
        "func": "/*\nmsg.payload = {\n    schedule: {\n        $exists: 1\n    }\n}\nreturn msg;\n\nvar user = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload;\n\nif (!user) {\n    msg.error = { message: \"Kullanıcı adı/e-posta veya şifre hatalı\" };\n    return [null, msg];\n}\nmsg.user = user;\nreturn msg;\n*/\n// function 12 — rehydrate query\n// Yalnızca schedule/scheduleHistory olan ve done:false kayıtları çek\nmsg.payload = {\n  done: false,\n  $or: [\n    { scheduleHistory: { $exists: true, $ne: [] } },\n    { schedule: { $exists: true } }\n  ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 120,
        "wires": [
            [
                "193b96b36f8bb8a4"
            ]
        ]
    },
    {
        "id": "f99da836ba8f456d",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 830,
        "y": 1060,
        "wires": [
            [
                "83aeb4a66b06d227"
            ]
        ]
    },
    {
        "id": "0d8a639157364107",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1460,
        "y": 1220,
        "wires": [
            [
                "f3de723a0ab4e6a9"
            ]
        ]
    },
    {
        "id": "0c8fb0b08f44164f",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1460,
        "y": 1300,
        "wires": [
            [
                "30ba0301a2a907e7"
            ]
        ]
    },
    {
        "id": "30ba0301a2a907e7",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 13",
        "func": "// function 13 — activate/deactivate + update + başarılı işlemde redirect\nconst type  = msg.req?.params?.type ?? \"\";\nconst found = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload;\n\nif (!found) {\n  msg.error = { message: `İşlem için kullanıcı bulunamadı (ID: ${msg.formData?.id})` };\n  msg.redirect = \"/user-list\";\n  return [null, msg]; // [success, error]\n}\n\n// form verisini normalize et\nconst f = msg.formData || {};\nconst changes = {};\n\n// ---- UPDATE (profil düzenleme)\nif (type === \"update\") {\n  const changes = {};\n\n  // Görünen ad\n  const dn = (f.displayName || \"\").trim();\n  if (dn && dn !== found.displayName) changes.displayName = dn;\n\n  // ROL: ya admin ya user (tek değer)\n  if (\"isAdmin_present\" in f) {\n    const wantAdmin = String(f.isAdmin) === \"true\";\n    changes.roles = wantAdmin ? [\"admin\"] : [\"user\"]; // <<< tek rol\n  }\n\n  // Aktif/Pasif\n  if (typeof f.active !== \"undefined\") {\n    const wantActive = String(f.active) === \"true\";\n    const current = found.active ?? true;\n    if (wantActive !== current) changes.active = wantActive;\n  }\n\n  // Şifre (hash’lenmiş)\n  if (f.password && String(f.password).trim().length) {\n    changes.password = f.password;\n  }\n\n  if (!Object.keys(changes).length) {\n    msg.error = { message: \"Herhangi bir değişiklik yapmadınız.\" };\n    msg.redirect = `/user-edit/${found._id}`;\n    return [null, msg];\n  }\n\n  msg.payload = [{ _id: found._id }, { $set: changes }];\n  msg.statusCode = 302;\n  msg.headers = { Location: \"/user-list\" };\n  return [msg, null];\n}\n\n// ---- ACTIVATE / DEACTIVATE\nif (type === \"activate\" || type === \"deactivate\") {\n  changes.active = (type === \"activate\");\n\n  msg.payload = [{ _id: found._id }, { $set: changes }];\n\n  msg.statusCode = 302;\n  msg.headers = { Location: \"/user-list\" };\n\n  return [msg, null];\n}\n\n// ---- Bilinmeyen işlem\nmsg.error = { message: `Bilinmeyen işlem türü: ${type}` };\nmsg.redirect = \"/user-list\";\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1300,
        "wires": [
            [
                "b6a0401ccb7c0187"
            ],
            [
                "68b150d9072e014b"
            ]
        ]
    },
    {
        "id": "b6a0401ccb7c0187",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1810,
        "y": 1300,
        "wires": [
            [
                "388bd9ef3519ee93"
            ]
        ]
    },
    {
        "id": "388bd9ef3519ee93",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1970,
        "y": 1300,
        "wires": []
    },
    {
        "id": "049f6c44dff76dd4",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 920,
        "y": 1420,
        "wires": [
            [
                "d8c7a9da715ff676"
            ]
        ]
    },
    {
        "id": "d8c7a9da715ff676",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 14",
        "func": "const doc = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload;\n\nif (!doc) { msg.error = { message: \"Kayıt bulunamadı.\" }; return msg; }\n\n// id ve durum türevleri\ndoc.id       = String(doc._id);\ndoc.isActive = doc.active ?? true;\n\n// roller normalizasyonu (sizde zaten var)\nconst roles = Array.isArray(doc.roles) ? doc.roles : (doc.role ? [doc.role] : []);\nconst norm  = roles.map(s => String(s).toLowerCase().trim());\ndoc.roles   = norm.length ? Array.from(new Set(norm)) : [\"user\"];\ndoc.isAdmin = doc.roles.includes(\"admin\");\n\nmsg.payload = doc;\nmsg.year = new Date().getFullYear(); // alt yazı için (şablonda {{year}} var)\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1420,
        "wires": [
            [
                "1251f822538e5dd8"
            ],
            [
                "18d52f7ab428eef7"
            ]
        ]
    },
    {
        "id": "a1e33ed13fcde42a",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 500,
        "y": 1820,
        "wires": [
            [
                "23c69382a41e73a9"
            ]
        ]
    },
    {
        "id": "23c69382a41e73a9",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 15",
        "func": "const fp = msg.formData || {};\nconst identifier = (fp.identifier || fp.username || fp.email || '').toString().trim().toLowerCase();\nconst password   = (fp.password || '').toString();\n\n\nconst user = msg.payload || null;\n\n\nif (!user) {\n  msg.payload = { success: false, message: \"Kullanıcı adı/e-posta veya şifre hatalı\" };\n  msg.statusCode = 400; // HTTP 400 Bad Request\n  return [null, msg]; // 2. çıkışa gönder\n}\n\nconst uName = String(user.username || '').toLowerCase();\nconst uMail = String(user.email || '').toLowerCase();\nif (identifier && identifier !== uName && identifier !== uMail) {\n  msg.payload = { success: false, message: \"Kullanıcı adı/e-posta veya şifre hatalı\" };\n  msg.statusCode = 400; // HTTP 400 Bad Request\n  return [null, msg];\n}\n\n\nmsg.user = user;                 \nmsg.payload = { password };      \nreturn [msg, null];              \n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1820,
        "wires": [
            [
                "ed58fab8df11b349"
            ],
            [
                "2b2157abba6313fe"
            ]
        ]
    },
    {
        "id": "83aeb4a66b06d227",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "processUserList",
        "func": "// processUserList — createdAt/ stamp.createdAt'a göre DESC sırala + \"Kod 1\" zenginleştirme\n// Girdi:  msg.payload = Array<userDoc>\n// Çıktı:  msg.users   = DataTables satırları\n//         msg.usersJson = JSON.stringify(msg.users) (template'e gömülecek)\n\nfunction pickTs(u) {\n  // Öncelik: stamp.createdAt, yoksa createdAt\n  const v = (u && u.stamp && u.stamp.createdAt) != null ? u.stamp.createdAt : u?.createdAt;\n  if (typeof v === \"number\" && !isNaN(v)) return v;     // epoch ms\n  const t = Date.parse(v);                               // ISO string vs.\n  return isNaN(t) ? 0 : t;\n}\nfunction fmtTs(ts) {\n  if (!ts) return \"—\";\n  const d = new Date(Number(ts) || ts);\n  if (isNaN(d)) return \"—\";\n  return d.toLocaleString(\"tr-TR\", {\n    day: \"2-digit\", month: \"2-digit\", year: \"numeric\",\n    hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\",\n    hour12: false, timeZone: \"Europe/Istanbul\"\n  });\n}\nfunction toId(u) {\n  if (u && u._id) {\n    try { return typeof u._id === \"string\" ? u._id : String(u._id); } catch {}\n  }\n  return String(u?.id || \"\");\n}\nfunction short10(s) {\n  const x = String(s || \"\");\n  return x.length > 10 ? x.slice(0,10) + \"...\" : x;\n}\n\n// 0) normalize\nlet arr = Array.isArray(msg.payload) ? msg.payload : (msg.payload ? [msg.payload] : []);\n\n// 1) DESC sırala\narr.sort((a, b) => pickTs(b) - pickTs(a));\n\n// 2) Zenginleştirme + DataTables satırı üret\nmsg.users = arr.map(u => {\n  const row = {\n    id: toId(u),\n    username: u?.username ?? \"\",\n    displayName: u?.displayName ?? \"\",\n    email: u?.email ?? \"\",\n    roles: Array.isArray(u?.roles) ? u.roles : [],\n    active: !!u?.active,\n\n    // Görsel/ekstra alanlar\n    isAdmin: Array.isArray(u?.roles) && u.roles.includes(\"admin\"),\n    isActive: u?.active ?? true,\n\n    // Tarih sunumu (Kod 1 ile uyumlu, TR yerelleştirme + Europe/Istanbul)\n    createdAtText: fmtTs(pickTs(u)),\n\n    // Kısa ID metni (Kod 1)\n    display_short_created_at_id: short10(toId(u)),\n  };\n\n  return row;\n});\n\n// 3) Template'e gömmek için JSON string\nmsg.usersJson = JSON.stringify(msg.users);\n\n// (İsteğe bağlı) msg.payload'u dokunmadan bırakabilir veya hafifletmek için temizleyebilirsin:\n// msg.payload = null;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1060,
        "wires": [
            [
                "90f7036bef489ba2"
            ]
        ]
    },
    {
        "id": "4e98ad516c31ad46",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1330,
        "y": 620,
        "wires": [
            [
                "91308c72ec45a46b"
            ]
        ]
    },
    {
        "id": "9736330931d8ab79",
        "type": "switch",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "property": "operation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "deleteOne",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "updateOne",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 580,
        "wires": [
            [
                "e82dbbf530f551b8"
            ],
            [
                "4e98ad516c31ad46"
            ]
        ]
    },
    {
        "id": "2b2157abba6313fe",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "Login Error Response",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1000,
        "y": 1860,
        "wires": []
    },
    {
        "id": "d9c5fb2fbf3b0189",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "UniqueCheck",
        "func": "// Sadece /user-opt/add için kontrol yap\nconst p = msg.payload || {};\nif ((p.type || '') !== 'add') { return [null, msg]; }\n\n// Orijinal form verisini sakla (az sonra geri koyacağız)\nmsg.register = { ...p };\n\n// Case-insensitive arama için $expr + toLower\nconst uname = String(p.username || '').trim().toLowerCase();\nconst email = String(p.email || '').trim().toLowerCase();\n\nmsg.payload = {\n    $expr: {\n        $or: [\n            { $eq: [{ $toLower: \"$username\" }, uname] },\n            { $eq: [{ $toLower: \"$email\" }, email] }\n        ]\n    }\n};\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1200,
        "wires": [
            [
                "e8416d08fd2d145b"
            ],
            [
                "fc9042b8d1523bc0"
            ]
        ]
    },
    {
        "id": "e8416d08fd2d145b",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "user",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1060,
        "y": 1160,
        "wires": [
            [
                "a2f9234ca65d363f"
            ]
        ]
    },
    {
        "id": "a2f9234ca65d363f",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 16",
        "func": "// bulunan dokümanı al (mongodb4 findOne bazen tek obje, bazen array dönebiliyor)\nconst found = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload;\n\nif (!found) {\n  // Çakışma yok → orijinal payload'ı geri koy ve devam\n  msg.payload = msg.register || msg.payload;\n  return [msg, null];\n}\n\n// Hangi alan(lar) çakışmış?\nconst reqU = (msg.register?.username || '').toLowerCase();\nconst reqE = (msg.register?.email || '').toLowerCase();\n\nconst errors = {};\nif (String(found.username || '').toLowerCase() === reqU) {\n  errors.username = \"Bu kullanıcı adı alınmış.\";\n}\nif (String(found.email || '').toLowerCase() === reqE) {\n  errors.email = \"Bu e-posta kullanılmaktadır.\";\n}\n// emin olmak için, hiçbir key eşleşmezse ikisini de set et\nif (!Object.keys(errors).length) {\n  errors.username = \"Bu kullanıcı adı alınmış.\";\n  errors.email = \"Bu e-posta kullanılmaktadır.\";\n}\n\n// XHR ise JSON 409 dön, değilse /register’a redirect et\nconst isXHR = String(msg.req?.headers?.['x-requested-with'] || '').toLowerCase() === 'xmlhttprequest';\nif (isXHR) {\n  msg.statusCode = 409; // veya 400\n  msg.headers = { 'Content-Type': 'application/json' };\n  msg.payload = { message: \"Bu bilgilerle kayıt oluşturulamadı.\", errors };\n  return [null, msg];\n}\n\n// SSR/normal POST ise geri yönlendir\nmsg.statusCode = 302;\nmsg.headers = { Location: '/register' };\nmsg.payload = '';\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1160,
        "wires": [
            [
                "158f6cdbc523a790"
            ],
            [
                "4848370bce242d83"
            ]
        ]
    },
    {
        "id": "4848370bce242d83",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1430,
        "y": 1160,
        "wires": []
    },
    {
        "id": "fdcf576ad7ef630b",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 17",
        "func": "const arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst todos = arr.map(t => ({\n  id: t.id,\n  name: t.name,\n  done: !!t.done,\n  dateTime: t.dateTime || \"\",\n  stamp: t.stamp || {}\n}));\n\nmsg.userJson  = JSON.stringify(msg.user || null);\nmsg.todosJson = JSON.stringify(todos);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 260,
        "wires": [
            [
                "2ae9555726c58d4a"
            ]
        ]
    },
    {
        "id": "f81c142f4742637a",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "rehydrateMapper",
        "func": "// rehydrate mapper — each todo doc\nconst todo = msg.payload;\nconst now = Date.now();\n\nconst arr = Array.isArray(todo.scheduleHistory) ? todo.scheduleHistory\n    : (todo.schedule ? [todo.schedule] : []);\n\nfunction toISOshort(d) {\n    const p = n => String(n).padStart(2, '0');\n    return `${d.getFullYear()}-${p(d.getMonth() + 1)}-${p(d.getDate())}T${p(d.getHours())}:${p(d.getMinutes())}`;\n}\n\nfor (const s of arr) {\n    const epoch = s?.epoch ?? Date.parse(s?.formData?.datetime || \"\");\n    if (!epoch || epoch <= now) continue; // sadece gelecektekiler\n\n    const dt = new Date(epoch);\n\n    node.send({\n        rehydrate: true,                               // Function 11 $push atlaması için bayrak\n        topic: `todo:${todo.id}`,                      // cronti tetik anında id için kullanılıyor\n        payload: { crontiMethod: \"onDate\", crontiArgs: [dt] }, // ÖNEMLİ: Date nesnesi ver\n        todo: { id: todo.id, name: todo.name },\n        formData: { datetime: toISOshort(dt), note: (s?.formData?.note || todo.lastNote || \"\") }\n    });\n}\nreturn null; // multiple send\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 120,
        "wires": [
            [
                "dcacbd7ada1430a0"
            ]
        ]
    },
    {
        "id": "7e03acc68f556a9f",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/opt/schedule",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 820,
        "wires": [
            [
                "f701f5f92d547b4f",
                "3845a6b5807bb704"
            ]
        ]
    },
    {
        "id": "f701f5f92d547b4f",
        "type": "subflow:9357c048778312fb",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "x": 350,
        "y": 820,
        "wires": [
            [
                "cbdb6994173bdf89",
                "6f94f9b3f6975261"
            ]
        ]
    },
    {
        "id": "cbdb6994173bdf89",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.findThree()",
        "func": "/*\n// db.todo.findById (POST /opt/schedule → Check User sonrası)\nconst id = String(\n  msg.req?.body?.id ?? msg.req?.params?.id ?? msg.req?.query?.id ?? ''\n).trim();\n\nif (!id) {\n  msg.statusCode = 400;\n  msg.payload = { message: 'id gerekli' };\n  return msg; // tek çıkıştan 400 dönecek\n}\n\n// Check User zaten isAdmin'i set ediyor → tekrar hesaplama gerekmez\nconst isAdmin = !!msg.user?.isAdmin;\n\n// (İsteğe bağlı güvenlik: pratikte /opt/schedule bu aşamaya 302’siz geliyorsa login vardır.\n// Yine de koruma eklemek istersen, akışı durdur:)\nif (!isAdmin && !msg.user?.username) {\n  msg.statusCode = 401;\n  msg.payload = { message: 'Giriş gerekli' };\n  return null; // << akışı kesin ki aşağıdaki Mongo node’larına düşmesin\n}\n\n// Yetki filtresi\nconst filter = isAdmin\n  ? { id }\n  : { id, \"stamp.username\": String(msg.user.username).trim() };\n\nmsg.payload = filter;\nreturn msg;\n*/\n// db.todo.findThree() — POST /opt/schedule → Check User sonrası\n// id hem number hem string olabilir → ikisini de yakala\n// admin değilse sadece kendi kaydını görebilsin\n\n// 1) id'yi oku\nconst idRaw = String(\n  msg.req?.body?.id ?? msg.req?.params?.id ?? msg.req?.query?.id ?? ''\n).trim();\n\nif (!idRaw) {\n  msg.statusCode = 400;\n  msg.payload = { message: 'id gerekli' };\n  return msg; // tek çıkıştan 400 dönecek\n}\n\n// 2) numeric mi? hem numeric hem string eşle\nconst idNum = Number(idRaw);\nconst idFilterBase = Number.isFinite(idNum)\n  ? { $or: [ { id: idNum }, { id: idRaw } ] }\n  : { id: idRaw };\n\n// 3) admin kontrolü\nconst isAdmin = !!msg.user?.isAdmin;\n\n// (Opsiyonel güvenlik: login yoksa engelle)\nif (!isAdmin && !msg.user?.username) {\n  msg.statusCode = 401;\n  msg.payload = { message: 'Giriş gerekli' };\n  return null; // aşağıya düşmesin\n}\n\n// 4) son filtre\nconst filter = isAdmin\n  ? idFilterBase\n  : { ...idFilterBase, \"stamp.username\": String(msg.user.username).trim() };\n\nmsg.payload = filter;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 820,
        "wires": [
            [
                "5926842831fed148",
                "c152697d46307d9c"
            ]
        ]
    },
    {
        "id": "5926842831fed148",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 740,
        "y": 820,
        "wires": [
            [
                "b028db40bf340376"
            ]
        ]
    },
    {
        "id": "b028db40bf340376",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 18",
        "func": "// function — /opt/schedule: delete vs update (cancel eski + schedule yeni)\n// IN : Check User + db.todo.findOne sonrası (msg.payload = doküman / [doküman])\n// OUT1: delete branch -> mongodb4(updateOne)\n// OUT2: update branch -> mongodb4(updateOne)\n// OUT3: cronti branch  -> link out (crontinject hattı)\n/*\nconst body = msg.req?.body || {};\nconst mode = String(body.mode || '').toLowerCase();   // 'delete' gelirse 1. çıkış\nconst doc  = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload; // findOne sonucu\n\nconst rawId = String(body.id ?? doc?.id ?? '').trim();\n\n\n// --- yetki filtresi\nconst isAdmin = !!(msg.user?.isAdmin || (Array.isArray(msg.user?.roles) && msg.user.roles.includes('admin')));\nconst ownerFilter = isAdmin ? {} : { \"stamp.username\": String(msg.user?.username || '') };\n\n// === DELETE BRANCH ===\nif (mode === 'delete') {\n  const scheduleId = String(body.scheduleId || '').trim();\n  if (!scheduleId) {\n    msg.statusCode = 400;\n    msg.payload = { message: 'scheduleId gerekli' };\n    return [null, null, null];\n  }\n\n  // aktif schedule alanı da bu kayıt ise $unset et\n  const shouldUnset = doc?.schedule?._id && String(doc.schedule._id) === scheduleId;\n\n  const filter = { id: rawId, ...ownerFilter };\n  const update = shouldUnset\n    ? { $unset: { schedule: \"\" }, $pull: { scheduleHistory: { _id: scheduleId } } }\n    : { $pull: { scheduleHistory: { _id: scheduleId } } };\n\n  // OUT1: Mongo DB silme\n  const mongoMsg = RED.util.cloneMessage(msg);\n  mongoMsg.payload = [filter, update];\n\n  // OUT3: cronti cancel (topic benzersiz: todo:{todoId}:{scheduleId})\n  const cronCancelMsg = {\n    topic: `todo:${rawId}:${scheduleId}`,\n    payload: { crontiMethod: 'cancel' },\n    todo: { id: rawId, scheduleId }\n  };\n\n  return [mongoMsg, null, cronCancelMsg];\n}\n\n// === UPDATE (EKLE/DÜZENLE) BRANCH ===\nconst whenRaw  = String(body.datetime || '').trim();  // \"YYYY-MM-DDTHH:mm[:ss]\"\nconst noteText = String(body.note || '').trim();\nif (!whenRaw) {\n  msg.statusCode = 400;\n  msg.payload = { message: 'Tarih/saat gerekli' };\n  return [null, null, null];\n}\nconst whenIso = whenRaw.length === 16 ? (whenRaw + ':00') : whenRaw;\nconst dt = new Date(whenIso);\nif (isNaN(dt.getTime())) {\n  msg.statusCode = 400;\n  msg.payload = { message: 'Geçersiz tarih/saat' };\n  return [null, null, null];\n}\n\n// benzersiz _id üret (her job ayrı olsun → çakışma olmaz)\nlet schSeq = (flow.get('schSeq') || 0) + 1;\nflow.set('schSeq', schSeq);\nconst recId = `${dt.getTime()}-${schSeq}`;\n\nconst rec = {\n  _id: recId,\n  formData: { datetime: whenRaw.slice(0,16), note: noteText },\n  fireAt: dt.toISOString(),\n  epoch: dt.getTime(),\n  createdAt: new Date().toISOString()\n};\n\n// DB güncellemesi: aktif schedule'ı değiştir + history'e ekle + son notu güncelle\nconst filter = { id: rawId, ...ownerFilter };\nconst update = {\n  $set:  { schedule: rec, lastNote: noteText },\n  $push: { scheduleHistory: rec }\n};\n\nconst mongoMsg2 = RED.util.cloneMessage(msg);\nmongoMsg2.payload = [filter, update];\n\n// OUT3: cronti'ye mesajlar\n// 1) Varsa eski aktif schedule'ı İPTAL ET (cancel)\n// 2) Yeni zamanı KUR (onDate)\nconst cronMsgs = [];\nconst oldActiveId = String(doc?.schedule?._id || '');\nif (oldActiveId && oldActiveId !== recId) {\n  cronMsgs.push({\n    topic: `todo:${rawId}:${oldActiveId}`,\n    payload: { crontiMethod: 'cancel' },\n    todo: { id: rawId, scheduleId: oldActiveId }\n  });\n}\n\ncronMsgs.push({\n  topic: `todo:${rawId}:${recId}`,\n  payload: { crontiMethod: 'onDate', crontiArgs: [dt] }, // Date nesnesi ver\n  todo: { id: rawId, name: (doc?.name || ''), schedule: rec, lastNote: noteText }\n});\n\n// (İsteğe bağlı) header için shallow cache\ntry {\n  const shallowTodo = {\n    id: rawId,\n    name: doc?.name || '',\n    stamp: doc?.stamp || {},\n    lastNote: noteText,\n    schedule: { formData: { note: noteText } }\n  };\n  flow.set(`todo:${String(rawId)}`, shallowTodo);\n} catch (_) {}\n\nreturn [null, mongoMsg2, cronMsgs];\n*/\n// function 18 — /opt/schedule: delete vs update (cancel eski + schedule yeni)\n// IN : Check User + db.todo.findOne sonrası (msg.payload = doküman / [doküman])\n// OUT1: DELETE  -> mongodb4(updateOne)\n// OUT2: UPDATE  -> mongodb4(updateOne)\n// OUT3: CRON    -> link out (crontinject hattı)\n\nconst body = msg.req?.body || {};\nconst mode = String(body.mode || \"\").toLowerCase();   // 'delete' gelirse 1. çıkış\nconst doc  = Array.isArray(msg.payload) ? msg.payload[0] : msg.payload; // findOne sonucu\n\n// a) Filtreyi tip-güvenli kur: doc varsa onun id'si zaten doğru tiptedir.\nconst rawId = (doc && doc.id !== undefined)\n  ? doc.id\n  : (Number.isFinite(Number(body.id)) ? Number(body.id) : String(body.id || \"\").trim());\n\n// Yetki filtresi\nconst isAdmin = !!(msg.user?.isAdmin || (Array.isArray(msg.user?.roles) && msg.user.roles.includes(\"admin\")));\nconst ownerFilter = isAdmin ? {} : { \"stamp.username\": String(msg.user?.username || \"\") };\n\n// === DELETE BRANCH ===\nif (mode === \"delete\") {\n  const scheduleId = String(body.scheduleId || \"\").trim();\n  if (!scheduleId) {\n    msg.statusCode = 400;\n    msg.payload = { message: \"scheduleId gerekli\" };\n    return [null, null, null];\n  }\n\n  // Aktif schedule bu kayıt ise $unset de yap\n  const shouldUnset = doc?.schedule?._id && String(doc.schedule._id) === scheduleId;\n\n  const filter = { id: rawId, ...ownerFilter };\n  const update = shouldUnset\n    ? { $unset: { schedule: \"\" }, $pull: { scheduleHistory: { _id: scheduleId } } }\n    : { $pull: { scheduleHistory: { _id: scheduleId } } };\n\n  // OUT1: Mongo updateOne\n  const mongoMsg = RED.util.cloneMessage(msg);\n  mongoMsg.payload = [filter, update];\n\n  // OUT3: cron iptal (topic: todo:{todoId}:{scheduleId})\n  const cronCancelMsg = {\n    topic: `todo:${rawId}:${scheduleId}`,\n    payload: { crontiMethod: \"cancel\" },\n    todo: { id: rawId, scheduleId }\n  };\n\n  return [mongoMsg, null, cronCancelMsg];\n}\n\n// === UPDATE (EKLE/DÜZENLE) BRANCH ===\nconst whenRaw  = String(body.datetime || \"\").trim();   // \"YYYY-MM-DDTHH:mm\" veya \"...:ss\"\nconst noteText = String(body.note || \"\").trim();\nconst scheduleIdEditing = String(body.scheduleId || \"\").trim(); // b) Düzenlenen eski kaydın _id'si\n\nif (!whenRaw) {\n  msg.statusCode = 400;\n  msg.payload = { message: \"Tarih/saat gerekli\" };\n  return [null, null, null];\n}\nconst whenIso = whenRaw.length === 16 ? (whenRaw + \":00\") : whenRaw;\nconst dt = new Date(whenIso);\nif (isNaN(dt.getTime())) {\n  msg.statusCode = 400;\n  msg.payload = { message: \"Geçersiz tarih/saat\" };\n  return [null, null, null];\n}\n\n// Benzersiz _id üret (her iş ayrı)\nlet schSeq = (flow.get(\"schSeq\") || 0) + 1;\nflow.set(\"schSeq\", schSeq);\nconst recId = `${dt.getTime()}-${schSeq}`;\n\nconst rec = {\n  _id: recId,\n  formData: { datetime: whenRaw.slice(0, 16), note: noteText },\n  fireAt: dt.toISOString(),\n  epoch: dt.getTime(),\n  createdAt: new Date().toISOString()\n};\n\n// b) Eski kaydı $pull et + yenisini $push et + aktif schedule'ı güncelle\nconst filter = { id: rawId, ...ownerFilter };\nconst update = {\n  $set:  { schedule: rec, lastNote: noteText },\n  $push: { scheduleHistory: rec },\n  ...(scheduleIdEditing ? { $pull: { scheduleHistory: { _id: scheduleIdEditing } } } : {})\n};\n\nconst mongoMsg2 = RED.util.cloneMessage(msg);\nmongoMsg2.payload = [filter, update];\n\n// OUT3: cron — önce ESKİ aktif varsa cancel, sonra YENİ tarih için onDate\nconst cronMsgs = [];\nconst oldActiveId = String(doc?.schedule?._id || \"\");\nif (oldActiveId && oldActiveId !== recId) {\n  cronMsgs.push({\n    topic: `todo:${rawId}:${oldActiveId}`,\n    payload: { crontiMethod: \"cancel\" },\n    todo: { id: rawId, scheduleId: oldActiveId }\n  });\n}\ncronMsgs.push({\n  topic: `todo:${rawId}:${recId}`,\n  payload: { crontiMethod: \"onDate\", crontiArgs: [dt] },\n  todo: { id: rawId, name: (doc?.name || \"\"), schedule: rec, lastNote: noteText }\n});\n\n// (İsteğe bağlı) header için shallow cache\ntry {\n  const shallowTodo = {\n    id: rawId,\n    name: doc?.name || \"\",\n    stamp: doc?.stamp || {},\n    lastNote: noteText,\n    schedule: { formData: { note: noteText } }\n  };\n  flow.set(`todo:${String(rawId)}`, shallowTodo);\n} catch (_) {}\n\nreturn [null, mongoMsg2, cronMsgs];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 820,
        "wires": [
            [
                "8b20513b3074ae21",
                "801f1032fddb3397"
            ],
            [
                "496b0533d0dd2ec6",
                "8356584ac4ec8220"
            ],
            [
                "c85f8a5a8f2e81bc",
                "801668afe267c645"
            ]
        ]
    },
    {
        "id": "638fcdcf214c899c",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "302",
        "headers": {},
        "x": 1440,
        "y": 780,
        "wires": []
    },
    {
        "id": "8b20513b3074ae21",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1090,
        "y": 760,
        "wires": [
            [
                "11372450cde8ab06"
            ]
        ]
    },
    {
        "id": "496b0533d0dd2ec6",
        "type": "mongodb4",
        "z": "651af9bb9a46e4b0",
        "clientNode": "071adb762f609302",
        "mode": "collection",
        "collection": "todo",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1090,
        "y": 820,
        "wires": [
            [
                "11372450cde8ab06"
            ]
        ]
    },
    {
        "id": "11372450cde8ab06",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "function 19",
        "func": "// set-redirect\nconst id = String(msg.req?.body?.id || msg.req?.params?.id || '').trim();\nmsg.headers = msg.headers || {};\nmsg.headers.location = `/schedule/${id}`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 780,
        "wires": [
            [
                "638fcdcf214c899c"
            ]
        ]
    },
    {
        "id": "c85f8a5a8f2e81bc",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "18dc3105a4edec0c"
        ],
        "x": 1035,
        "y": 880,
        "wires": []
    },
    {
        "id": "801f1032fddb3397",
        "type": "debug",
        "z": "651af9bb9a46e4b0",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 740,
        "wires": []
    },
    {
        "id": "8356584ac4ec8220",
        "type": "debug",
        "z": "651af9bb9a46e4b0",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 920,
        "wires": []
    },
    {
        "id": "801668afe267c645",
        "type": "debug",
        "z": "651af9bb9a46e4b0",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 960,
        "wires": []
    },
    {
        "id": "c152697d46307d9c",
        "type": "debug",
        "z": "651af9bb9a46e4b0",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 720,
        "wires": []
    },
    {
        "id": "212b93a82df7edc7",
        "type": "debug",
        "z": "651af9bb9a46e4b0",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 400,
        "wires": []
    },
    {
        "id": "6f94f9b3f6975261",
        "type": "debug",
        "z": "651af9bb9a46e4b0",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 498.6666259765625,
        "y": 726.9999389648438,
        "wires": []
    },
    {
        "id": "3845a6b5807bb704",
        "type": "debug",
        "z": "651af9bb9a46e4b0",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 740,
        "wires": []
    },
    {
        "id": "dba9374ef41f8679",
        "type": "debug",
        "z": "651af9bb9a46e4b0",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1048.6666259765625,
        "y": 411.9999694824219,
        "wires": []
    }
]