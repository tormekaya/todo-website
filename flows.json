[
    {
        "id": "651af9bb9a46e4b0",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2ae9555726c58d4a",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Yapılacaklar Listesi</title>\n\n  <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\"/>\n  <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\"/>\n</head>\n<body class=\"bg-light\">\n\n  <!-- NAVBAR: solda sadece metin, sağda mavi kısayol (buton) -->\n  <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n    <div class=\"container d-flex align-items-center\">\n      <span class=\"navbar-text fw-semibold fs-4\">Yapılacaklar Listesi</span>\n      <!-- mavi kısayol: Admin Panel'e gider -->\n      <a href=\"/user-list\"\n         class=\"btn btn-primary ms-auto d-flex align-items-center justify-content-center rounded-1 p-0 shadow\"\n         style=\"width:48px;height:48px;\" aria-label=\"Admin Panel\">\n        <i class=\"bi bi-person-fill fs-4\"></i>\n      </a>\n    </div>\n  </nav>\n\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-8 offset-md-2\">\n\n        {{#error}}\n        <div class=\"alert alert-danger\">\n          <h4 class=\"m-0\">{{message}}</h4>\n        </div>\n        {{/error}}\n\n        <!-- Ekleme formu -->\n        <form action=\"/opt/add\" method=\"POST\" class=\"mb-3\">\n          <div class=\"input-group input-group-lg\">\n            <input required type=\"text\" name=\"name\"\n                   class=\"form-control {{#error}}border-danger{{/error}}\"\n                   placeholder=\"Dosyalar teslim edilecek...\">\n            <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n            <button class=\"btn btn-outline-primary px-5\" type=\"submit\">Ekle</button>\n          </div>\n        </form>\n\n        <!-- Liste Kartı -->\n        <div class=\"card overflow-hidden\">\n          <div class=\"card-body p-0\">\n            <div class=\"table-responsive\">\n              <table class=\"table table-hover m-0\">\n                <thead class=\"table-dark\">\n                  <tr>\n                    <th colspan=\"2\">Yapılacaklar Listesi</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {{#payload}}\n                  <tr class=\"align-middle\">\n                    <td>\n                      {{#done}}\n                        <div class=\"text-muted\"><del>{{name}}</del></div>\n                      {{/done}}\n                      {{^done}}\n                        <div>{{name}}</div>\n                      {{/done}}\n                      <span class=\"badge bg-secondary\">\n                        <i class=\"bi bi-calendar2-date\"></i>&nbsp;{{dateTime}}\n                      </span>\n                    </td>\n                    <td class=\"text-end\">\n                      <div class=\"btn-group\">\n                        <form method=\"POST\" class=\"m-0\">\n                          <input type=\"hidden\" name=\"id\" value=\"{{id}}\"/>\n\n                          {{#done}}\n                            <button type=\"submit\" formaction=\"/opt/open\" class=\"btn btn-warning\" title=\"Yeniden aç\">\n                              <i class=\"bi bi-arrow-clockwise\"></i>\n                            </button>\n                          {{/done}}\n\n                          {{^done}}\n                            <a href=\"/schedule/{{id}}\" class=\"btn btn-secondary\" title=\"Zamanla\">\n                              <i class=\"bi bi-alarm-fill\"></i>\n                            </a>\n                            <a href=\"/edit/{{id}}\" class=\"btn btn-info\" title=\"Düzenle\">\n                              <i class=\"bi bi-pencil-square\"></i>\n                            </a>\n                            <button type=\"submit\" formaction=\"/opt/complete\" class=\"btn btn-success\" title=\"Tamamla\">\n                              <i class=\"bi bi-check-square\"></i>\n                            </button>\n                          {{/done}}\n\n                          <button type=\"submit\" formaction=\"/opt/trash\" class=\"btn btn-danger\" title=\"Sil\">\n                            <i class=\"bi bi-trash\"></i>\n                          </button>\n                        </form>\n                      </div>\n                    </td>\n                  </tr>\n                  {{/payload}}\n\n                  {{^payload}}\n                  <tr>\n                    <td colspan=\"2\" class=\"text-muted text-center py-4\">Henüz giriş yapılmadı...</td>\n                  </tr>\n                  {{/payload}}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- Artık dışarıda sabit mavi kısayol YOK; navbar içine taşındı -->\n  <script src=\"/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n",
        "output": "str",
        "x": 540,
        "y": 220,
        "wires": [
            [
                "5f3b77fa64a6ca14"
            ]
        ]
    },
    {
        "id": "5f3b77fa64a6ca14",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 220,
        "wires": []
    },
    {
        "id": "25b78ffc1849119c",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "DB",
        "func": "// Flush DB\nglobal.set (\"DB\", {\n    todo: [],\n    user: []\n})",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nconst DB = global.get(\"DB\") || {\n    todo: [],\n    user: []\n}\n\n/*\ntodo db şeması\n    id: NOW\n    name: \"\"\n    done: true|false\n    stamp: {\n    createdAt: NOW,\n    ip: IP,\n    user: \"\",\n    email: \"\"\n    },\n    schedule: {\n    formdata: {\n        id: \"\"\n        datetime: \"ISODate\"\n    },\n    options: {\n        crontiMethod: \"onIntevalTime\",\n        crontiArgs: [ISODate,ISODate]\n    }\n\n    }\n    date: \"GG.AA.YYYY\"\n    time: \"SS.DD.NN\"\n*/\n\n\n/*\nUser db şeması\n    id: NOW\n    displayName: \"\"\n    active: true|false\n    username: \"\"\n    password: \"HASH\"\n    email:\n    stamp: {\n    createdAt: NOW,\n    ip: IP,\n    user: \"\",\n    email: \"\"\n    }\ndate: \"GG.AA.YYYY\"\ntime: \"SS.DD.NN\"\n*/\n\nglobal.set(\"DB\", DB)",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": []
    },
    {
        "id": "8a9c6c7f989384ed",
        "type": "inject",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "25b78ffc1849119c"
            ]
        ]
    },
    {
        "id": "9e7745c31875caa6",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.find()",
        "func": "const DB =global.get(\"DB\")\n\nmsg.payload = DB.todo.sort((a,b) => b.stamp.createdAt - a.stamp.createdAt)\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 220,
        "wires": [
            [
                "2ae9555726c58d4a"
            ]
        ]
    },
    {
        "id": "c5f4d0120c89df7e",
        "type": "link in",
        "z": "651af9bb9a46e4b0",
        "name": "link in 1",
        "links": [
            "0302817e86f493e9",
            "8646b06022669592",
            "2713f0cacf4e39f6",
            "22dd74058ceaa141"
        ],
        "x": 225,
        "y": 180,
        "wires": [
            [
                "9e7745c31875caa6"
            ]
        ]
    },
    {
        "id": "cb74c25f1cb1ec44",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/opt/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "c8e03f51ac6bfb33"
            ]
        ]
    },
    {
        "id": "91308c72ec45a46b",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 740,
        "y": 420,
        "wires": []
    },
    {
        "id": "f8a16a36a9c0bb02",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.opt()",
        "func": "const DB  = global.get(\"DB\") || { todo: [] };\nlet   todo = DB.todo;\n\nconst nowDate = new Date();\nconst now     = nowDate.getTime();\nconst type    = msg.req?.params?.type;\n\nif (type === \"add\") {\n  todo.push({\n    id: now,\n    name: (msg.payload.name || \"\").trim(),\n    done: false,\n    stamp: { createdAt: now, ip: msg.req.ip, user: \"\", email: \"\" },\n    dateTime: nowDate.toLocaleString(\"tr-TR\", { hour12: false })\n  });\n  DB.todo = todo; global.set(\"DB\", DB);\n  return [ msg, null, null ];\n}\n\nconst index = todo.findIndex(x => String(x.id) === String(msg.payload.id));\nif (index === -1) {\n  msg.error = { message: \"id ile eşleşen bir kayıt bulunamadı\" };\n  return [ null, msg, null ];\n}\n\nif (type === \"trash\") {\n  todo.splice(index, 1);\n  DB.todo = todo; global.set(\"DB\", DB);\n  return [ msg, null, null ];\n}\n\nif (type === \"schedule\") {\n  const when = msg.payload.schedule?.datetime || \"\";\n  const whenWithSec = when.length === 16 ? when + \":00\" : when;\n\n  let scheduleOptions = {\n    crontiMethod: \"onDate\",\n    crontiArgs: [whenWithSec, whenWithSec]\n  };\n\n  todo[index].schedule = {\n    formData: msg.payload,     \n    options: scheduleOptions\n  };\n\n  todo[index].stamp = { createdAt: now, ip: msg.req.ip, user: \"\", email: \"\" };\n  todo[index].dateTime = nowDate.toLocaleString(\"tr-TR\", { hour12: false });\n\n  DB.todo = todo; global.set(\"DB\", DB);\n\n  msg.payload = scheduleOptions;                 \n  msg.todo = todo[index];                     \n  msg.topic = `todo:${todo[index].id}`;       \n\n  return [msg, null, msg];\n}\n\n\n\n\n\nif (type === \"update\") {\n  if (todo[index].done) {\n    msg.error = { message: \"Tamamlanmış işler güncellenemez\" };\n    return [ null, msg, null ];\n  }\n  const newVal  = (msg.payload.name || \"\").trim();\n  const origVal = (msg.payload.orig || \"\").trim();\n  if (newVal === origVal) {\n    msg.error = { message: \"Herhangi bir güncelleme yapmadınız.\" };\n    return [ null, msg, null ];\n  }\n  todo[index].name = newVal;\n}\nelse if (type === \"complete\") {\n  todo[index].done = true;\n}\nelse if (type === \"open\") {\n  todo[index].done = false;\n}\n\ntodo[index].stamp    = { createdAt: now, ip: msg.req.ip, user: \"\", email: \"\" };\ntodo[index].dateTime = nowDate.toLocaleString(\"tr-TR\", { hour12: false });\n\nDB.todo = todo; global.set(\"DB\", DB);\nreturn [ msg, null, null ];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 460,
        "wires": [
            [
                "91308c72ec45a46b"
            ],
            [
                "8646b06022669592"
            ],
            [
                "463e1db29a4e8833"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error",
            ""
        ]
    },
    {
        "id": "c8e03f51ac6bfb33",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "validation",
        "func": "const typeLookup = {\n    trash: {\n        text: \"Silme\",\n        requireArgs: [\"id\"]\n    },\n    complete: {\n        text: \"Tamamlama\",\n        requireArgs: [\"id\"]\n    },\n    open: {\n        text: \"Açma\",\n        requireArgs: [\"id\"]\n    },\n    add: {\n        text: \"Ekleme\",\n        requireArgs: [\"name\"]\n    },\n    update: {\n        text: \"Güncelle\",\n        requireArgs: [\"id\", \"name\", \"orig\"]\n    },\n    schedule: {\n        text: \"Hatırlatıcı\",\n        requireArgs: [\"id\", \"datetime\"]\n    }\n}\n\nif (!Object.keys(typeLookup).includes(msg.req.params.type)) {\n    msg.error = {\n        message: `${msg.req.params.type} geçersiz bir parametre değeridir.`\n    }\n    return [null, msg]\n}\n\nif (!typeLookup[msg.req.params.type].requireArgs.every(arg => msg.payload[arg])) {\n    msg.error = {\n        message: `${typeLookup[msg.req.params.type].text} istediğiniz elemanın ${typeLookup[msg.req.params.type].requireArgs} bilgisi olmalı`\n    }\n    return [null, msg]\n}\n\nif (msg.req.params.type === \"update\") {\n    const newVal = (msg.payload.name || \"\").trim();\n    const origVal = (msg.payload.orig || \"\").trim();\n    if (newVal === origVal) {\n        msg.error = {\n            message: \"Herhangi bir güncelleme yapmadınız.\"\n        };\n        return [null, msg];\n    }\n}\nif (msg.req.params.type === \"schedule\") {\n    const newDt = (msg.payload.datetime || \"\").trim();\n    const origDt = (msg.payload.origDt || \"\").trim();\n    const newNote = (msg.payload.note || \"\").trim();\n    const origNote = (msg.payload.origNote || \"\").trim();\n\n    const okFmt = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/.test(newDt);\n    const ms = Date.parse(newDt);\n\n    if (!okFmt || Number.isNaN(ms)) {\n        msg.error = { message: \"Geçersiz tarih/saat. 'YYYY-AA-GGTHH:mm' giriniz.\" };\n        return [null, msg];\n    }\n    if (ms < Date.now()) {\n        msg.error = { message: \"Geçmiş bir zamana planlanamaz.\" };\n        return [null, msg];\n    }\n    if (origDt && newDt === origDt) {\n        msg.error = { message: \"Herhangi bir değişiklik yapmadınız.\" };\n        return [null, msg];\n    }\n\n    msg.payload.schedule = { datetime: newDt, epoch: ms };\n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 460,
        "wires": [
            [
                "f8a16a36a9c0bb02"
            ],
            [
                "0302817e86f493e9"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "0302817e86f493e9",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 415,
        "y": 500,
        "wires": []
    },
    {
        "id": "8646b06022669592",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 645,
        "y": 460,
        "wires": []
    },
    {
        "id": "a72f64871256d68a",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "9e7745c31875caa6"
            ]
        ]
    },
    {
        "id": "6f79df54bf91c316",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/edit/:id",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "414d44229aa0ed03"
            ]
        ]
    },
    {
        "id": "414d44229aa0ed03",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.findOne()",
        "func": "const DB = global.get(\"DB\")\n\nmsg.payload = DB.todo.find(x => x.id == msg.req.params.id)\n\nif (!msg.payload) {\n    msg.error = {\n        message: \"id ile eşleşen bir kayıt bulunamadı\"\n    }\n    return [null, msg]\n}\nif (msg.payload.done) {\n    msg.error = {\n        message: \"Tamamlanmış işler güncellenemez\"\n    }\n    return [null, msg]\n}\n\nreturn msg",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 280,
        "wires": [
            [
                "b38fb814b875aebb"
            ],
            [
                "2713f0cacf4e39f6"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "b38fb814b875aebb",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ToDo</title>\n\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\">\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <form action=\"/opt/update\" method=\"POST\">\n                    <input type=\"hidden\" name=\"id\" value=\"{{payload.id}}\">\n                    <input type=\"hidden\" name=\"orig\" value=\"{{payload.name}}\">\n                    <div class=\"mb-3\">\n                        <input required type=\"text\" name=\"name\" value=\"{{payload.name}}\" \n                               class=\"form-control form-control-lg {{#error}}border-danger{{/error}} {{^error}}border-info{{/error}}\"  \n                               placeholder=\"Dosyalar teslim edilecek...\">\n                    </div>\n                    <div class=\"d-flex justify-content-end gap-2\">\n                        <a class=\"btn btn-outline-warning\" href=\"/\">Vazgeç</a>\n                        <button class=\"btn btn-outline-secondary\" \n                                onclick=\"document.querySelector('[name=name]').value = ''\">Temizle</button>\n                        <button id=\"btnUpdate\" class=\"btn btn-outline-success px-5\" type=\"submit\" disabled>Güncelle</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n\n    <script>\n    (function(){\n        const nameEl = document.querySelector('[name=name]');\n        const origEl = document.querySelector('[name=orig]');\n        const btn    = document.getElementById('btnUpdate');\n\n        function toggle(){\n            const changed = (nameEl.value || '').trim() !== (origEl.value || '').trim();\n            btn.disabled = !changed;\n        }\n        document.addEventListener('DOMContentLoaded', toggle);\n        nameEl.addEventListener('input', toggle);\n    })();\n    </script>\n\n    <script src=\"/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n",
        "output": "str",
        "x": 540,
        "y": 280,
        "wires": [
            [
                "16deb591861247c0"
            ]
        ]
    },
    {
        "id": "2713f0cacf4e39f6",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 455,
        "y": 320,
        "wires": []
    },
    {
        "id": "16deb591861247c0",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 280,
        "wires": []
    },
    {
        "id": "3eea38f2a6d357e1",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/schedule/:id",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 141.1999969482422,
        "y": 360.1999816894531,
        "wires": [
            [
                "b8be420b120246f5"
            ]
        ]
    },
    {
        "id": "b8be420b120246f5",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.todo.findTwo()",
        "func": "const DB = global.get(\"DB\");\n\nconst item = DB.todo.find(x => x.id == msg.req.params.id);\n\nif (!item) {\n  msg.error = { message: \"id ile eşleşen bir kayıt bulunamadı\" };\n  return [null, msg];\n}\nif (item.done) {\n  msg.error = { message: \"Tamamlanmış işler için hatırlatıcı kurulamaz\" };\n  return [null, msg];\n}\n\nfunction fmtLocal(dt){\n  const p = n => String(n).padStart(2,'0');\n  return `${dt.getFullYear()}-${p(dt.getMonth()+1)}-${p(dt.getDate())}T${p(dt.getHours())}:${p(dt.getMinutes())}`;\n}\n\nconst now   = new Date();\nconst uiNow = fmtLocal(now);\nconst uiDt  = item.schedule?.datetime || uiNow;\nconst uiNote = item.schedule?.formData?.note || \"\";\n\nmsg.payload = {\n  id: item.id,\n  name: item.name,\n  schedule: {\n    datetime: uiDt, \n    min: uiNow,\n    note: uiNote      \n  }\n};\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 360,
        "wires": [
            [
                "a35e8f26138c2a60"
            ],
            [
                "22dd74058ceaa141"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "a35e8f26138c2a60",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ToDo</title>\n\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\">\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <form action=\"/opt/schedule\" method=\"POST\">\n                    <input type=\"hidden\" name=\"id\" value=\"{{payload.id}}\">\n                    <input type=\"hidden\" name=\"orig\" value=\"{{payload.name}}\">\n                    <input type=\"hidden\" name=\"origDt\" value=\"{{payload.schedule.datetime}}\">\n                    <input type=\"hidden\" name=\"origNote\" value=\"{{payload.schedule.note}}\">\n                    <div class=\"mb-3\">\n                        <input required type=\"datetime-local\" name=\"datetime\"\n                        value=\"{{payload.schedule.datetime}}\"\n                        min=\"{{payload.schedule.min}}\"\n                        class=\"form-control form-control-lg {{#error}}border-danger{{/error}} {{^error}}border-info{{/error}}\">\n                    </div>\n                    <div class=\"mb-3\">\n                        <textarea name=\"note\" rows=\"3\"\n                        class=\"form-control form-control-lg {{#error}}border-danger{{/error}} {{^error}}border-info{{/error}}\"\n                        placeholder=\"Bu görevle ilgili kısa not...\">{{payload.schedule.note}}</textarea>\n                    </div>\n                    <div class=\"d-flex justify-content-end gap-2\">\n                        <a class=\"btn btn-outline-warning\" href=\"/\">Vazgeç</a>\n                        <button class=\"btn btn-outline-secondary\" id=\"btnClear\" type=\"button\">Temizle</button>\n                        <button id=\"btnUpdate\" class=\"btn btn-outline-success px-5\" type=\"submit\" disabled>Planla</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        (function () {\n  const dtEl = document.querySelector('[name=datetime]');\n  const origEl = document.querySelector('[name=origDt]');\n  const noteEl   = document.querySelector('[name=note]');        \n  const origNtEl = document.querySelector('[name=origNote]');    \n  const btn = document.getElementById('btnUpdate');\n  const clear = document.getElementById('btnClear');\n\n  function toggle() {\n    const curr = (dtEl.value || '').trim();\n    const orig = (origEl.value || '').trim();\n    btn.disabled = (curr === '' || curr === orig);\n  }\n\n  document.addEventListener('DOMContentLoaded', () => {\n    if (!dtEl.value) {\n      const d = new Date(), p = n => String(n).padStart(2,'0');\n      const now = `${d.getFullYear()}-${p(d.getMonth()+1)}-${p(d.getDate())}T${p(d.getHours())}:${p(d.getMinutes())}`;\n      dtEl.value = now;\n      dtEl.min = now;\n    }\n    toggle();\n  });\n\n  dtEl.addEventListener('input', toggle);\n  noteEl.addEventListener('input', toggle);\n  clear.addEventListener('click', function(){ dtEl.value=''; toggle(); noteEl.value = ''; });\n})();\n    </script>\n\n\n\n    <script src=\"/js/bootstrap.bundle.min.js\"></script>\n</body>\n\n</html>",
        "output": "str",
        "x": 540,
        "y": 360,
        "wires": [
            [
                "c001fccb8fb4cf85"
            ]
        ]
    },
    {
        "id": "22dd74058ceaa141",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "c5f4d0120c89df7e"
        ],
        "x": 475,
        "y": 400,
        "wires": []
    },
    {
        "id": "c001fccb8fb4cf85",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 360,
        "wires": []
    },
    {
        "id": "463e1db29a4e8833",
        "type": "crontinject",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 1,
        "hasButton": false,
        "x": 740,
        "y": 480,
        "wires": [
            [
                "d6134361a15b1330"
            ]
        ]
    },
    {
        "id": "4a377d0e6259123f",
        "type": "inject",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "DB.todo",
        "payloadType": "global",
        "x": 500,
        "y": 100,
        "wires": [
            [
                "eca529bb067ce280"
            ]
        ]
    },
    {
        "id": "eca529bb067ce280",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "schedule",
        "func": "const list = msg.payload || [];\nlist.forEach(x => {\n  if (x.schedule?.options) {\n    node.send({\n      topic:   `todo:${x.id}`,        \n      payload: x.schedule.options     \n    });\n  }\n});\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "dcacbd7ada1430a0"
            ]
        ]
    },
    {
        "id": "6deb06d96837b126",
        "type": "e-mail",
        "z": "651af9bb9a46e4b0",
        "server": "smtp-relay.brevo.com",
        "port": "587",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 1370,
        "y": 480,
        "wires": []
    },
    {
        "id": "0b9f34182300bc33",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "header",
        "func": "const DB = global.get(\"DB\") || { todo: [] };\n\nif (!msg.todo) {\n  const m = (msg.topic || \"\").match(/^todo:(\\d+)/);\n  if (m) {\n    const id = m[1];\n    msg.todo = DB.todo.find(t => String(t.id) === id);\n  }\n}\nif (!msg.todo) return null; \n\nmsg.from  = \"Hatırlatıcı <talhaormekaya@gmail.com>\";       \nmsg.to    = msg.todo?.stamp?.email || \"talhaormekaya@gmail.com\";\nmsg.topic = `Hatırlatma: ${msg.todo?.name || \"Görev\"}`;\n\nconst i = DB.todo.findIndex(t => String(t.id) === String(msg.todo.id));\nif (i >= 0 && DB.todo[i].schedule) {\n  delete DB.todo[i].schedule;                                 \n  DB.todo[i].dateTime = new Date().toLocaleString(\"tr-TR\",{hour12:false});\n  DB.todo[i].stamp    = { createdAt: Date.now(), ip:\"\", user:\"\", email:\"\" };\n  global.set(\"DB\", DB);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 480,
        "wires": [
            [
                "1e3410a2c0801097"
            ]
        ]
    },
    {
        "id": "1e3410a2c0801097",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<p>{{todo.name}} işi için hatırlatma.</p>\n\n{{#todo.schedule.formData.note}}\n  <p style=\"white-space:pre-wrap;\"><strong>Not:</strong> {{todo.schedule.formData.note}}</p>\n{{/todo.schedule.formData.note}}\n",
        "output": "str",
        "x": 1220,
        "y": 480,
        "wires": [
            [
                "6deb06d96837b126"
            ]
        ]
    },
    {
        "id": "18dc3105a4edec0c",
        "type": "link in",
        "z": "651af9bb9a46e4b0",
        "name": "link in 2",
        "links": [
            "dcacbd7ada1430a0"
        ],
        "x": 645,
        "y": 520,
        "wires": [
            [
                "463e1db29a4e8833"
            ]
        ]
    },
    {
        "id": "dcacbd7ada1430a0",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "18dc3105a4edec0c"
        ],
        "x": 785,
        "y": 100,
        "wires": []
    },
    {
        "id": "d6134361a15b1330",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "OnlyFires",
        "func": "if (msg.schedule && (msg.schedule.list || msg.schedule.self)) {\n  return null; // kayıt onayı → mail gönderme\n}\n\nif (typeof msg.payload === \"object\" &&\n    (msg.payload.crontiMethod || msg.payload.crontiArgs)) {\n  return null;\n}\nconst isRealFire =\n  typeof msg.payload === \"number\" ||\n  (msg.payload && Object.prototype.toString.call(msg.payload) === \"[object Date]\");\n\nreturn isRealFire ? msg : null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 480,
        "wires": [
            [
                "0b9f34182300bc33"
            ]
        ]
    },
    {
        "id": "90f7036bef489ba2",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!doctype html>\n<html lang=\"tr\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Admin Panel — Kullanıcı Listesi</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n\n<body class=\"bg-light\">\n  <!-- NAVBAR -->\n  <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n    <div class=\"container d-flex align-items-center\">\n      <span class=\"navbar-text fw-semibold fs-4\">Admin Panel</span>\n      <a class=\"ms-auto nav-link fw-semibold fs-5\" href=\"/\">Ana Sayfa</a>\n    </div>\n  </nav>\n\n  <main class=\"container\">\n\n    {{#error}}\n    <div class=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n      <div class=\"me-2\">⚠️</div>\n      <div>{{message}}</div>\n    </div>\n    {{/error}}\n\n    <!-- Ekleme Formu -->\n    <div class=\"card shadow-sm mb-4\">\n      <div class=\"card-header bg-white\">\n        <h5 class=\"mb-0\">Kullanıcı Ekle</h5>\n      </div>\n      <div class=\"card-body\">\n        <form action=\"/user-opt/add\" method=\"post\" novalidate>\n          <div class=\"row g-3\">\n            <div class=\"col-md-4\">\n              <label class=\"form-label\">Kullanıcı Adı</label>\n              <input name=\"username\" required\n                     class=\"form-control {{#error.fields.username}}is-invalid{{/error.fields.username}}\"\n                     placeholder=\"Kullanıcı Adı\" value=\"{{body.username}}\">\n              {{#error.fields.username}}<div class=\"invalid-feedback\">{{.}}</div>{{/error.fields.username}}\n            </div>\n\n            <div class=\"col-md-4\">\n              <label class=\"form-label\">İsim Soyisim</label>\n              <input name=\"displayName\"\n                     class=\"form-control {{#error.fields.displayName}}is-invalid{{/error.fields.displayName}}\"\n                     placeholder=\"Ad Soyad\" value=\"{{body.displayName}}\">\n              {{#error.fields.displayName}}<div class=\"invalid-feedback\">{{.}}</div>{{/error.fields.displayName}}\n            </div>\n\n            <div class=\"col-md-4\">\n              <label class=\"form-label\">E-posta</label>\n              <input name=\"email\" type=\"email\" required\n                     class=\"form-control {{#error.fields.email}}is-invalid{{/error.fields.email}}\"\n                     placeholder=\"ad@domain.com\" value=\"{{body.email}}\">\n              {{#error.fields.email}}<div class=\"invalid-feedback\">{{.}}</div>{{/error.fields.email}}\n            </div>\n\n            <div class=\"col-md-4\">\n              <label class=\"form-label\">Parola</label>\n              <input name=\"password\" type=\"password\" minlength=\"8\"\n                     class=\"form-control {{#error.fields.password}}is-invalid{{/error.fields.password}}\"\n                     placeholder=\"En az 8 karakter\">\n              {{#error.fields.password}}<div class=\"invalid-feedback\">{{.}}</div>{{/error.fields.password}}\n            </div>\n\n            <div class=\"col-md-8 d-flex align-items-end gap-2\">\n              <button class=\"btn btn-primary\" type=\"submit\">Ekle</button>\n              <a class=\"btn btn-light\" href=\"/user-list\">Vazgeç</a>\n              <a class=\"btn btn-outline-secondary\" href=\"/user-list\">Yenile</a>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n    <!-- Liste -->\n    <div class=\"card shadow-sm\">\n      <div class=\"card-header bg-white d-flex align-items-center justify-content-between\">\n        <h5 class=\"mb-0\">Kullanıcılar</h5>\n        <span class=\"text-muted small\">{{payload.length}} kayıt</span>\n      </div>\n      <div class=\"table-responsive\">\n        <table class=\"table table-hover align-middle mb-0\">\n          <thead class=\"table-light\">\n            <tr>\n              <th>ID</th>\n              <th>Kullanıcı</th>\n              <th>İsim</th>\n              <th>E-posta</th>\n              <th>Durum</th>\n              <th>Kayıt</th>\n              <th>Rol</th> <!-- YENİ -->\n              <th class=\"text-end\">İşlemler</th>\n            </tr>\n          </thead>\n          <tbody>\n            {{#payload}}\n            <tr>\n              <td class=\"text-muted\">{{id}}{{_id}}</td>\n              <td>{{username}}</td>\n              <td>{{displayName}}</td>\n              <td>{{email}}</td>\n              <td>\n                {{#isActive}}<span class=\"badge text-bg-success\">Aktif</span>{{/isActive}}\n                {{^isActive}}\n                  {{#active}}<span class=\"badge text-bg-success\">Aktif</span>{{/active}}\n                  {{^active}}<span class=\"badge text-bg-secondary\">Pasif</span>{{/active}}\n                {{/isActive}}\n              </td>\n              <td><span class=\"text-muted small\">{{createdAtText}}</span></td>\n              <td>\n                {{#isAdmin}}\n                  <span class=\"badge text-bg-danger\">admin</span>\n                {{/isAdmin}}\n                {{^isAdmin}}\n                  <span class=\"badge text-bg-secondary\">user</span>\n                {{/isAdmin}}\n              </td>\n              <td class=\"text-end\">\n                <a class=\"btn btn-sm btn-outline-primary me-1\" href=\"/user-edit/{{id}}{{_id}}\">Düzenle</a>\n\n                {{#isActive}}\n                  <form class=\"d-inline\" action=\"/user-opt/deactivate\" method=\"post\">\n                    <input type=\"hidden\" name=\"id\" value=\"{{id}}{{_id}}\">\n                    <button class=\"btn btn-sm btn-outline-danger\" type=\"submit\">Pasifleştir</button>\n                  </form>\n                {{/isActive}}\n\n                {{^isActive}}\n                  {{#active}}\n                    <form class=\"d-inline\" action=\"/user-opt/deactivate\" method=\"post\">\n                      <input type=\"hidden\" name=\"id\" value=\"{{id}}{{_id}}\">\n                      <button class=\"btn btn-sm btn-outline-danger\" type=\"submit\">Pasifleştir</button>\n                    </form>\n                  {{/active}}\n                  {{^active}}\n                    <form class=\"d-inline\" action=\"/user-opt/activate\" method=\"post\">\n                      <input type=\"hidden\" name=\"id\" value=\"{{id}}{{_id}}\">\n                      <button class=\"btn btn-sm btn-outline-success\" type=\"submit\">Aktifleştir</button>\n                    </form>\n                  {{/active}}\n                {{/isActive}}\n              </td>\n            </tr>\n            {{/payload}}\n\n            {{^payload}}\n            <tr>\n              <td colspan=\"8\" class=\"text-center text-muted py-4\">Kayıt yok.</td>\n            </tr>\n            {{/payload}}\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <footer class=\"text-center text-muted small my-4\">© {{year}} Admin</footer>\n  </main>\n\n  <script>\n    document.addEventListener('DOMContentLoaded', () => {\n      const el = document.querySelector('footer');\n      if (el && el.innerHTML.includes('{{year}}')) {\n        el.innerHTML = el.innerHTML.replace('{{year}}', new Date().getFullYear());\n      }\n    });\n  </script>\n</body>\n</html>\n",
        "output": "str",
        "x": 540,
        "y": 580,
        "wires": [
            [
                "ec5abb8df0da65db"
            ]
        ]
    },
    {
        "id": "ec5abb8df0da65db",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 580,
        "wires": []
    },
    {
        "id": "4801fcc29ebde45c",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.user.find()",
        "func": "// db.user.find() — en yeni en üstte, createdAtText + isAdmin hazırla\nconst DB = global.get(\"DB\") || { user: [] };\nconst rows = Array.isArray(DB.user) ? DB.user.slice() : [];\n\n// DESC: order → createdAt → id\nrows.sort((a, b) => {\n  const ao = a.order ?? a.createdAt ?? 0;\n  const bo = b.order ?? b.createdAt ?? 0;\n  if (ao !== bo) return bo - ao;\n  const aid = (a.id ?? a._id ?? \"\").toString();\n  const bid = (b.id ?? b._id ?? \"\").toString();\n  return bid.localeCompare(aid);\n});\n\nconst fmt = (ts) => {\n  if (!ts) return \"-\";\n  const d = new Date(Number(ts));\n  return isNaN(d.getTime()) ? \"-\" :\n    d.toLocaleString(\"tr-TR\", { dateStyle: \"short\", timeStyle: \"short\" });\n};\n\nmsg.payload = rows.map(r => {\n  const roles = Array.isArray(r.roles) ? r.roles : (r.role ? [r.role] : []);\n  const norm  = roles.map(s => String(s).toLowerCase().trim());\n  return {\n    ...r,\n    roles: Array.from(new Set(norm)).length ? Array.from(new Set(norm)) : [\"user\"],\n    isAdmin: norm.includes(\"admin\"),\n    createdAtText: fmt(r.createdAt)\n  };\n});\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 580,
        "wires": [
            [
                "90f7036bef489ba2"
            ]
        ]
    },
    {
        "id": "4ca887471ba0d4a5",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/user-list",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "4801fcc29ebde45c"
            ]
        ]
    },
    {
        "id": "cecc1be4c4bb0aa4",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/user-opt/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "7083b2826db710fa"
            ]
        ]
    },
    {
        "id": "8f757371b383fe24",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/user-list"
        },
        "x": 900,
        "y": 680,
        "wires": []
    },
    {
        "id": "97440a5695968cc4",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.user.opt()",
        "func": "const DB = global.get(\"DB\") || { user: [] };\nconst user = DB.user;\n\nconst nowDate = new Date();\nconst now = nowDate.getTime();\nconst type = msg.req?.params?.type ?? \"\";\n\n// yardımcı: truthy -> boolean\nfunction toBool(v) {\n  const s = String(v).toLowerCase();\n  return (s === \"true\" || s === \"1\" || s === \"on\");\n}\n\nif (type === \"add\") {\n\n  const isFirstUser =\n    !Array.isArray(user) || user.length === 0;\n\n  const rec = {\n    id: now,\n    username: (msg.payload.username || \"\").trim(),\n    password: (msg.payload.password || \"\").trim(), // (bcrypt) hash bu alana upstream'de yazılmış olabilir\n    displayName: (msg.payload.displayName || \"\").trim(),\n    email: (msg.payload.email || \"\").trim(),\n    active: true,\n\n    // 2) İlk kullanıcı admin + user, diğerleri sadece user\n    roles: isFirstUser ? [\"admin\", \"user\"] : [\"user\"],\n\n    // sıralama/tarih (sadece add)\n    createdAt: now,\n    order: now,\n\n    // iz bilgileri\n    stamp: { createdAt: now, ip: msg.req?.ip, user: \"\", email: \"\" },\n    dateTime: nowDate.toLocaleString(\"tr-TR\", { hour12: false })\n  };\n\n  user.push(rec);\n  DB.user = user; global.set(\"DB\", DB);\n  return [msg, null];\n}\n\n// ---- add dışı işlemler ----\nconst idx = user.findIndex(x => String(x.id ?? x._id) === String(msg.payload.id));\nif (idx === -1) {\n  msg.error = { message: \"id ile eşleşen bir kayıt bulunamadı\" };\n  return [null, msg];\n}\n\n// Güvenlik/temizlik: dışarıdan bu alanlar gelirse yok say\ndelete msg.payload.createdAt;\ndelete msg.payload.order;\ndelete msg.payload.roles; // rolleri sadece checkbox mekanizması ile yöneteceğiz\n\nswitch (type) {\n  case \"update\": {\n    // İsim\n    const newDN = (msg.payload.displayName || \"\").trim();\n    if (newDN && newDN !== user[idx].displayName) user[idx].displayName = newDN;\n\n    // E-posta\n    const newEmail = (msg.payload.email || \"\").trim();\n    if (newEmail && newEmail !== user[idx].email) user[idx].email = newEmail;\n\n    // Parola (bcrypt hash upstream'den geliyor olabilir)\n    const newP = (msg.payload.password || \"\").trim();\n    if (newP && newP !== user[idx].password) user[idx].password = newP;\n\n    // Aktif/Pasif (opsiyonel)\n    if (typeof msg.payload.active !== \"undefined\") {\n      const boolActive = toBool(msg.payload.active);\n      if (boolActive !== user[idx].active) user[idx].active = boolActive;\n    }\n\n    // 🔹 ROL — Admin checkbox (isAdmin_present + isAdmin)\n    if (\"isAdmin_present\" in msg.payload) {\n      const wantAdmin = toBool(msg.payload.isAdmin);\n\n      let roles = Array.isArray(user[idx].roles) ? [...user[idx].roles] : [];\n      // normalize + tekilleştir\n      roles = roles.map(r => String(r).toLowerCase().trim());\n      roles = [...new Set(roles)];\n\n      // \"user\" her zaman bulunsun\n      if (!roles.includes(\"user\")) roles.unshift(\"user\");\n\n      // admin ekle/çıkar\n      if (wantAdmin && !roles.includes(\"admin\")) roles.push(\"admin\");\n      if (!wantAdmin && roles.includes(\"admin\")) roles = roles.filter(r => r !== \"admin\");\n\n      user[idx].roles = roles;\n\n      // temizlik\n      delete msg.payload.isAdmin_present;\n      delete msg.payload.isAdmin;\n    }\n\n    break;\n  }\n\n  case \"activate\":\n    user[idx].active = true;\n    break;\n\n  case \"deactivate\":\n    user[idx].active = false;\n    break;\n\n  default:\n    msg.error = { message: `${type} desteklenmiyor.` };\n    return [null, msg];\n}\n\n// iz/stamp güncelle\nuser[idx].stamp = { createdAt: now, ip: msg.req?.ip, user: \"\", email: \"\" };\nuser[idx].dateTime = nowDate.toLocaleString(\"tr-TR\", { hour12: false });\n\n// kaydet\nDB.user = user; global.set(\"DB\", DB);\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 680,
        "wires": [
            [
                "8f757371b383fe24"
            ],
            [
                "68b150d9072e014b"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "7083b2826db710fa",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "validation",
        "func": "const typeLookup = {\n    add: {\n        text: \"Ekleme\",\n        requireArgs: [\"username\", \"password\",\"email\"]\n    },\n    update: {\n        text: \"Güncelle\",\n        requireArgs: [\"id\", \"email\"]\n    },\n    activate: {\n        text: \"Aktifleştirme\",\n        requireArgs: [\"id\"]\n    },\n    deactivate: {\n        text: \"Pasifleştirme\",\n        requireArgs: [\"id\"]\n    }\n};\n\nconst type = msg.req?.params?.type;\nfunction fail(message, fields = {}) {\n  \n  const b = { ...(msg.payload || {}) };\n  delete b.password;\n\n  msg.error = { message, fields };\n  msg.body = b;\n  return [null, msg];                \n}\n\n\nif (!typeLookup[type]) return fail(`${type} geçersiz bir parametre değeridir.`);\n\n\nconst ok = typeLookup[type].requireArgs.every(a => ((msg.payload?.[a] ?? \"\") + \"\").trim() !== \"\");\nif (!ok) return fail(`${typeLookup[type].text} için ${typeLookup[type].requireArgs.join(\", \")} zorunlu.`);\n\nmsg.payload.username = (msg.payload.username ?? \"\").trim();\nmsg.payload.displayName = (msg.payload.displayName ?? \"\").trim();\nmsg.payload.email = (msg.payload.email ?? \"\").trim();\nmsg.payload.id = (msg.payload.id ?? \"\").toString().trim();\n\nconst pass = (msg.payload.password ?? \"\").trim();\nconst email = msg.payload.email;\nconst emailRe = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nconst fe = {}; \nif (type === \"add\") {\n  if (pass.length < 8) fe.password = \"En az 8 karakter.\";\n  if (!emailRe.test(email)) fe.email = \"Geçerli e-posta girin.\";\n}\nif (type === \"update\") {\n  if (pass && pass.length < 8) fe.password = \"Parola girilecekse en az 8 karakter.\";\n  if (email && !emailRe.test(email)) fe.email = \"Geçerli e-posta girin.\";\n  if (!msg.payload.id) fe.id = \"id zorunlu.\";\n}\nif (type === \"activate\" || type === \"deactivate\") {\n  if (!msg.payload.id) fe.id = \"id zorunlu.\";\n}\nif (Object.keys(fe).length) return fail(\"Lütfen form hatalarını düzeltin.\", fe);\n\nif (type === \"update\" && !pass) delete msg.payload.password;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 680,
        "wires": [
            [
                "fc9042b8d1523bc0"
            ],
            [
                "7817b550669eb8a2"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "126ead5b72b171f3",
        "type": "link in",
        "z": "651af9bb9a46e4b0",
        "name": "link in 4",
        "links": [
            "7817b550669eb8a2",
            "68b150d9072e014b",
            "18d52f7ab428eef7"
        ],
        "x": 225,
        "y": 540,
        "wires": [
            [
                "4801fcc29ebde45c"
            ]
        ]
    },
    {
        "id": "7817b550669eb8a2",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "126ead5b72b171f3"
        ],
        "x": 415,
        "y": 720,
        "wires": []
    },
    {
        "id": "68b150d9072e014b",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "126ead5b72b171f3"
        ],
        "x": 835,
        "y": 720,
        "wires": []
    },
    {
        "id": "158f6cdbc523a790",
        "type": "bcrypt",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "action": "encrypt",
        "field": "payload.password",
        "hash": "payload",
        "target": "payload.password",
        "assignment": "assign",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 610,
        "y": 640,
        "wires": [
            [
                "97440a5695968cc4"
            ]
        ]
    },
    {
        "id": "314b400985be68da",
        "type": "http in",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "url": "/user-edit/:id",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 780,
        "wires": [
            [
                "7c83cb4a19389f12"
            ]
        ]
    },
    {
        "id": "7c83cb4a19389f12",
        "type": "function",
        "z": "651af9bb9a46e4b0",
        "name": "db.user.findOne()",
        "func": "const DB = global.get(\"DB\") || { user: [] };\nconst id = msg.req?.params?.id;\nconst rows = Array.isArray(DB.user) ? DB.user : [];\n\nconst rec = rows.find(r => String(r.id ?? r._id) === String(id));\nif (!rec) {\n  msg.error = { message: \"Kayıt bulunamadı.\" };\n  msg.payload = {};\n  return msg;\n}\n\nconst roles = Array.isArray(rec.roles) ? rec.roles : (rec.role ? [rec.role] : []);\nconst norm = roles.map(s => String(s).toLowerCase().trim());\nrec.roles = norm.length ? Array.from(new Set(norm)) : [\"user\"];\nrec.isAdmin = rec.roles.includes(\"admin\");\n\nmsg.payload = rec;\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 780,
        "wires": [
            [
                "1251f822538e5dd8"
            ],
            [
                "18d52f7ab428eef7"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "1251f822538e5dd8",
        "type": "template",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!doctype html>\n<html lang=\"tr\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Admin Panel — Kullanıcı Düzenle</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <!-- Bootstrap -->\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n\n<body class=\"bg-light\">\n  <!-- NAVBAR: solda büyük metin, sağda metin link -->\n  <nav class=\"navbar bg-white border-bottom mb-4 py-3\">\n    <div class=\"container d-flex align-items-center\">\n      <span class=\"navbar-text fw-semibold fs-4\">Admin Panel — Düzenleme Sayfası</span>\n      <a class=\"ms-auto nav-link fw-semibold fs-5\" href=\"/user-list\">Admin Panel</a>\n    </div>\n  </nav>\n\n  <main class=\"container\">\n    {{#error}}\n    <div class=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n      <div class=\"me-2\">⚠️</div><div>{{message}}</div>\n    </div>\n    {{/error}}\n\n    <div class=\"card shadow-sm\">\n      <div class=\"card-header bg-white\">\n        <h5 class=\"mb-0\">Kullanıcı Düzenle</h5>\n      </div>\n      <div class=\"card-body\">\n        <form action=\"/user-opt/update\" method=\"post\" novalidate>\n          <input type=\"hidden\" name=\"id\" value=\"{{payload.id}}{{payload._id}}\">\n\n          <div class=\"row g-3\">\n            <div class=\"col-md-6\">\n              <label class=\"form-label\">Kullanıcı adı</label>\n              <input name=\"username\" readonly\n                     class=\"form-control {{#error.fields.username}}is-invalid{{/error.fields.username}}\"\n                     placeholder=\"kullanici\" value=\"{{payload.username}}\">\n              {{#error.fields.username}}<div class=\"invalid-feedback\">{{.}}</div>{{/error.fields.username}}\n            </div>\n\n            <div class=\"col-md-6\">\n              <label class=\"form-label\">İsim Soyisim</label>\n              <input id=\"displayName\"\n                     name=\"displayName\"\n                     data-initial=\"{{payload.displayName}}\"\n                     class=\"form-control {{#error.fields.displayName}}is-invalid{{/error.fields.displayName}}\"\n                     placeholder=\"Ad Soyad\" value=\"{{payload.displayName}}\">\n              {{#error.fields.displayName}}<div class=\"invalid-feedback\">{{.}}</div>{{/error.fields.displayName}}\n            </div>\n\n            <div class=\"col-md-6\">\n              <label class=\"form-label\">E-posta</label>\n              <input name=\"email\" type=\"email\" required readonly\n                     class=\"form-control {{#error.fields.email}}is-invalid{{/error.fields.email}}\"\n                     placeholder=\"ad@domain.com\" value=\"{{payload.email}}\">\n              {{#error.fields.email}}<div class=\"invalid-feedback\">{{.}}</div>{{/error.fields.email}}\n            </div>\n\n            <div class=\"col-md-6\">\n              <label class=\"form-label\">Yeni şifre (opsiyonel)</label>\n              <input id=\"password\" name=\"password\" type=\"password\" minlength=\"8\"\n                     class=\"form-control {{#error.fields.password}}is-invalid{{/error.fields.password}}\"\n                     placeholder=\"Yeni parola\">\n              {{#error.fields.password}}<div class=\"invalid-feedback\">{{.}}</div>{{/error.fields.password}}\n            </div>\n            {{#viewer.isAdmin}}\n            <!-- Admin yetkisi -->\n            <div class=\"col-12\">\n              <div class=\"form-check\">\n                <!-- Alanın gönderildiğini backend'e belli etmek için -->\n                <input type=\"hidden\" name=\"isAdmin_present\" value=\"1\">\n                <input class=\"form-check-input\" type=\"checkbox\" id=\"cbAdmin\"\n                       name=\"isAdmin\" value=\"true\"\n                       {{#payload.isAdmin}}checked{{/payload.isAdmin}}>\n                <label class=\"form-check-label\" for=\"cbAdmin\">Admin yetkisi ver</label>\n              </div>\n            </div>\n            {{/viewer.isAdmin}}\n            \n            <!-- Aktif / Pasif -->\n            <div class=\"col-12\">\n              <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" id=\"r1\" type=\"radio\" name=\"active\" value=\"true\"\n                       {{#payload.isActive}}checked{{/payload.isActive}}\n                       {{#payload.active}}checked{{/payload.active}}>\n                <label class=\"form-check-label\" for=\"r1\">Aktif</label>\n              </div>\n              <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" id=\"r2\" type=\"radio\" name=\"active\" value=\"false\"\n                       {{^payload.isActive}}{{^payload.active}}checked{{/payload.active}}{{/payload.isActive}}>\n                <label class=\"form-check-label\" for=\"r2\">Pasif</label>\n              </div>\n            </div>\n\n            <div class=\"col-12 d-flex justify-content-end gap-2\">\n              <a class=\"btn btn-warning\" href=\"/user-list\">Vazgeç</a>\n              <button id=\"btnUpdate\" class=\"btn btn-secondary\" type=\"submit\" disabled>Güncelle</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <footer class=\"text-center text-muted small my-4\">© {{year}} Admin</footer>\n  </main>\n\n  <!-- Değişiklik olmadan Güncelle açılamasın -->\n  <script>\n  document.addEventListener('DOMContentLoaded', () => {\n    const btn    = document.getElementById('btnUpdate');      // Güncelle\n    const dnEl   = document.getElementById('displayName');    // İsim Soyisim\n    const pwEl   = document.getElementById('password');       // Yeni şifre\n    const cb     = document.getElementById('cbAdmin');        // Admin checkbox\n    const radios = document.querySelectorAll('input[name=\"active\"]'); // Aktif/Pasif\n\n    if (!btn || !dnEl || !pwEl) return;\n\n    const initialDN     = (dnEl.dataset.initial || '').trim();\n    const initialAdmin  = !!cb?.checked;\n    const initialActive = (document.querySelector('input[name=\"active\"]:checked')?.value ?? '');\n\n    function checkCanSubmit() {\n      const dn = dnEl.value.trim();\n      const pw = pwEl.value;\n\n      const dnChanged    = dn !== initialDN;\n      const pwChanged    = pw.trim().length > 0;\n      const pwValid      = !pwChanged || pw.trim().length >= 8;\n      const roleChanged  = cb ? (cb.checked !== initialAdmin) : false;\n      const currentActive= (document.querySelector('input[name=\"active\"]:checked')?.value ?? '');\n      const activeChanged= currentActive !== initialActive;\n\n      // Kısa şifre görsel uyarısı\n      pwEl.classList.toggle('is-invalid', pwChanged && !pwValid);\n\n      const can = (dnChanged || pwChanged || roleChanged || activeChanged) && pwValid;\n\n      btn.disabled = !can;\n      btn.classList.toggle('btn-success', can);\n      btn.classList.toggle('btn-secondary', !can);\n    }\n\n    dnEl.addEventListener('input', checkCanSubmit);\n    pwEl.addEventListener('input', checkCanSubmit);\n    cb?.addEventListener('change', checkCanSubmit);\n    radios.forEach(r => r.addEventListener('change', checkCanSubmit));\n\n    checkCanSubmit();\n  });\n  </script>\n\n  <script>\n    // Yıl bilgisi\n    document.addEventListener('DOMContentLoaded', () => {\n      const el = document.querySelector('footer');\n      if (el && el.innerHTML.includes('{{year}}')) {\n        el.innerHTML = el.innerHTML.replace('{{year}}', new Date().getFullYear());\n      }\n    });\n  </script>\n</body>\n</html>\n",
        "output": "str",
        "x": 580,
        "y": 780,
        "wires": [
            [
                "f8653907910821de"
            ]
        ]
    },
    {
        "id": "f8653907910821de",
        "type": "http response",
        "z": "651af9bb9a46e4b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 780,
        "wires": []
    },
    {
        "id": "18d52f7ab428eef7",
        "type": "link out",
        "z": "651af9bb9a46e4b0",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "126ead5b72b171f3"
        ],
        "x": 495,
        "y": 820,
        "wires": []
    },
    {
        "id": "fc9042b8d1523bc0",
        "type": "switch",
        "z": "651af9bb9a46e4b0",
        "name": "hash-or-skip",
        "property": "payload.password",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$exists(payload.password) and $length($trim(payload.password)) > 0",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 680,
        "wires": [
            [
                "158f6cdbc523a790"
            ],
            [
                "97440a5695968cc4"
            ]
        ]
    }
]